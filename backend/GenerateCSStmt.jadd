/**
 * Implement the C# code generation for all Stmt nodes.
 */

import com.greentube.javaconverter.CodePrinterCS;

aspect GenerateCS 
{

    // --- AssertStmt ---
    
    public void AssertStmt.generateCS(CodePrinterCS out)
    {   
        // do not generate any assertion code   
    }

    // --- BasicTWR ---

    // --- Block ---

    public void Block.generateCS(CodePrinterCS out) 
    {
        generateCS(out,null);
    }    
    public void Block.generateCS(CodePrinterCS out, String continuelabel) 
    {
        boolean hadNonDeclStatements=false;
        int extraBraces = 0;

        out.print("{");
        out.increaseIndent();
        out.println();
        int n = getNumStmt();
        for (int i=0; i<n; i++) 
        {   Stmt s = getStmt(i);
            if (s instanceof VarDeclStmt) 
            {   if (hadNonDeclStatements) 
                {   out.print("{");
                    extraBraces++;
                    hadNonDeclStatements = false;
                }
            } 
            else 
            {   hadNonDeclStatements = true;
            }
            s.generateCS(out);
        }
        if (continuelabel!=null && out.hasPendingLabel(continuelabel)) 
        {   out.print(continuelabel);
            out.println(":;");
        }
        out.decreaseIndent();
        out.print("}");
        for (int i=0; i<extraBraces; i++) 
        {   out.print("}");
        }
        out.println();
    }

    // --- BranchTargetStmt ---
    public void BranchTargetStmt.generateCS(CodePrinterCS out)
    {   generateCS(out,null);
    }
    public void BranchTargetStmt.generateCS(CodePrinterCS out, String continuelabel)    
    {   System.err.print("UNEXPECTED:");
        this.dumpTree(System.err);           
    }

    public void BranchTargetStmt.generateInnerStmtCS(CodePrinterCS out, Stmt stmt, String continuelabel) 
    {   
        if (stmt instanceof Block)
        {   out.println();
            ((Block)stmt).generateCS(out, continuelabel);
        }
        else if (continuelabel!=null) 
        {   out.println();
            out.print("{");
            out.increaseIndent();
            stmt.generateCS(out);
            if (out.hasPendingLabel(continuelabel))
            {   out.print(continuelabel);
                out.println(":;");
            }            
            out.decreaseIndent();
            out.println();
            out.print("}");
        } 
        else 
        {   stmt.generateCS(out);
        }
    }

    public void DoStmt.generateCS(CodePrinterCS out, String continuelabel) 
    {
        out.print("do ");
        generateInnerStmtCS(out, getStmt(), continuelabel);
        out.print("while(");
        getCondition().generateUsingResultCS(out);
        out.println(");");
    }

    public void EnhancedForStmt.generateCS(CodePrinterCS out, String continuelabel) 
    {
        Expr e = getExpr();
        String vname = getVariableDecl().name();
        if (e.type().isArrayDecl()) 
        {   out.print("foreach (");
            getVariableDecl().getTypeAccess().generateCS(out);
            out.print(" ");
            out.printCSIdentifier(vname, "");
            out.print(" in ");
            e.generateUsingResultCS(out);
            out.print(") ");
            generateInnerStmtCS(out, getStmt(), continuelabel);
        }
        else if (e.type().isIterable()) 
        {   out.print("for (java.util.Iterator ");
            out.printCSIdentifier(vname, "_i");
            out.print(" = ");
            e.generateUsingResultCS(out);
            out.print(".iterator(); ");
            out.printCSIdentifier(vname, "_i");
            out.print(".hasNext(); ) ");

            out.println();
            out.println("{");
            out.increaseIndent();
            getVariableDecl().getTypeAccess().generateCS(out);
            out.print(" ");
            out.printCSIdentifier(vname, "");
            out.print(" = ");
            out.print("(");
            getVariableDecl().getTypeAccess().generateCS(out);
            out.print(") ");
            out.printCSIdentifier(vname, "_i");
            out.print(".next();");

            generateInnerStmtCS(out,getStmt(),continuelabel);

            out.decreaseIndent();
            out.println("}");
        }
        else 
        {   throw new RuntimeException("Expression is neither an array or an Iterable");
        }
    }

    public void ForStmt.generateCS(CodePrinterCS out, String continuelabel) 
    {  
        out.print("for (");
        for (int i=0; i<getNumInitStmt(); i++) 
        {   if (i>0) out.print(",");               
            Stmt s = getInitStmt(i);
            if (s instanceof ExprStmt)
            {   ((ExprStmt)s).getExpr().generateCS(out);
            }
            else
            {   s.generateCS(out);
            }
        }
        out.print("; ");
        if (hasCondition()) {
            getCondition().generateUsingResultCS(out);
        } 
        out.print("; ");
    
        for (int i=0; i<getNumUpdateStmt(); i++) 
        {   if (i>0) out.print(", ");
            ((ExprStmt)getUpdateStmt(i)).getExpr().generateUsingResultCS(out);
        }
        out.print(") ");

        generateInnerStmtCS(out, getStmt(), continuelabel);
    }

    public void LabeledStmt.generateCS(CodePrinterCS out) 
    {
        Stmt stmt = getStmt();
        if (stmt instanceof BranchTargetStmt) 
        {   ((BranchTargetStmt) stmt).generateCS(out, getLabel()+"_c");
        }
        else 
        {   stmt.generateCS(out);
        }
        
        String breaklabel = getLabel()+"_b";
        if (out.hasPendingLabel(breaklabel))
        {   out.print(breaklabel);
            out.println(":;");
        }            
    }

    public void SwitchStmt.generateCS(CodePrinterCS out, String continuelabel)
    {   
        Expr e = getExpr();
        out.print("switch (");
        e.generateUsingResultCS(out);
        if (e.type().isEnumDecl()) 
        {   out.print(".ordinal()");
        }         
        out.println(")");
        out.println("{");
        out.increaseIndent();

        Block b = getBlock();
        int n = b.getNumStmt();
        for (int i=0; i<n; i++) 
        {   Stmt stmt = b.getStmt(i);
            if ((stmt instanceof ConstCase) || (stmt instanceof DefaultCase) || (stmt instanceof Block)) 
            {   stmt.generateCS(out);
            }
            else
            {   out.increaseIndent();
                stmt.generateCS(out);
                out.decreaseIndent();
            }
        }

        if (b.executionCanReachBottom()) 
        {   out.println("    break;");
        }

        out.decreaseIndent();
        out.println("}");
    }

    public void WhileStmt.generateCS(CodePrinterCS out, String continuelabel) 
    {   out.print("while (");
        getCondition().generateUsingResultCS(out);
        out.print(") ");
        generateInnerStmtCS(out, getStmt(), continuelabel);
    }

    // --- BreakStmt ---

    public void BreakStmt.generateCS(CodePrinterCS out) 
    {   String label = getLabel();
        if (label==null || label.length()==0) 
        {   out.print("break;");
        }
        else
        {   out.printJumpToLabel(CodePrinterCS.escapeIdentifier(label,false)+"_b");
        }
        out.println();
    }

    // --- Case ---
    
    public void ConstCase.generateCS(CodePrinterCS out) 
    {   Expr e = getValue();
        if (canBeReachedByFallThrough()) 
        {   out.print("    goto case ");
            if (e.isEnumConstant()) 
            {   out.print("" + ((EnumDecl)e.type()).determineOrdinal(((VarAccess)e).name()) );
            } 
            else 
            {   e.generateUsingResultCS(out);
            }
            out.println(";");
        }
        out.print("case ");
        if (e.isEnumConstant()) 
        {   out.print("" + ((EnumDecl)e.type()).determineOrdinal(((VarAccess)e).name()) );
        }
        else 
        {   e.generateUsingResultCS(out);
        }
        out.println(":");
    }
    
    public void DefaultCase.generateCS(CodePrinterCS out) 
    {   if (canBeReachedByFallThrough()) 
        {   out.println("goto default;");
        }
        out.println("default:");
    }

    // --- ContinueStmt ---

    public void ContinueStmt.generateCS(CodePrinterCS out) 
    {   
        String label = getLabel();
        if (label==null || label.length()==0) 
        {   out.print("continue;");
        }
        else
        {   out.printJumpToLabel(CodePrinterCS.escapeIdentifier(label,false)+"_c");
        }
        out.println();
    }
  
    // --- EmptyStmt ---
    public void EmptyStmt.generateCS(CodePrinterCS out)
    {   
        out.println("{}");
    }    
    
    // --- ExprStmt ---
  
    public void ExprStmt.generateCS(CodePrinterCS out) 
    {   
        getExpr().generateCS(out);   // intentionally do no post-processing
        out.println(";");
    }
    
    // --- IfStmt ---
    
    public void IfStmt.generateCS(CodePrinterCS out) 
    {   out.print("if (");
        getCondition().generateUsingResultCS(out);
        out.println(") ");
        getThen().generateCS(out);
        Stmt e = getElse();
        if (e!=null) 
        {   out.println("else ");
            e.generateCS(out);
        }
    }
    
    // --- LocalClassDeclStmt ---
    public void LocalClassDeclStmt.generateCS(CodePrinterCS out) 
    {
        // class was already generated by top level class 
    }
    
    // --- ReturnStmt ---
    
    public void ReturnStmt.generateCS(CodePrinterCS out) 
    {
        Expr r = getResult();
        if (r==null) 
        {   out.print("return;");
        } 
        else
        {   out.print("return ");
            r.generateUsingResultCS(out);
            out.print(";");
        }
        out.println();      
    }   
    
    // --- SynchronizedStmt ---
    
    // --- ThrowStmt ---
    public void ThrowStmt.generateCS(CodePrinterCS out) 
    {
        out.print("throw ");
        getExpr().generateCS(out);
        out.println(";");
    }
    
    // --- TryStmt ---
    public void TryStmt.generateCS(CodePrinterCS out)        
    {
        out.println("try");
        getBlock().generateCS(out);
        
        int n = getNumCatchClause();
        for (int i=0; i<getNumCatchClause(); i++) 
        {   getCatchClause(i).generateCS(out);
        }
        out.println("catch (System.Exception _e) { throw _e; }");   
                
        Block fin = getFinally();
        if (fin!=null)
        {   out.println("finally");
            fin.generateCS(out);        
        }
    } 
    public void TryWithResources.generateCS(CodePrinterCS out)        
    {
        if (getNumCatchClause()>0 || getFinally()!=null) 
        {   out.println("try"); 
        }
        out.println("{");
        out.increaseIndent();            
        
        for (int i=0; i<getNumResource(); i++) 
        {   ResourceDeclaration d = getResource(i);
            d.getTypeAccess().type().generateNameCS(out);  
            out.print(" ");              
            out.printCSIdentifier(d.name(), "");
            out.print(" = ");
            d.getInit().generateUsingResultCS(out);
            out.println(";");
            out.println("try");
            if (i!=getNumResource()-1) 
            {   out.println("{");                                
                out.increaseIndent();
            }                
        }
        
        getBlock().generateCS(out);
        
        for (int i=getNumResource()-1; i>=0; i--)
        {   ResourceDeclaration d = getResource(i);
            if (i!=getNumResource()-1) 
            {   out.decreaseIndent();
                out.println("}");
            }
            out.print("catch(System.Exception _e1) { try { if(");
            out.printCSIdentifier(d.name());
            out.print("!=null) ");
            out.printCSIdentifier(d.name());
            out.print(".close(); } catch(System.Exception) {} ");
            out.printCSIdentifier(d.name());
            out.println("=null; throw _e1; }");
            
            out.print("finally { if (");
            out.printCSIdentifier(d.name(), "");
            out.print("!=null) { ");
            out.printCSIdentifier(d.name(), "");
            out.print(".close(); ");
            out.println("} }");
        }
        out.decreaseIndent();            
        out.println("}");
        
        int n = getNumCatchClause();
        for (int i=0; i<getNumCatchClause(); i++) 
        {   getCatchClause(i).generateCS(out);
        }                   
        Block fin = getFinally();
        if (fin!=null)
        {   out.println("finally");
            fin.generateCS(out);        
        }
    } 
    
    
    public void BasicCatch.generateCS(CodePrinterCS out)
    {
        ParameterDeclaration par = getParameter();
        out.print("catch (");
        par.type().generateNameCS(out);                        
        if (getBlock().usesParameterSomewhere(par.getID()))
        {   out.print(" ");
            out.printCSIdentifier(par.getID(), "");
        }
        out.println(")");
        getBlock().generateCS(out);
    }    
    public void MultiCatch.generateCS(CodePrinterCS out)
    {        
        CatchParameterDeclaration par = getParameter();
        for (int i=0; i<par.getNumTypeAccess(); i++)
        {   out.print("catch (");
            par.getTypeAccess(i).type().generateNameCS(out);
            if (getBlock().usesParameterSomewhere(par.getID())) 
            {   out.print(" ");
                out.printCSIdentifier(par.getID(), "");
            }
            out.println(")");
            getBlock().generateCS(out);
        }        
    }
        
    // --- VarDeclStmt ---
    
    public void VarDeclStmt.generateCS(CodePrinterCS out) 
    {
        int extradims = 0;
        for (int i=0; i<getNumDeclarator(); i++) 
        {   extradims = Math.max(extradims, getDeclarator(i).getNumDims());
        }
    
        getTypeAccess().generateCS(out);

        for (int i=0; i<extradims; i++) 
        {   out.print("[]");
        }               
        for (int i=0; i<getNumDeclarator(); i++) 
        {   VariableDeclarator d = getDeclarator(i);
            TypeDecl t = d.getTypeAccess().type();
            if (i>0) out.print(",");
            out.print(" ");         
            out.printCSIdentifier(d.name(), "");
            Expr e = d.getInit();
            if (e!=null) 
            {   out.print(" = ");                               
                if (t.isChar() && e.type().isInt()) 
                {   out.print("SYSTEM.castToChar(");
                    e.generateUsingResultCS(out);
                    out.print(")");
                } 
                else
                {   e.generateUsingResultCS(out);
                }                   
            }
        }
        if (! (getParent().getParent() instanceof ForStmt)) { out.println(";"); }
    }
}


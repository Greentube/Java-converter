aspect GenerateCS {
 
 	// --- AssertStmt ---
 	
 	// --- BasicTWR ---
 	
 	// --- Block ---
 	
	public void Block.generateCS(com.greentube.javaconverter.CodePrinter out) {
		boolean hadNonDeclStatements=false;
		int extraBraces = 0;
		
		out.print("{");
		out.increaseIndent();
		out.println();
  		int n = getNumStmt();
  		for (int i=0; i<n; i++) {
  			Stmt s = getStmt(i);
  			if (s instanceof VarDeclStmt) {
  				if (hadNonDeclStatements) {
  					out.print("{ ");
  					extraBraces++;
  					hadNonDeclStatements = false;
  				}
  			} else {
  				hadNonDeclStatements = true;
  			}
  			s.generateCS(out);
  		}
  		if ((getParent() instanceof SwitchStmt) && executionCanReachBottom()) {
  			out.print("break;");
  			out.println();
  		}
		out.decreaseIndent();
		out.print("}");
		for (int i=0; i<extraBraces; i++) {
			out.print(" }");
		}
		out.println();
  	}
  
  	public boolean Block.executionCanReachBottom() {
  		if (getNumStmt()<1) return true;
  		Stmt stmt = getStmt(getNumStmt()-1);
  		if (stmt instanceof Block) {
  			return ((Block) stmt).executionCanReachBottom();
  		} 
  		if (stmt instanceof ReturnStmt 
  		||  stmt instanceof BreakStmt
  		||  stmt instanceof ContinueStmt) return false;
  		return true;
  	} 
  
  	// --- BranchTargetStmt ---

	public void BranchTargetStmt.generateCS(com.greentube.javaconverter.CodePrinter out) {
		generateCS(out,null);
	}
  	
	public void BranchTargetStmt.generateCS(com.greentube.javaconverter.CodePrinter out, String label) {		
	}
  	
	public void DoStmt.generateCS(com.greentube.javaconverter.CodePrinter out, String label) {			
		if (label==null) {
			out.print("do ");
			getStmt().generateCS(out);
			out.print("while(");	
			getCondition().generateUsingResultCS(out);
			out.print(")");			
		} else {
			out.print("{ do { ");
			out.println();
			out.increaseIndent();
			getStmt().generateCS(out);
			out.printAndForgetLabel(label+"_c");
			out.println();
			out.print("}");
			out.print("while(");	
			getCondition().generateUsingResultCS(out);
			out.print(");");
			out.println();
			out.printAndForgetLabel(label+"_b");
			out.println();
			out.decreaseIndent();
			out.print("}");
		}	
		out.println();		
 	}
 	
	public void EnhancedForStmt.generateCS(com.greentube.javaconverter.CodePrinter out, String label) {
		if (label!=null) {
			out.print("{ ");
		}
		
		boolean isiterator=false;
		Expr e = getExpr();
		String vname = getVariableDecl().name();
		if (e.type().isArrayDecl()) {
			out.print("foreach (");
			getVariableDecl().getTypeAccess().generateCS(out);
			out.print(" ");
			out.print(vname);
			out.print("_l in ");
			e.generateUsingResultCS(out);
			out.print(") ");
		} else if (e.type().isIterable()) {
			out.print("for (java.util.Iterator "+vname+"_i = ");
			e.generateUsingResultCS(out);
			out.print(".iterator(); "+vname+"_i.hasNext(); ) ");	
			isiterator = true;		
		} else {
			throw new RuntimeException("Expression is neither an array or an Iterable");
		}
		
		if (label!=null) {
			out.print("{");
			out.println();
			out.increaseIndent();
		}
		
		if (isiterator) {
			out.print("{ ");
			out.println();
			out.increaseIndent();
			getVariableDecl().getTypeAccess().generateCS(out);
			out.print(" "+vname+"_l = ");
			out.print("(");
			getVariableDecl().getTypeAccess().generateCS(out);
			out.print(") ");
			out.print(vname+"_i.next();");
			out.println();
			getStmt().generateCS(out);
			out.decreaseIndent();
			out.print("}");
			out.println();
		} else {
			getStmt().generateCS(out);
		}
		if (label!=null) {
			out.decreaseIndent();
			out.printAndForgetLabel(label+"_c");
			out.print(" } ");
			out.printAndForgetLabel(label+"_b");
			out.print(" }");
			out.println(); 
		}							
 	}
 	
	public void ForStmt.generateCS(com.greentube.javaconverter.CodePrinter out, String label) {
		if (label!=null) {
			out.print("{ ");
		}

		out.print("for (");
		
		if (getNumInitStmt()==0) {
			out.print("; ");
		} else {			
			for (int i=0; i<getNumInitStmt(); i++) {
				if (i>0) out.print(", ");
				getInitStmt(i).generateCS(out);
			}
			out.print(" ");
		}
		if (hasCondition()) {
			getCondition().generateUsingResultCS(out);
		} 
		out.print("; ");
		
		for (int i=0; i<getNumUpdateStmt(); i++) {
			if (i>0) out.print(", ");
			((ExprStmt)getUpdateStmt(i)).getExpr().generateUsingResultCS(out);
		}
		out.print(") ");
		
		if (label!=null) {
			out.print("{");
			out.println();
			out.increaseIndent();
		}
		
		getStmt().generateCS(out);	

		if (label!=null) {
			out.decreaseIndent();
			out.printAndForgetLabel(label+"_c");
			out.print(" } ");
			out.printAndForgetLabel(label+"_b");
			out.print(" }");
			out.println(); 
		}					
 	}
 	
	public void LabeledStmt.generateCS(com.greentube.javaconverter.CodePrinter out) {
		((BranchTargetStmt)getStmt()).generateCS(out, getLabel());
 	}
 	
	public void SwitchStmt.generateCS(com.greentube.javaconverter.CodePrinter out, String label) {	
		out.print("switch (");
		
		Expr e = getExpr();
		e.generateUsingResultCS(out);
		if (e.type().isEnumDecl()) {
			out.print(".ordinal()");
		} 
		out.print(") ");
		getBlock().generateCS(out);	
		out.println();
 	}

	public void WhileStmt.generateCS(com.greentube.javaconverter.CodePrinter out, String label) {
		if (label!=null) {
			out.print("{ ");
		}
		
		out.print("while (");
		getCondition().generateUsingResultCS(out);
		out.print(") ");

		if (label!=null) {
			out.print("{");
			out.println();
			out.increaseIndent();
		}
		
		getStmt().generateCS(out);

		if (label!=null) {
			out.decreaseIndent();
			out.printAndForgetLabel(label+"_c");
			out.print(" } ");
			out.printAndForgetLabel(label+"_b");
			out.print(" }");
			out.println(); 
		}			
 	}
  	
  	// --- BreakStmt ---
  	
	public void BreakStmt.generateCS(com.greentube.javaconverter.CodePrinter out) {
		String l = getLabel();
		if (l==null || l.length()==0) {
			out.print("break;");
		} else {
			out.printJumpToLabel(l+"_b");
		}		
		out.println();
	}
  	
  	// --- Case ---
  	
  	public boolean Case.canBeReachedByFallThrough() {
  		ASTNode b = getParent();
  		int idx = b.getIndexOfChild(this);
  		if (idx<1) return false;
  		ASTNode prev = b.getChild(idx-1);
  		 
  		if (prev instanceof Block && ! ((Block) prev).executionCanReachBottom()) return false; 
  		if (prev instanceof ReturnStmt 
  		||  prev instanceof BreakStmt
  		||  prev instanceof ContinueStmt
  		||  prev instanceof Case) return false;
  		 
  		return true;
  	}
  	
	public void ConstCase.generateCS(com.greentube.javaconverter.CodePrinter out) {
		Expr e = getValue();				
		if (canBeReachedByFallThrough()) {
			out.print("goto case ");
			if (e.isEnumConstant()) {
				out.print("" + ((EnumDecl)e.type()).determineOrdinal(((VarAccess)e).name()) );
			} else {
				e.generateUsingResultCS(out);
			}
			out.print(";");
			out.println();
		}
		out.decreaseIndent();
		out.print("case ");
		if (e.isEnumConstant()) {
			out.print("" + ((EnumDecl)e.type()).determineOrdinal(((VarAccess)e).name()) );
		} else {
			e.generateUsingResultCS(out);
		}
		out.print(":");
		out.println();
		out.increaseIndent();
	}
	
	public void DefaultCase.generateCS(com.greentube.javaconverter.CodePrinter out) {
		if (canBeReachedByFallThrough()) {
			out.print("goto default;");
			out.println();
		}
		out.decreaseIndent();
		out.print("default:");
		out.println();
		out.increaseIndent();
	}
  	
  	// --- ContinueStmt ---

  	public void ContinueStmt.generateCS(com.greentube.javaconverter.CodePrinter out) {
		String l = getLabel();
		if (l==null || l.length()==0) {
			out.print("continue;");
		} else {
			out.printJumpToLabel(l+"_c");
		}
		out.println();
	}
  
    // --- EmptyStmt ---
    
    // --- ExprStmt ---
  
	public void ExprStmt.generateCS(com.greentube.javaconverter.CodePrinter out) {
		getExpr().generateCS(out);   // intentionally do no post-processing
		out.print(";");
		out.println();		
	}  	
	
	// --- IfStmt ---
	
	public void IfStmt.generateCS(com.greentube.javaconverter.CodePrinter out) {
		out.print("if (");
		getCondition().generateUsingResultCS(out);
		out.print(") ");
		getThen().generateCS(out);
		Stmt e = getElse();
		if (e!=null) {
			out.print("else ");
			e.generateCS(out);
		}
	}  	
	
	// --- LocalClassDeclStmt ---
	public void LocalClassDeclStmt.generateCS(com.greentube.javaconverter.CodePrinter out) {
		// class was already generated 
	}
	
	// --- ReturnStmt ---
	
	public void ReturnStmt.generateCS(com.greentube.javaconverter.CodePrinter out) {
		Expr r = getResult();
		if (r==null) {
			out.print("return;");
		} else {
			out.print("return ");
			r.generateUsingResultCS(out);
			out.print(";");
		}
		out.println();		
	}  	
	
	// --- SynchronizedStmt ---
	
	// --- ThrowStmt ---
		
	// --- TryStmt ---
		
	// --- VarDeclStmt ---
	
	public void VarDeclStmt.generateCS(com.greentube.javaconverter.CodePrinter out) {
		int extradims = 0;
		for (int i=0; i<getNumDeclarator(); i++) {
			extradims = Math.max(extradims, getDeclarator(i).getNumDims());
		}
	
		getTypeAccess().generateCS(out);

		for (int i=0; i<extradims; i++) {
			out.print("[]");
		}				
		for (int i=0; i<getNumDeclarator(); i++) {
			VariableDeclarator d = getDeclarator(i);
			TypeDecl t = d.getTypeAccess().type();
			if (i>0) out.print(",");
			out.print(" ");			
			out.print(d.name() + "_l");
			out.print(" = ");								
			Expr e = d.getInit();
			if (e!=null) {
				if (t.isChar() && e.type().isInt()) {
					out.print("java.lang.SYSTEM.castToChar(");
					e.generateUsingResultCS(out);
					out.print(")");
				} else {
					e.generateUsingResultCS(out);
				}
			} else if (t.isChar()) {
				out.print("'\\u0000'");
			} else if (t.isPrimitiveType()) {
				out.print("0");
			} else {
				out.print("null");
			}
		}
		out.print(";");
		if (! (getParent().getParent() instanceof ForStmt)) out.println();
	}

}


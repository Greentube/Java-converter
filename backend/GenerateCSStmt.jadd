import com.greentube.javaconverter.CodePrinter;

aspect GenerateCS {

    // --- AssertStmt ---
    
    public void AssertStmt.generateCS(CodePrinter out)
    {   // do not generate any assertion code   
    }

    // --- BasicTWR ---

    // --- Block ---

    public void Block.generateCS(CodePrinter out) {
        generateCS(out,null);
    }
    
    public void Block.generateCS(CodePrinter out, String continuelabel) 
    {
        boolean hadNonDeclStatements=false;
        int extraBraces = 0;

        out.print("{");
        out.increaseIndent();
        out.println();
        int n = getNumStmt();
        for (int i=0; i<n; i++) 
        {   Stmt s = getStmt(i);
            if (s instanceof VarDeclStmt) 
            {   if (hadNonDeclStatements) 
                {   out.print("{");
                    extraBraces++;
                    hadNonDeclStatements = false;
                }
            } 
            else 
            {   hadNonDeclStatements = true;
            }
            s.generateCS(out);
        }
        if (continuelabel!=null && out.hasPendingLabel(continuelabel)) 
        {   out.print(continuelabel);
            out.print(":;");
            out.println();
        }
        out.decreaseIndent();
        out.print("}");
        for (int i=0; i<extraBraces; i++) 
        {   out.print("}");
        }
        out.println();
    }

    // --- BranchTargetStmt ---
    public void BranchTargetStmt.generateCS(CodePrinter out)
    {   generateCS(out,null);
    }
    public void BranchTargetStmt.generateCS(CodePrinter out, String continuelabel)    
    {   System.err.print("UNEXPECTED:");
        this.dumpTree(System.err);           
    }

    public void BranchTargetStmt.generateInnerStmtCS(CodePrinter out, Stmt stmt, String continuelabel) 
    {   
        if (stmt instanceof Block)
        {   out.println();
            ((Block)stmt).generateCS(out, continuelabel);
        }
        else if (continuelabel!=null) 
        {   out.println();
            out.print("{");
            out.increaseIndent();
            stmt.generateCS(out);
            if (out.hasPendingLabel(continuelabel))
            {   out.print(continuelabel);
                out.print(":;");
                out.println();   
            }            
            out.decreaseIndent();
            out.println();
            out.print("}");
        } 
        else 
        {   stmt.generateCS(out);
        }
    }

    public void DoStmt.generateCS(CodePrinter out, String continuelabel) 
    {
        out.print("do ");
        generateInnerStmtCS(out, getStmt(), continuelabel);
        out.print("while(");
        getCondition().generateUsingResultCS(out);
        out.print(");");
        out.println();
    }

    public void EnhancedForStmt.generateCS(CodePrinter out, String continuelabel) 
    {
        Expr e = getExpr();
        String vname = getVariableDecl().name();
        if (e.type().isArrayDecl()) 
        {   out.print("foreach (");
            getVariableDecl().getTypeAccess().generateCS(out);
            out.print(" ");
            out.printCSIdentifier(vname, "");
            out.print(" in ");
            e.generateUsingResultCS(out);
            out.print(") ");
            generateInnerStmtCS(out, getStmt(), continuelabel);
        }
        else if (e.type().isIterable()) 
        {   out.print("for (java.util.Iterator ");
            out.printCSIdentifier(vname, "_i");
            out.print(" = ");
            e.generateUsingResultCS(out);
            out.print(".iterator(); ");
            out.printCSIdentifier(vname, "_i");
            out.print(".hasNext(); ) ");

            out.println();
            out.print("{");
            out.println();
            out.increaseIndent();
            getVariableDecl().getTypeAccess().generateCS(out);
            out.print(" ");
            out.printCSIdentifier(vname, "");
            out.print(" = ");
            out.print("(");
            getVariableDecl().getTypeAccess().generateCS(out);
            out.print(") ");
            out.printCSIdentifier(vname, "_i");
            out.print(".next();");

            generateInnerStmtCS(out,getStmt(),continuelabel);

            out.decreaseIndent();
            out.print("}");
            out.println();
        }
        else 
        {   throw new RuntimeException("Expression is neither an array or an Iterable");
        }
    }

    public void ForStmt.generateCS(CodePrinter out, String continuelabel) 
    {   out.print("for (");

        if (getNumInitStmt()==0) 
        {   out.print("; ");
        } 
        else 
        {   for (int i=0; i<getNumInitStmt(); i++) 
            {   if (i>0) out.print(", ");
                getInitStmt(i).generateCS(out);
            }
            out.print(" ");
        }
        if (hasCondition()) {
            getCondition().generateUsingResultCS(out);
        } 
        out.print("; ");
    
        for (int i=0; i<getNumUpdateStmt(); i++) 
        {   if (i>0) out.print(", ");
            ((ExprStmt)getUpdateStmt(i)).getExpr().generateUsingResultCS(out);
        }
        out.print(") ");

        generateInnerStmtCS(out, getStmt(), continuelabel);
    }

    public void LabeledStmt.generateCS(CodePrinter out) 
    {
        Stmt stmt = getStmt();
        if (stmt instanceof BranchTargetStmt) 
        {   ((BranchTargetStmt) stmt).generateCS(out, getLabel()+"_c");
        }
        else 
        {   stmt.generateCS(out);
        }
        
        String breaklabel = getLabel()+"_b";
        if (out.hasPendingLabel(breaklabel))
        {   out.print(breaklabel);
            out.print(":;");
            out.println();   
        }            
    }

	public void SwitchStmt.generateCS(CodePrinter out, String continuelabel)
    {   
        Expr e = getExpr();
        out.print("switch (");
        e.generateUsingResultCS(out);
        if (e.type().isEnumDecl()) {
            out.print(".ordinal()");
        }         
        out.print(")");
        out.println();
        out.print("{");
        out.println();
        out.increaseIndent();

        Block b = getBlock();
        int n = b.getNumStmt();
        for (int i=0; i<n; i++) 
        {   Stmt stmt = b.getStmt(i);
            if ((stmt instanceof ConstCase) || (stmt instanceof DefaultCase) || (stmt instanceof Block)) 
            {   stmt.generateCS(out);
            }
            else
            {   out.increaseIndent();
                stmt.generateCS(out);
                out.decreaseIndent();
            }
        }

        if (b.executionCanReachBottom()) 
        {   out.print("    break;");
            out.println();
        }

        out.decreaseIndent();
        out.print("}");
        out.println();
    }

    public void WhileStmt.generateCS(CodePrinter out, String continuelabel) 
    {   out.print("while (");
        getCondition().generateUsingResultCS(out);
        out.print(") ");
        generateInnerStmtCS(out, getStmt(), continuelabel);
    }

    // --- BreakStmt ---

    public void BreakStmt.generateCS(CodePrinter out) 
    {   String label = getLabel();
        if (label==null || label.length()==0) 
        {   out.print("break;");
        }
        else
        {   out.printJumpToLabel(CodePrinter.escapeIdentifier(label,false)+"_b");
        }
        out.println();
    }

    // --- Case ---
    
    public void ConstCase.generateCS(CodePrinter out) 
    {   Expr e = getValue();
        if (canBeReachedByFallThrough()) 
        {   out.print("    goto case ");
            if (e.isEnumConstant()) 
            {   out.print("" + ((EnumDecl)e.type()).determineOrdinal(((VarAccess)e).name()) );
            } 
            else 
            {   e.generateUsingResultCS(out);
            }
            out.print(";");
            out.println();
        }
        out.print("case ");
        if (e.isEnumConstant()) 
        {   out.print("" + ((EnumDecl)e.type()).determineOrdinal(((VarAccess)e).name()) );
        }
        else 
        {   e.generateUsingResultCS(out);
        }
        out.print(":");
        out.println();
	}
	
    public void DefaultCase.generateCS(CodePrinter out) 
    {   if (canBeReachedByFallThrough()) 
        { out.print("goto default;");
            out.println();
        }
        out.print("default:");
        out.println();
    }

    // --- ContinueStmt ---

    public void ContinueStmt.generateCS(CodePrinter out) 
    {   String label = getLabel();
        if (label==null || label.length()==0) 
        {   out.print("continue;");
        }
        else
        {   out.printJumpToLabel(CodePrinter.escapeIdentifier(label,false)+"_c");
        }
        out.println();
    }
  
    // --- EmptyStmt ---
    
    // --- ExprStmt ---
  
    public void ExprStmt.generateCS(CodePrinter out) 
    {   getExpr().generateCS(out);   // intentionally do no post-processing
        out.print(";");
        out.println();
    }
	
	// --- IfStmt ---
	
    public void IfStmt.generateCS(CodePrinter out) 
    {   out.print("if (");
        getCondition().generateUsingResultCS(out);
        out.print(") ");
        out.println();
        getThen().generateCS(out);
        Stmt e = getElse();
        if (e!=null) 
        {   out.print("else ");
            out.println();
            e.generateCS(out);
        }
	}
	
	// --- LocalClassDeclStmt ---
	public void LocalClassDeclStmt.generateCS(CodePrinter out) {
		// class was already generated 
	}
	
	// --- ReturnStmt ---
	
	public void ReturnStmt.generateCS(CodePrinter out) {
		Expr r = getResult();
		if (r==null) {
			out.print("return;");
		} else {
			out.print("return ");
			r.generateUsingResultCS(out);
			out.print(";");
		}
		out.println();		
	}  	
	
	// --- SynchronizedStmt ---
	
	// --- ThrowStmt ---
    public void ThrowStmt.generateCS(CodePrinter out) {
        out.print("throw ");
        getExpr().generateCS(out);
        out.print(";");
		out.println();
    }
    
	// --- TryStmt ---
		
	// --- VarDeclStmt ---
	
	public void VarDeclStmt.generateCS(CodePrinter out) {
		int extradims = 0;
		for (int i=0; i<getNumDeclarator(); i++) {
			extradims = Math.max(extradims, getDeclarator(i).getNumDims());
		}
	
		getTypeAccess().generateCS(out);

		for (int i=0; i<extradims; i++) {
			out.print("[]");
		}				
		for (int i=0; i<getNumDeclarator(); i++) {
			VariableDeclarator d = getDeclarator(i);
			TypeDecl t = d.getTypeAccess().type();
			if (i>0) out.print(",");
			out.print(" ");			
			out.printCSIdentifier(d.name(), "");
			Expr e = d.getInit();
			if (e!=null) {
				out.print(" = ");								
				if (t.isChar() && e.type().isInt()) {
					out.print("SYSTEM.castToChar(");
					e.generateUsingResultCS(out);
					out.print(")");
				} else {
					e.generateUsingResultCS(out);
				}					
			}
		}
		out.print(";");
		if (! (getParent().getParent() instanceof ForStmt)) out.println();
	}

}


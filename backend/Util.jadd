/**
 * Utility methods that will be attached to various AST types to do various queries. 
 * These queries do not modify the AST in any way but are needed by the code generation
 * (for various conversion targets) to decide which action to take.    
 * Many of the queries are specified for the Expr class as dummies and are overwritten for
 * its subtypes to actually implement something meaningful. 
 */

import java.util.regex.Pattern;

aspect Util {

    /** Check if the result of an expression is guaranteed to fit into an integer number with 
     * less than 20 bits of precision. This is helpful to allow optimization of the 
     * multiplication operation in javascript. 
     */    
    public boolean Expr.hasLessThan20Bits() {
        TypeDecl t = type();
        if (t.isChar() || t.isByte() || t.isBoolean()) return true;
        if (t.isInt() && isConstant()) {
            int i = constant().intValue();
            return  i >= 0xfff80000 && i <= 0x7ffff;
        }
        return false;
    }

    /**
     * Check if a generic expression is used that delivers a different type than the
     * "basic" type of the generic implementation. In these cases a downcast must be
     * added for the C# target to satisfy the compiler (since the generic types are already 
     * erased in the C# output) 
     * This will also check if a method overwrite has a covariant return type,
     * in these cases a down-cast is also needed.
     */
    public TypeDecl Expr.neededDownCast() {
        return null;
    }
    public TypeDecl VarAccess.neededDownCast() {
        if (isFieldAccess() && (varDecl() instanceof FieldDeclarator)) {
            FieldDeclarator fd = (FieldDeclarator) varDecl();
            if (fd.isInstanceVariable() && fd.type() != fd.erasedField().type()) {
                return fd.type();
            }       
        }
        return null;        
    }    
    public TypeDecl MethodAccess.neededDownCast() {
        MethodDecl m = decl();
        // check if need downcast because of type erasure
        if (m.erasedMethod().type()!=m.type()) {
            return m.type();
        }
        // check if need downcast because of covariant return type in overwrite
        if (m.hostType() instanceof ClassDecl)
        {   ClassDecl c = (ClassDecl)(m.hostType());
            while (!c.isObject()) 
            {   c = (ClassDecl) (c.superclass());
                for (BodyDecl b : c.methodsAndConstructors()) 
                {   if (b instanceof MethodDecl && m.overrides((MethodDecl)b) ) 
                    {   if (((MethodDecl)b).type()!=m.type())
                        {   return m.type();
                        }
                    }
                }                                 
            }
        }                 
        return null;
    }
    
    
//    
//   public String DoubleLiteral.normalizedDigits() 
//   {
//        String lit = getLITERAL();
//        if (lit.equals("Infinity")||lit.equals("-Infinity")||lit.equals("NaN")) return lit;        
//        return super.normalizedDigits();
//   }
   
    /**
     * Test if the program execution can "fall out" of the bottom of the code block.
     * In such cases it is sometimes necessary to add an additional "break" in the 
     * C# output to satisfy the compiler - specifically at the last case of a switch.
     */
    public boolean Block.executionCanReachBottom() 
    {
        if (getNumStmt()<1) return true;
        Stmt stmt = getStmt(getNumStmt()-1);
        if (stmt instanceof Block) 
        {   return ((Block) stmt).executionCanReachBottom();
        }
        if (stmt instanceof ReturnStmt 
        ||  stmt instanceof BreakStmt
        ||  stmt instanceof ContinueStmt) return false;
        return true;
    }
    
    /**
     * Check if a switch case can be reached by the program flow entering from
     * the previous case. Since this construct is disallowed in C#, additional code needs to 
     * be inserted to satisfy the C# compiler. 
     */
    public boolean Case.canBeReachedByFallThrough() 
    {   
        ASTNode b = getParent();
        int idx = b.getIndexOfChild(this);
        if (idx<1) return false;
        ASTNode prev = b.getChild(idx-1);

        if (prev instanceof Block && ! ((Block) prev).executionCanReachBottom()) { return false; } 
        if 
        (   prev instanceof ReturnStmt 
        ||  prev instanceof BreakStmt
        ||  prev instanceof ContinueStmt
        ||  prev instanceof Case
        )
        { return false; }

        return true;
    }

    /**
     * Convert a regular expression string into a simple search pattern.
     * This will only work for compile time constant expressions.
     * It is needed to convert the regular-expression based String.split function
     * into a simple implementation using search patterns. 
     */
    public String Expr.regexToSearchString()
    {
        if (!isConstant()) 
        {   return null;   // Regular expression must be compile-time constant
        }
        String regex = constant().stringValue();
    
        // check if this is a well-formed Pattern at all
        try 
        {   Pattern.compile(regex);
        } catch (Exception e) 
        {   return null;   // Malformed regular expression
        }
    
        int l = regex.length();
        StringBuilder b = new StringBuilder();

        scanall: for (int i=0; i<l; i++)
        {   char c = regex.charAt(i);
            switch (c)
            {   // start of backslash escape
                case '\\':
                    i++;
                    c = regex.charAt(i);
                    switch (c)
                    {   case '\\':
                            b.append(c);
                            break;
                        case 'Q':       // start of quote
                        {   int cidx = regex.indexOf("\\E",i+1);
                            if (cidx<0) // unterminated quote extends to the end
                            {   b.append(regex.substring(i+1));
                                break scanall;
                            }   
                            b.append(regex.substring(i+1,cidx));
                            i = cidx+1;
                            break;
                        }                              
                        default:  // no other esacpe character is supported
                            return null; // Unsupported escape in regular expression                                 
                    }
                    break;
                // characters with special meaning that are not supported
                case '[': 
                case '(':
                case '{':
                case '|':
                case '.': 
                case '^':
                case '$':
                case '?':
                case '*':
                case '+':
                    return null;  // Unsupported functionality in regular expression
                default:
                    b.append(c);
            }
        }        
        return b.toString();
    }
   
   
    /**
     * Scan an interface and all its super-interfaces an collect all 
     * default method implementations. This is needed for the C# target
     * to implement redirect methods in all implementing classes.  
     */
    public ArrayList<BodyDecl> InterfaceDecl.recursivelyGetBodyDecl()
    {   ArrayList<BodyDecl> allm = new ArrayList<BodyDecl>();
        for (BodyDecl bd:getBodyDeclList())
        {   allm.add(bd);
        }
        for (TypeDecl si:superInterfaces())
        {   for (BodyDecl sm:((InterfaceDecl)si).recursivelyGetBodyDecl()) 
            {   if (!allm.contains(sm)) 
                {   allm.add(sm);
                }
            }
        }    
        return allm;
    }
    
    /**
     * Check if a given class implements a method with a specified signature (as specified by the
     * java class file format specification).
     * Optionally ignoring a given set of methods.
     */
    public boolean ClassDecl.hasMethodWithSignature(String sig, Collection<MethodDecl> ignore)
    {
         for (BodyDecl bd:getBodyDeclList())
         {  if (bd instanceof MethodDecl) 
            {   if
                (   ((MethodDecl) bd).signature().equals(sig)
                    && (ignore==null || !ignore.contains(bd)) 
                )
                { return true; }
            }
         }
         if (hasSuperClass())
         {   return ((ClassDecl)superclass()).hasMethodWithSignature(sig,ignore);
         }
         return false;
    }

        
    /**
     * Determine the internal ordinal number of an Enum constant. This is needed for 
     * the switch statements in the C# target that can only use numerical 
     * case values.
     */
    public int EnumDecl.determineOrdinal(String name) 
    {
        int ordinal = 0;
        for (EnumConstant ec:enumConstants()) 
        {   if (ec.getID().equals(name)) { return ordinal; }
            ordinal++;
        }
        return 0;
    }     
    
    /**
     * Check if a method is supported by the runtime library of the converter.
     */
    public boolean MethodDecl.isSupportedInLibraries()
    {
        // test for availability in supported core libraries
        StringBuffer b = new StringBuffer(type().erasure().typeName());
        b.append(" ");
        b.append(name());
        b.append("(");
        for (int i=0; i<getNumParameter(); i++) 
        {   if (i!=0) { b.append(", "); }
            String typename = getParameter(i).type().erasure().typeName();
            b.append(typename);
        }
        b.append(")");          
        String sig = b.toString();
        String tn = hostType().packageName() + "." + hostType().uniqueName();
        return LibraryList.isAllowed(tn, sig);
    }
    
           
    /**
     * Check if a given expression can have possible side effects during evaluation.
     * For example the ++ operator as side effects, and any method call could
     * also have side effects. 
     */
    public boolean Expr.hasPotentialSideEffects() 
    {   
        return true;    // unless otherwise specified, this is the "safe" assumption
    }    
    public boolean Dot.hasPotentialSideEffects() 
    {   
        return getLeft().hasPotentialSideEffects() || getRight().hasPotentialSideEffects();         
    }
    public boolean ArrayAccess.hasPotentialSideEffects() 
    {
        return getExpr().hasPotentialSideEffects();
    }
    public boolean ParTypeAccess.hasPotentialSideEffects() 
    {
        return getTypeAccess().hasPotentialSideEffects();
    }
    public boolean ThisAccess.hasPotentialSideEffects() 
    {
        return false;
    }
    public boolean SuperAccess.hasPotentialSideEffects() 
    {
        return false;
    }
    public boolean TypeAccess.hasPotentialSideEffects() 
    {
        return false;
    }
    public boolean ArrayTypeAccess.hasPotentialSideEffects() 
    {
        return getAccess().hasPotentialSideEffects();
    }   
    public boolean ArrayTypeWithSizeAccess.hasPotentialSideEffects() 
    {
        return getAccess().hasPotentialSideEffects()
            || getExpr().hasPotentialSideEffects();
    }           
    public boolean VarAccess.hasPotentialSideEffects() 
    {
        return false;
    }
    public boolean ArrayInit.hasPotentialSideEffects() 
    {
        for (int i=0; i<getNumInit(); i++) 
        {   if (getInit(i).hasPotentialSideEffects()) { return true; }
        }
        return false;
    }
    public boolean Binary.hasPotentialSideEffects() 
    {   
        return getLeftOperand().hasPotentialSideEffects() 
            || getRightOperand().hasPotentialSideEffects();
    }
    public boolean CastExpr.hasPotentialSideEffects() 
    {
        return getExpr().hasPotentialSideEffects();
    }
    public boolean ConditionalExpr.hasPotentialSideEffects() 
    {
        return getCondition().hasPotentialSideEffects() 
            || getTrueExpr().hasPotentialSideEffects()
            || getFalseExpr().hasPotentialSideEffects();
    }
    public boolean InstanceOfExpr.hasPotentialSideEffects() 
    {
        return getExpr().hasPotentialSideEffects();
    }    
    public boolean ArrayCreationExpr.hasPotentialSideEffects() 
    {
        // array with initialization data
        if (hasArrayInit()) 
        {   return getArrayInit().hasPotentialSideEffects();
        } else 
        {   return getTypeAccess().hasPotentialSideEffects();
        }
    }
    public boolean Literal.hasPotentialSideEffects() 
    {   
        return false;
    }
    public boolean ParExpr.hasPotentialSideEffects() 
    {   
        return getExpr().hasPotentialSideEffects();
    }
    public boolean Unary.hasPotentialSideEffects() 
    {   
        return getOperand().hasPotentialSideEffects();
    }
    public boolean PostfixExpr.hasPotentialSideEffects() 
    {   
        return true;
    }
    public boolean PreDecExpr.hasPotentialSideEffects() 
    {   
        return true;
    }
    public boolean PreIncExpr.hasPotentialSideEffects() 
    {   
        return true;
    }    
    
    public boolean MethodAccess.hasPotentialSideEffects()
    {
        // check side-effects of all arguments
        for (int i=0; i<getNumArg(); i++)
        {   if (getArg(i).hasPotentialSideEffects()) return true;
        }
         
        // allow some well known core library methods here
        MethodDecl m = decl().erasedMethod();
        TypeDecl ht = m.hostType();
        if (ht.packageName().equals("java.lang") 
         && ht.uniqueName().equals("Enum"))
        {   return false;
        }
        if (ht.packageName().equals("java.lang") 
         && ht.uniqueName().equals("String"))
        {   return false;
        }
        
        // do a wild guess, that a static method "valueOf" will never have side effects
        if (m.isStatic() && getNumArg()==1 && m.name().equals("valueOf")) 
        {   return false;
        }
        
        return true;
    }

    /**
     * Test if an expression could somehow be null. Is needed to
     * prevent faulty behavior of the converted code or to allow optimizations.  
     */
    public boolean Expr.couldBeNull()
    {   
        return true;   // "safe" assumption
    }
    public boolean Dot.couldBeNull() 
    {   
        return getRight().couldBeNull();         
    }    
    public boolean ArrayCreationExpr.couldBeNull()
    {   
        return false;
    }
    public boolean ParExpr.couldBeNull() 
    {   
        return getExpr().couldBeNull();
    }
    public boolean ClassInstanceExpr.couldBeNull()
    {   
        return false;
    }
    public boolean LambdaExpr.couldBeNull() 
    {   
        return false;
    }
    public boolean TypeMethodReference.couldBeNull()
    {   
        return false;
    }
    public boolean ExprMethodReference.couldBeNull()
    {   
        return false; 
    }
    public boolean VarAccess.couldBeNull()
    {   
        Variable v = decl();
        if (v.isEffectivelyFinal()) 
        {   return v.getInit().couldBeNull();
        }
        return true;
    } 
    public boolean MethodAccess.couldBeNull()
    {
        // some well known core library functions will never return null
        MethodDecl m = decl().erasedMethod();
        if (m.hostType().packageName().equals("java.util") 
         && m.hostType().uniqueName().equals("Comparator"))
        {   return false;
        }
        return true;
    }    
    
    
    public boolean ASTNode.usesParameterSomewhere(String name) 
    {   for (int i=0; i<getNumChild(); i++) 
        {   if (getChild(i).usesParameterSomewhere(name)) { return true; }
        }
        return false;
    }        
    public boolean VarAccess.usesParameterSomewhere(String name) 
    {             
        Variable v = varDecl();
        return v.isParameter() && name.equals(getID());
    }
    
    public boolean ASTNode.hasMethodCallOtherThanParse()
    {
        for (int i=0; i<getNumChild(); i++) 
        {   if (getChild(i).hasMethodCallOtherThanParse()) { return true; }
        }
        return false;
    }
    
    public boolean MethodAccess.hasMethodCallOtherThanParse() 
    {   
        MethodDecl m = decl();
        if (m.isStatic()) 
        {   TypeDecl t = m.hostType();
            if 
            (   t.packageName().equals("java.lang") 
             && t.uniqueName().equals("Integer") 
             && m.name().equals("parseInt")
            ) { return super.hasMethodCallOtherThanParse(); }
            if 
            (   t.packageName().equals("java.lang") 
             && t.uniqueName().equals("Double") 
             && m.name().equals("parseDouble")
            ) { return super.hasMethodCallOtherThanParse(); }
        }
        return true;
    }

    public boolean TypeDecl.hasSimilarMethods(String name, int numpar, boolean isstatic)
    {
        // check if there are two or more methods with the same name and number of parameters
        // in this class
        int count = 0;        
        for (BodyDecl b : this.getBodyDecls())
        {
            if (b instanceof MethodDecl)
            {   MethodDecl m = (MethodDecl) b;
                if (m.name().equals(name) && m.getNumParameter()==numpar && m.isStatic()==isstatic)
                {   count++;
                }
            }
        }
        if (count>=2) 
        {   // System.out.println("found similar methods: "+name+" "+numpar+" "+isstatic+" in "+name());
            return true; 
        }        
        
        // continue searching up the inheritance chain
        if (!isstatic)
        {   if (this instanceof ClassDecl) 
            {   ClassDecl c = (ClassDecl) this;
                if (c!=null && !c.isObject())
                {   return c.superclass().hasSimilarMethods(name,numpar,isstatic);
                }          
            }
            else if (this instanceof InterfaceDecl)
            {   InterfaceDecl i = (InterfaceDecl) this;
                for (Access ac : i.getSuperInterfaceList())
                {   
                    while (ac instanceof Dot) { ac=((Dot)ac).getRight(); }
                    TypeDecl t = (ac instanceof TypeAccess) ? ((TypeAccess) ac).type() 
                                                            : ((ParTypeAccess) ac).type();            
                    if (t.hasSimilarMethods(name,numpar,isstatic)) { return true; }
                }
            }
        }
        
        return false;
    }
    
    public boolean ClassDecl.hasSimilarConstructors(int numpar)
    {
        // check if there are two or more constructors with the same number of parameters
        int count = 0;        
        for (BodyDecl b : this.getBodyDecls())
        {
            if (b instanceof ConstructorDecl)
            {   if ( ((ConstructorDecl) b).getNumParameter() == numpar)
                {   count++;
                }
            }
        }
        return count>=2;
    }
    
    public boolean MethodDecl.overridesInterfaceMethodOf(InterfaceDecl id, boolean checkonlyparent)
    {   
        if (!checkonlyparent)
        {   for (BodyDecl b : id.getBodyDecls()) 
            {   if (b instanceof MethodDecl && overrides((MethodDecl)b) ) 
                {   return true;
                }
            }
        }                                 
        for (Access ac: id.getSuperInterfaceList()) 
        {   while (ac instanceof Dot) { ac=((Dot)ac).getRight(); }
            TypeDecl t = (ac instanceof TypeAccess) ? ((TypeAccess) ac).type() 
                                                    : ((ParTypeAccess) ac).type();      
            if (overridesInterfaceMethodOf ( (InterfaceDecl) t , false )) 
            {   return true;
            }           
        }
        return false;
    }
    
    
}

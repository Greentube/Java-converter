/**
 * Check the various restrictions that are imposed on the java code when converting.
 * All of those restrictions are checked at compile time to guarantee correct behavior
 * if the conversion succeeds.
 * The check is done recursively through the AST and all encountered problems are collected
 * into an ArrayList on the way. After checking, the problems are reported and the conversion
 * is aborted if any error was encountered.    
 * See the documentation file 'restrictions.txt' for details.
 */

import com.greentube.javaconverter.LibraryList;

aspect CheckRestrictions 
{
    public void ASTNode.reportRestriction(ArrayList<String> errorlist, String message) 
    {   int s = 0;
        for (ASTNode n=this; s==0 && n!=null; n=n.getParent()) 
        {   s = n.getStart();
        }
        errorlist.add(getLine(s)+","+getColumn(s)+": "+message);
    }


    public void ASTNode.checkRestrictions(ArrayList<String> errorlist) 
    {   for (int i=0; i<getNumChild(); i++) 
        {   getChild(i).checkRestrictions(errorlist);
        }
    }
        
    public boolean ASTNode.checkAutoBoxing(TypeDecl tfrom, TypeDecl tto, ArrayList<String> errorlist) 
    {
        if (tfrom.isPrimitiveType() && tto.isReferenceType() && !tto.isString() && !tto.isArrayDecl()) 
        {   reportRestriction(errorlist, "Auto-boxing is not supported");
            return true;
        }
        if (tfrom.isReferenceType() && !tfrom.isArrayDecl() && tto.isPrimitiveType()) 
        {   reportRestriction(errorlist, "Auto-unboxing is not supported");     
            return true;
        }
        return false;
    }
    
    public boolean ASTNode.checkUnboxing(Expr expr, ArrayList<String> errorlist) 
    {
        if (expr!=null && !expr.type().isPrimitiveType()) 
        {   if (! expr.type().isString() && ! expr.type().isEnumDecl()) 
            {   reportRestriction(errorlist, "Auto-unboxing is not supported");
                return true;
            }
        }
        return false;
    }
    
    // -- Threads 
    public void SynchronizedStmt.checkRestrictions(ArrayList<String> errorlist) 
    {   
        reportRestriction(errorlist, "Threading is not supported");
        super.checkRestrictions(errorlist);
    }

    // -- Exceptions
    public void BasicCatch.checkRestrictions(ArrayList<String> errorlist) 
    {
        TypeDecl t = getParameter().type(); // .typeName();
        if (isForbiddenCatch((ClassDecl)t, (TryStmt)getParent().getParent()))
        {   reportRestriction(errorlist, "May not catch exception of type "+t.typeName());
        }
        super.checkRestrictions(errorlist);
    }   
    public void MultiCatch.checkRestrictions(ArrayList<String> errorlist) 
    {
        CatchParameterDeclaration par = getParameter();        
        for (int i=0; i<par.getNumTypeAccess(); i++)
        {   TypeDecl t = par.getTypeAccess(i).type(); // .typeName();
            if (isForbiddenCatch((ClassDecl)t, (TryStmt)getParent().getParent()))
            {   reportRestriction(errorlist, "May not catch exception of type "+t.typeName());
            }
        }
        super.checkRestrictions(errorlist);
    }   
    protected static boolean CatchClause.isForbiddenCatch(ClassDecl t, TryStmt stmt)
    {
        if (t.typeName().equals("java.lang.NumberFormatException"))
        {   Block b = stmt.getBlock();
            if (b==null) { return false; }
            return b.hasMethodCallOtherThanParse();
        }

        if (t.typeName().equals("java.lang.Throwable")
         || t.typeName().equals("java.lang.Exception")
         || t.typeName().equals("java.lang.RuntimeException")
        )
        {   return true; }        
        while (t.hasSuperClass())
        {   t = (ClassDecl) t.superclass();
            if (t.typeName().equals("java.lang.RuntimeException")) 
            {   return true;
            }
        }
        return false;   
    }
    
    // -- Allowed primitive types 
    public void TypeAccess.checkRestrictions(ArrayList<String> errorlist) 
    {
        TypeDecl t = type();
        if (t.isLong())  reportRestriction(errorlist, "Type 'long' not supported");
        if (t.isFloat()) reportRestriction(errorlist, "Type 'float' not supported");
        if (t.isClassDecl() || t.isInterfaceDecl())
        {     if (!LibraryList.isAllowed(t.erasure().typeName()))
              {   reportRestriction(errorlist, "Unsupported type:"+t.erasure().typeName());
              }
        }
        super.checkRestrictions(errorlist);
    }

    public void FloatType.checkRestrictions(ArrayList<String> errorlist) 
    {
        reportRestriction(errorlist, "Type 'float' not supported");         
    }   
    public void LongType.checkRestrictions(ArrayList<String> errorlist) 
    {
        reportRestriction(errorlist, "Type 'long' not supported");
    }   

    public void FloatingPointLiteral.checkRestrictions(ArrayList<String> errorlist) 
    {
        reportRestriction(errorlist, "Type 'float' not supported");         
    }
    public void LongLiteral.checkRestrictions(ArrayList<String> errorlist) 
    {
        reportRestriction(errorlist, "Type 'long' not supported");
    }
    
                                      
    // method overloading rules
    public void MethodDecl.checkRestrictions(ArrayList<String> errorlist) 
    {
        // check forbidden threading
        if (isSynchronized()) 
        {     
            reportRestriction(errorlist, "Threading is not supported");
        }
/*        
        // restrictions for Interface methods
        if (hostType() instanceof InterfaceDecl)
        {  
        }
        // restrictions for class methods 
        else if (hostType() instanceof ClassDecl) 
        { 
            // check method name collisions in same class       
            ClassDecl cd = (ClassDecl)hostType();
            for (BodyDecl bd:cd.getBodyDeclList()) 
            {   // no two methods with same name and number of arguments in same class
                // if both are either static or non-static
                if ((bd instanceof MethodDecl) && bd!=this) 
                {   MethodDecl md = (MethodDecl) bd;
                    if (md.getID().equals(getID())
                    &&  md.getNumParameter()==getNumParameter()
                    &&  md.isStatic() == isStatic()) 
                    {
                        reportRestriction(errorlist, 
                         (isStatic() ? "Static" : "Non-static") + " method "
                            + "'"+getID()+"' with "+getNumParameter()
                            + " parameter(s) conflicts with other method defined in same class");
                    }               
                }
            }
            
            // check for collisions in the inheritance chain            
            if (!isStatic()) 
            {          
                cd = (ClassDecl) cd.superclass();
                while(!cd.isObject()) 
                {   for (BodyDecl bd:cd.getBodyDeclList()) 
                    {   if ((bd instanceof MethodDecl)) 
                        {   MethodDecl md = (MethodDecl) bd;                            
                            if (!md.isStatic() && md.getID().equals(getID()) 
                              && md.getNumParameter()==getNumParameter()
                              && !overrides(md) ) {
                                reportRestriction(errorlist, "Method '"+getID() +"' with "
                                 +getNumParameter()+" parameters conflicts with method in parent class");                               
                            }
                        }
                    }
                    cd = (ClassDecl) cd.superclass();
                }
            }
        }
*/        
        super.checkRestrictions(errorlist);     
    }
/*    
    // check constructor overloading  (and exception declaration) 
    public void ConstructorDecl.checkRestrictions(ArrayList<String> errorlist) 
    {
        ClassDecl cd = (ClassDecl)hostType();
        for (BodyDecl bd:cd.getBodyDeclList()) 
        {   // no two constructors with same number of arguments
            if ((bd instanceof ConstructorDecl) && bd!=this) 
            {   ConstructorDecl md = (ConstructorDecl) bd;
                if (md.getNumParameter()==getNumParameter())
                {   reportRestriction(errorlist, 
                      "Multiple constructors with "+getNumParameter()+" parameters");                                
                }
            }
        }
        super.checkRestrictions(errorlist);             
    }
*/
    
    // shadowing field identifiers
    public void FieldDeclarator.checkRestrictions(ArrayList<String> errorlist) 
    {
        if (!isStatic()) 
        {   ClassDecl cd = (ClassDecl) ((ClassDecl)hostType()).superclass();
            while(!cd.isObject()) 
            {   for (BodyDecl bd:cd.getBodyDeclList()) 
                {   if (bd.isField()) 
                    {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                        {   if (!fd.isStatic() && fd.getID().equals(getID())) 
                            {   reportRestriction(errorlist, "Field '"+getID()+"' must not shadow parent field");                               
                            }
                        }
                    }
                }
                cd = (ClassDecl) cd.superclass();
            }
        }
        super.checkRestrictions(errorlist);     
    }

    // Compound assignments can only use limited types of destination
    public void AssignExpr.checkRestrictions(ArrayList<String> errorlist)
    {
        // Autoboxing in assignments
        checkAutoBoxing(getSource().type(), getDest().type(), errorlist);
        
        super.checkRestrictions(errorlist);                 
    }
    
    
    // Autoboxing/unboxing in method call parameters
    public void MethodAccess.checkRestrictions(ArrayList<String> errorlist) 
    {
        MethodDecl m = decl().erasedMethod();
        
        // check if the called method may be unresolved or contain unresolved types
        for (int i=0; i<m.getNumParameter(); i++)
        {   if (m.getParameter(i)==null) 
            {   reportRestriction(errorlist, "Unresolved method call");
                return;
            }
        }
        
        // check if this is a call using the variable arguments syntax
        int straightargs = 0;
        if (!m.isVariableArity() 
        || (getNumArg()==m.getNumParameter() && getArg(getNumArg()-1).type()==m.getParameter(getNumArg()-1).type()) ) 
        {   straightargs = getNumArg();
        } 
        else 
        {   straightargs = m.getNumParameter()-1;
        }
        // test for boxing of "normal parameters"
        for (int i=0; i<straightargs; i++) 
        {   if (m.getParameter(i)==null)
            {   reportRestriction(errorlist, "Unresolved type for method parameter "+i+" of "+m.name()+"."+m.hostType().name());    
                getArg(i).dumpTree(System.err);                        
                return;
            }
            TypeDecl t1 = getArg(i).type();
            TypeDecl t2 = m.getParameter(i).type();
            checkAutoBoxing(t1, t2, errorlist);
        }
        // test for boxing of the parameters that are packaged into array
        for (int i=straightargs; i<getNumArg(); i++) 
        {   checkAutoBoxing(getArg(i).type(), 
                    ((ArrayDecl)m.getParameter(straightargs).type()).elementType(),
                    errorlist);
        }
        
        // check is using the clone() method on arrays (which is supported)
        if (m.name().equals("clone") && m.getNumParameter()==0)
        {   Expr parentexp = (Expr) getParent();
            if (parentexp instanceof Dot)
            {   Expr left = ((Dot) parentexp).getLeft();
                if (left.type().isArrayDecl()) 
                {   super.checkRestrictions(errorlist);
                    return;
                }
            } 
        }
        
        // check for availability for stuff from all the .java core packages    
        if (m.hostType().packageName().startsWith("java.")) 
        {   if (!m.isSupportedInLibraries()) 
            {   reportRestriction(errorlist, "Unsupported core library method in "
                + m.hostType().packageName() + "." + m.hostType().uniqueName() + ": " + m.name());
            }
            // special consideration for the core sort methods (do not allow null as Comparator) 
            else if (name().equals("sort") && getNumArg()>0) 
            {   Expr e = getArg(getNumArg()-1);
                if (e.couldBeNull()) 
                {   reportRestriction(errorlist, 
                       "Comparators for java core sort functions must be guaranteed to be non-null");            
                }
            }
        }
        
        // test for correct usage of library methods returning a 'long'
        if (m.type().isLong()) 
        {   Expr parentexp = (Expr) getParent();
            while ((parentexp instanceof Dot) && (parentexp.getParent() instanceof Expr)) 
            {   parentexp = (Expr) parentexp.getParent();
            }
            if (!(parentexp instanceof CastExpr) || !(parentexp.type().isDouble() || parentexp.type().isInt()) )
            {   reportRestriction(errorlist, 
                    "Can only use this library method when casting the result explicitly to double or int"                
                );  
            }
        }
        
        // test if regular expression parameter is used correctly
        if (m.hostType().packageName().equals("java.lang") 
            && m.hostType().uniqueName().equals("String") && m.name().equals("split")
            && getNumArg()>0)
        {   if (getArg(0).regexToSearchString() == null)
            {   reportRestriction(errorlist, "Can only support regular expressions that match a single search string");
            }        
        }
        
        super.checkRestrictions(errorlist);                         
    }
    // Autoboxing/unboxing in super/this-constructor call parameters
    public void ConstructorAccess.checkRestrictions(ArrayList<String> errorlist) {
        ConstructorDecl m = decl();
        
        // check if this is a call using the variable arguments syntax
        int straightargs = 0;
        if (!m.isVariableArity() 
        || (getNumArg()==m.getNumParameter() && getArg(getNumArg()-1).type()==m.getParameter(getNumArg()-1).type()) ) 
        {   straightargs = getNumArg();
        } 
        else
        {   straightargs = m.getNumParameter()-1;
        }
        // test for boxing of "normal parameters"
        for (int i=0; i<straightargs; i++) 
        {   checkAutoBoxing(getArg(i).type(), m.getParameter(i).type(), errorlist);
        }
        // test for boxing of the parameters that are packaged into array
        for (int i=straightargs; i<getNumArg(); i++) 
        {   checkAutoBoxing(getArg(i).type(), 
                           ((ArrayDecl)m.getParameter(straightargs).type()).elementType(),
                            errorlist);
        }

        // test for availability in supported core libraries
        String sig = m.signature();  
        
        if (!LibraryList.isAllowed(m.hostType().packageName() + "." + m.hostType().uniqueName(), sig)) 
        {   reportRestriction(errorlist, "Unsupported core library constructor in "
                + m.hostType().packageName() + "." + m.hostType().uniqueName() + ": " + sig);
        }
        
        super.checkRestrictions(errorlist);                                 
    }
    // Autoboxing/unboxing in constructor call parameters
    public void ClassInstanceExpr.checkRestrictions(ArrayList<String> errorlist) 
    {
        ConstructorDecl m = decl();
        
        // check if this is a call using the variable arguments syntax
        int straightargs = 0;
        if (!m.isVariableArity() 
        || (getNumArg()==m.getNumParameter() && getArg(getNumArg()-1).type()==m.getParameter(getNumArg()-1).type()) ) 
        {   straightargs = getNumArg();
        } 
        else 
        {   straightargs = m.getNumParameter()-1;
        }
        // test for boxing of "normal parameters"
        for (int i=0; i<straightargs; i++) 
        {   checkAutoBoxing(getArg(i).type(), m.getParameter(i).type(), errorlist);
        }
        // test for boxing of the parameters that are packaged into array
        for (int i=straightargs; i<getNumArg(); i++) 
        {   checkAutoBoxing(getArg(i).type(), 
                           ((ArrayDecl)m.getParameter(straightargs).type()).elementType(),
                            errorlist);
        }
        
        // test for availability in supported core libraries
        String sig = m.signature();  

        if (!LibraryList.isAllowed(m.hostType().packageName() + "." + m.hostType().uniqueName(), 
                                   sig)) 
        {   reportRestriction(errorlist, "Unsupported core library constructor in "
                + m.hostType().packageName() + "." + m.hostType().uniqueName() + ": " 
                + sig);
        }
        
        super.checkRestrictions(errorlist);                                     
    }
    // autoboxing/unboxing at variable declarators  
    public void VariableDeclarator.checkRestrictions(ArrayList<String> errorlist) 
    {
         Expr e = getInit();
         if (e!=null) 
         {  checkAutoBoxing(e.type(), getTypeAccess().type(), errorlist);
         } 
        super.checkRestrictions(errorlist);                                     
    }
    // autoboxing/unboxing in return statement
    public void ReturnStmt.checkRestrictions(ArrayList<String> errorlist) 
    {
        Expr r = getResult();
        if (r!=null) 
        {   checkAutoBoxing(r.type(), returnType(), errorlist);
        }
        super.checkRestrictions(errorlist);                                     
    }   
    // auto-unboxing of the various conditions and switch expression
    public void ConditionalExpr.checkRestrictions(ArrayList<String> errorlist) 
    {   
        checkUnboxing(getCondition(), errorlist);
        super.checkRestrictions(errorlist);                                     
    }
    public void IfStmt.checkRestrictions(ArrayList<String> errorlist) 
    {   
        checkUnboxing(getCondition(), errorlist);
        super.checkRestrictions(errorlist);                                     
    }   
    public void WhileStmt.checkRestrictions(ArrayList<String> errorlist) 
    {   
        checkUnboxing(getCondition(), errorlist);
        super.checkRestrictions(errorlist);                                     
    }   
    public void DoStmt.checkRestrictions(ArrayList<String> errorlist) 
    {
        checkUnboxing(getCondition(), errorlist);
        super.checkRestrictions(errorlist);                                     
    }   
    public void ForStmt.checkRestrictions(ArrayList<String> errorlist) 
    {
        checkUnboxing(getCondition(), errorlist);
        super.checkRestrictions(errorlist);                                     
    }   
    public void SwitchStmt.checkRestrictions(ArrayList<String> errorlist) 
    {
        checkUnboxing(getExpr(), errorlist);
        super.checkRestrictions(errorlist);                                     
    }
    public void EnhancedForStmt.checkRestrictions(ArrayList<String> errorlist) 
    {
        if (getExpr().type().isArrayDecl()) 
        {   checkAutoBoxing(getExpr().type().elementType(), getVariableDecl().getTypeAccess().type(), errorlist);
        } 
        else if (getVariableDecl().getTypeAccess().type().isPrimitiveType()) 
        {   reportRestriction(errorlist, "Auto-unboxing is not supported");
        }
        super.checkRestrictions(errorlist);                                     
    }
    // auto-unboxing the index into an array
    public void ArrayAccess.checkRestrictions(ArrayList<String> errorlist) 
    {
        checkUnboxing(getExpr(), errorlist);
        super.checkRestrictions(errorlist);                                     
    }
    // autoboxing/unboxing the content of a new array
    public void ArrayInit.checkRestrictions(ArrayList<String> errorlist) 
    {
        for (int i=0; i<getNumInit(); i++) 
        {   checkAutoBoxing(getInit(i).type(), type().elementType(), errorlist);
        }
        super.checkRestrictions(errorlist);                                     
    }
    // unboxing the operands for a numerical/string operator
    public void Binary.checkRestrictions(ArrayList<String> errorlist) 
    { 
        if (this instanceof AddExpr && type().isString()) 
        {   // two operands combining to string were not auto-unboxed
        } 
        else if (this instanceof EqualityExpr) 
        {   checkAutoBoxing(getLeftOperand().type(), getRightOperand().type(), errorlist);
        } 
        else
        {   checkUnboxing(getLeftOperand(), errorlist);
            checkUnboxing(getRightOperand(), errorlist);
        }   
        super.checkRestrictions(errorlist);                                     
    }
    // unboxing the operand for a unary operator
    public void Unary.checkRestrictions(ArrayList<String> errorlist) 
    {  
        checkUnboxing(getOperand(), errorlist);
        super.checkRestrictions(errorlist);                                     
    }
    
    
    // Access to static members is not allowed by using an instance with side effects 
    public void Dot.checkRestrictions(ArrayList<String> errorlist) 
    {
        Expr l = getLeft();
        Access r = getRight();
        if ((r instanceof MethodAccess) && ((MethodAccess) r).decl().isStatic()) 
        {   if (l.hasPotentialSideEffects()) 
            {    reportRestriction(errorlist, "Can not access static method '"
                 + ((MethodAccess) r).decl().getID()
                 +"' with instance expression that has potential side effects");
            }
        }
        if ((r instanceof VarAccess) && ((VarAccess) r).varDecl().isStatic()) 
        {   if (l.hasPotentialSideEffects()) 
            {   reportRestriction(errorlist, "Can not access static field '"
                  + ((VarAccess) r).varDecl().name() 
                  + "' with instance expression that has potential side effects");
            }
        }
        super.checkRestrictions(errorlist);
    }       
    
                
    public void VarAccess.checkRestrictions(ArrayList<String> errorlist) 
    {   
        Variable v = varDecl();
        // check if part of the supported library
        if (v.isClassVariable() || v.isInstanceVariable()) 
        {   if (!LibraryList.isAllowed(v.hostType().packageName() + "." + v.hostType().uniqueName(),getID())) 
            {   reportRestriction
                (   errorlist, 
                    "Unsupported core library field: "+ v.hostType().packageName() 
                    + "." + v.hostType().uniqueName() + "." + getID()
                );
            }
        }
        super.checkRestrictions(errorlist);
    }
        
    
    public void LambdaExpr.checkRestrictions(ArrayList<String> errorlist) 
    {    
         toClass().checkRestrictions(errorlist); 
    }
    public void TypeMethodReference.checkRestrictions(ArrayList<String> errorlist)
    {    
         toClass().checkRestrictions(errorlist); 
    }
    public void ExprMethodReference.checkRestrictions(ArrayList<String> errorlist)
    {    
         toClass().checkRestrictions(errorlist); 
    }
    
}


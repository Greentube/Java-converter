/**
 * Check the various restrictions that are imposed on the java code when converting.
 *
 * Basically the language features of jave 1.7 are provided with the following exceptions.
 * - Threads   
 *      No threading is supported at all. No synchronization keywords either.      
 * - Exceptions
 *      No explicit exception handling. No throw and no try/catch. 
 *      Misbehavior of the program at runtime (NullPointerException,ArrayOutOfBounds,etc.) 
 *      will lead to undefined results (the C#-target will probably behave quite similar to java,
 *      but javascript will often silently ignore the problem and run into trouble later on).
 * - no 'long', 'short', 'float'
 *      These datatypes are either impossible to implement (javascript only supports a generic 
 *      Number type that can not hold a 64 bit quantity) or quite useless anyway (short, float).       
 */


aspect CheckRestrictions {
  	  	
  	public void ASTNode.checkRestrictions(ArrayList<String> errorlist) {  	
  		for (int i=0; i<getNumChild(); i++) {
  			getChild(i).checkRestrictions(errorlist);
  		}
  	}
  	
  	// -- Threads  (and part of Exceptions)
	public void MethodDecl.checkRestrictions(ArrayList<String> errorlist) {
		if (isSynchronized()) {		
			errorlist.add("Threading is not supported");
		}
		if (hasException()) {
			errorlist.add("Exceptions are not supported");
		}
		super.checkRestrictions(errorlist);
	}

	public void SynchronizedStmt.checkRestrictions(ArrayList<String> errorlist) {
		errorlist.add("Threading is not supported");
		super.checkRestrictions(errorlist);
	}

	// -- Exceptions
	public void ThrowStmt.checkRestrictions(ArrayList<String> errorlist) {
		errorlist.add("Exceptions are not supported");
		super.checkRestrictions(errorlist);
	}

	public void TryStmt.checkRestrictions(ArrayList<String> errorlist) {
		errorlist.add("Exceptions are not supported");
		super.checkRestrictions(errorlist);
	}

	public void ConstructorDecl.checkRestrictions(ArrayList<String> errorlist) {
		if (hasException()) {
			errorlist.add("Exceptions are not supported");
		}
		super.checkRestrictions(errorlist);
	}
	
	
	// -- Allowed primitive types 
	public void TypeAccess.checkRestrictions(ArrayList<String> errorlist) {
		TypeDecl t = type();
		if (t.isLong())  errorlist.add("Type 'long' not supported");
		if (t.isFloat()) errorlist.add("Type 'float' not supported");
		if (t.isShort()) errorlist.add("Type 'short' not supported");		
		super.checkRestrictions(errorlist);
	}

  	public void FloatType.checkRestrictions(ArrayList<String> errorlist) {
  		errorlist.add("Type 'float' not supported");  		
  	}  	
  	public void LongType.checkRestrictions(ArrayList<String> errorlist) {
  		errorlist.add("Type 'long' not supported");
  	}  	
  	public void ShortType.checkRestrictions(ArrayList<String> errorlist) {
  		errorlist.add("Type 'short' not supported");
  	}

  	public void FloatingPointLiteral.checkRestrictions(ArrayList<String> errorlist) {
  		errorlist.add("Type 'float' not supported");  		
  	}
  	public void LongLiteral.checkRestrictions(ArrayList<String> errorlist) {
  		errorlist.add("Type 'long' not supported");
  	}
  	  	
  	
  	public void AssignExpr.checkRestrictions(ArrayList<String> errorlist) {
  		if (! (this instanceof AssignSimpleExpr)) {
  			if (getDest().expressionHasPotentialSideEffects()) {
  				errorlist.add("Can not use compound assignment '"+printOp()+"' with side effects in target operand");
  			}  		
  		}
		super.checkRestrictions(errorlist);
	}		
		
	public boolean ASTNode.expressionHasPotentialSideEffects() {
  		for (int i=0; i<getNumChild(); i++) {
  			if (getChild(i).expressionHasPotentialSideEffects()) return true;
  		}
  		return false;
	}  	
  	public boolean ConstructorAccess.expressionHasPotentialSideEffects() {
  		return true;
  	}
  	public boolean MethodAccess.expressionHasPotentialSideEffects() {
  		return true;
  	}  	  	
  	public boolean AssignExpr.expressionHasPotentialSideEffects() {
  		return true;
  	}
  	public boolean PostfixExpr.expressionHasPotentialSideEffects() {
  		return true;
  	}
  	public boolean PreDecExpr.expressionHasPotentialSideEffects() {
  		return true;
  	}
  	public boolean PreIncExpr.expressionHasPotentialSideEffects() {
  		return true;
  	}
  	
}

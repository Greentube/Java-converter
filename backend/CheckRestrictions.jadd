/**
 * Check the various restrictions that are imposed on the java code when converting.
 * All of those restrictions are checked a compile time to guarantee correct behavior
 * if the conversion succeeds.
 *
 * Basically the language features of java 1.7 are provided with the following restrictions:
 * - Threads   
 *      No threading is supported at all. No synchronization keywords either.      
 * - Exceptions
 *      No explicit exception handling. No throw and no try/catch. 
 *      Misbehavior of the program at runtime (NullPointerException,ArrayIndexOutOfBoundsException,
 *      CastException,etc.)
 *      will lead to undefined results (the C#-target will probably behave quite similar to java,
 *      but javascript will often silently ignore the problem and run into trouble later on).
 * - no 'long', 'short', 'float'
 *      These datatypes are either impossible to implement (javascript only supports a generic 
 *      Number type that can not hold a 64 bit quantity) or quite useless anyway (short, float).
 * - Auto-boxing, Auto-unboxing not supported
 *      This feature would be a horror to get right in all conversion targets. Since its use
 *      is already quite disfavored in the first place, the converter does not allow it at all.
 * - no 'instanceof' with array types.  
 *      In the javascript target, all arrays have the same runtime type. In theory it would be 
 *      possible to detect at runtime if an object is _some_ type of array, but this can
 *      not be directly written in java syntax.  
 * - Method/constructor overloading only based on number of parameters
 *      Instead of implementing the java way of using the full type signatures
 *      of all parameters, the javascript target uses a simpler system that 
 *      takes only the number of parameters into account. As a consequence, it is not possible
 *      to have multiple identically named methods with the same number of parameters 
 *      and the same static/non-static state in the same class.         
 * - No shadowing of fields and methods 
 *      No two instance fields in objects that are somehow inherited from each other can have the 
 *      same name - even if one or both are private. 
 *      Same holds for methods - but there the "name" is considered to be the 
 *      identifier in conjunction with the number-of-parameters.
 *      Static fields or methods do not have this restriction.
 *      Also local variables may shadow fields.
 * - Compound assignments and increment/decrement operators can only use limited types of destination 
 *      When using any of the operators +=,-=,*=,... it is only possible to use 
 *      a target that is guaranteed to have no side effects on evaluation. While 
 *      it is possible to use  a[i]+=5  it is unsupported to write  a[i++]+=4.
 *      Same thing holds for ++ and --  (i[4]++ is ok, i[get()]++  is not).  
 *      This is to avoid faulty double-evaluation behavior in various conversion targets. 
 * - Access to static members is not allowed by using an instance
 *      It is kind of legal in java to call a static method with something like: 
 *      exp.valueOf(4711)    // where exp is of type Integer 
 *      The possible side-effects of the first expression makes it impossible to just always
 *      eliminate it for conversion. Therefore this strange construction is not supported.
 *      (but you can use 'super' to access static members of superclasses) 
 * - Anonymous classes can not access local variables
 *      One of the more obscure features of java is the ability to access the local variables
 *      of the method defining the anonymous class - given that they are defined 'final'.
 *      Because the implementation in the conversion targets would be extremely complex, 
 *      it is not supported. If needed, use some other means to pass data into an anonymous class.        
 * - Different default implementation of hashCode()
 *      Objects not overriding hashCode will provide a default implementation may deliver
 *      an extremely weak hash (only depending on the object's class). Do not 
 *      use these as keys in any Hashtable/HashMap/HashSet. 
 *      The String and Double objects will create a good hash, but a different one as is specified 
 *      in java. Do not rely on certain hash values for specific strings.
 * - Different default implementation of toString()
 *      Objects not overriding toString will provide a default implementation
 *      that is conversion target specific. Do only use to create a human readable debug output and
 *      do not rely on any specific format.   
 * - Limited subset of java core classes
 *      The converter core itself provides a very limited subset of the java core classes and
 *      also a limited number of methods in each. 
 *      Mainly the most crucial parts of java.lang and java.util are provided and a
 *      minimal version of java.io.PrintStream to make 'System.out' and 'System.err' available 
 *      for simple output. 
 */

import com.greentube.javaconverter.LibraryList;

aspect CheckRestrictions {
  	  	
  	public void ASTNode.checkRestrictions(ArrayList<String> errorlist) {  	
  		for (int i=0; i<getNumChild(); i++) {
  			getChild(i).checkRestrictions(errorlist);
  		}
  	}
  	
  	public void ASTNode.reportRestriction(ArrayList<String> errorlist, String message) {
  		int s = getStart();
  		errorlist.add(getLine(s)+","+getColumn(s)+": "+message);
  	}
  	
	public boolean ASTNode.checkAutoBoxing(TypeDecl tfrom, TypeDecl tto, ArrayList<String> errorlist) {
		if (tfrom.isPrimitiveType() && tto.isReferenceType() && !tto.isString() && !tto.isArrayDecl()) {
			reportRestriction(errorlist, "Auto-boxing is not supported");
				return true;
		}
		if (tfrom.isReferenceType() && !tfrom.isArrayDecl() && tto.isPrimitiveType()) {
			reportRestriction(errorlist, "Auto-unboxing is not supported");		
			return true;
		}
		return false;
	}
	public boolean ASTNode.checkUnboxing(Expr expr, ArrayList<String> errorlist) {
		if (expr!=null && !expr.type().isPrimitiveType()) {
			if (! expr.type().isString() && ! expr.type().isEnumDecl()) {
				reportRestriction(errorlist, "Auto-unboxing is not supported");
				return true;
			}
		}
		return false;
	}
	
	// side effect detection
	public boolean Expr.hasPotentialSideEffects() {
 		System.err.print("Side effect test encountered:"+this.getClass().getName());	
  		return false;
	}
  	public boolean AbstractDot.hasPotentialSideEffects() {
  		return getLeft().hasPotentialSideEffects() || getRight().hasPotentialSideEffects();  		
	}
	public boolean ArrayAccess.hasPotentialSideEffects() {
		return getExpr().hasPotentialSideEffects();
	}
	public boolean ClassInstanceExpr.hasPotentialSideEffects() {
		return true;
	}
	public boolean MethodAccess.hasPotentialSideEffects() {
		return true;
	}
  	public boolean ParTypeAccess.hasPotentialSideEffects() {
		return getTypeAccess().hasPotentialSideEffects();
	}
	public boolean ThisAccess.hasPotentialSideEffects() {
		return false;
	}
	public boolean TypeAccess.hasPotentialSideEffects() {
		return false;
	}
  	public boolean ArrayTypeAccess.hasPotentialSideEffects() {
  		return getAccess().hasPotentialSideEffects();
	}	
  	public boolean ArrayTypeWithSizeAccess.hasPotentialSideEffects() {
  		return getAccess().hasPotentialSideEffects()
  		    || getExpr().hasPotentialSideEffects();
	}   		
	public boolean VarAccess.hasPotentialSideEffects() {
		return false;
	}
  	public boolean ArrayInit.hasPotentialSideEffects() {
  		for (int i=0; i<getNumInit(); i++) {
  			if (getInit(i).hasPotentialSideEffects()) return true;
  		}
  		return false;
  	}
    public boolean AssignExpr.hasPotentialSideEffects() {
    	return true;
    }
    public boolean Binary.hasPotentialSideEffects() {
    	return getLeftOperand().hasPotentialSideEffects() || getRightOperand().hasPotentialSideEffects();
    }
    public boolean CastExpr.hasPotentialSideEffects() {
    	return getExpr().hasPotentialSideEffects();
    }
  	public boolean ConditionalExpr.hasPotentialSideEffects() {
  		return getCondition().hasPotentialSideEffects() 
  		    || getTrueExpr().hasPotentialSideEffects()
  		    || getFalseExpr().hasPotentialSideEffects();
  	}
	public boolean InstanceOfExpr.hasPotentialSideEffects() {
  		return getExpr().hasPotentialSideEffects();
  	}    
  	public boolean ArrayCreationExpr.hasPotentialSideEffects() {
  		// array with initialization data
  		if (hasArrayInit()) {
  			return getArrayInit().hasPotentialSideEffects();
  		} else {
  			return getTypeAccess().hasPotentialSideEffects();
  		}
  	}
    public boolean Literal.hasPotentialSideEffects() {
    	return false;
    }
  	public boolean ParExpr.hasPotentialSideEffects() {
  		return getExpr().hasPotentialSideEffects();
  	}
    public boolean Unary.hasPotentialSideEffects() {
    	return getOperand().hasPotentialSideEffects();
    }
  	public boolean PostDecExpr.hasPotentialSideEffects() {
  		return true;
  	}
  	public boolean PostIncExpr.hasPotentialSideEffects() {
  		return true;
  	}
  	public boolean PreDecExpr.hasPotentialSideEffects() {
  		return true;
  	}
  	public boolean PreIncExpr.hasPotentialSideEffects() {
  		return true;
	}    
	
    	
  	// -- Threads 
	public void SynchronizedStmt.checkRestrictions(ArrayList<String> errorlist) {
		reportRestriction(errorlist, "Threading is not supported");
		super.checkRestrictions(errorlist);
	}

	// -- Exceptions
	public void ThrowStmt.checkRestrictions(ArrayList<String> errorlist) {
		reportRestriction(errorlist, "Exceptions are not supported");
		super.checkRestrictions(errorlist);
	}

	public void TryStmt.checkRestrictions(ArrayList<String> errorlist) {
		reportRestriction(errorlist, "Exceptions are not supported");
		super.checkRestrictions(errorlist);
	}
	
	
	// -- Allowed primitive types 
	public void TypeAccess.checkRestrictions(ArrayList<String> errorlist) {
		TypeDecl t = type();
		if (t.isLong())  reportRestriction(errorlist, "Type 'long' not supported");
		if (t.isFloat()) reportRestriction(errorlist, "Type 'float' not supported");
		if (t.isShort()) reportRestriction(errorlist, "Type 'short' not supported");		
		super.checkRestrictions(errorlist);
	}

  	public void FloatType.checkRestrictions(ArrayList<String> errorlist) {
  		reportRestriction(errorlist, "Type 'float' not supported");  		
  	}  	
  	public void LongType.checkRestrictions(ArrayList<String> errorlist) {
  		reportRestriction(errorlist, "Type 'long' not supported");
  	}  	
  	public void ShortType.checkRestrictions(ArrayList<String> errorlist) {
  		reportRestriction(errorlist, "Type 'short' not supported");
  	}

  	public void FloatingPointLiteral.checkRestrictions(ArrayList<String> errorlist) {
  		reportRestriction(errorlist, "Type 'float' not supported");  		
  	}
  	public void LongLiteral.checkRestrictions(ArrayList<String> errorlist) {
  		reportRestriction(errorlist, "Type 'long' not supported");
  	}
  	

	// no instanceof with arrays
  	public void InstanceOfExpr.checkRestrictions(ArrayList<String> errorlist) {
  	  	if (getTypeAccess().type().isArrayDecl()) {
  	  		reportRestriction(errorlist, "Can not create type check for array types");
  	  	}
		super.checkRestrictions(errorlist);
	}
		   	  	
		   	  			   	    	  
	// method overloading rules
	public void MethodDecl.checkRestrictions(ArrayList<String> errorlist) {
		// check forbidden threading
		if (isSynchronized()) {		
			reportRestriction(errorlist, "Threading is not supported");
		}
		// check forbidden exceptions
		if (hasException()) {
			reportRestriction(errorlist, "Exceptions are not supported");
		}
		
		// do not check for interfaces 
		if (hostType() instanceof ClassDecl) { 
			
			// check method name collisions	in same class 		
			ClassDecl cd = (ClassDecl)hostType();
			for (BodyDecl bd:cd.getBodyDeclList()) {
				// no two methods with same name and number of arguments in same class
				// if both are either static or non-static
				if ((bd instanceof MethodDecl) && bd!=this) {
					MethodDecl md = (MethodDecl) bd;
					if (md.getID().equals(getID())
					&&  md.getNumParameter()==getNumParameter()
					&&  md.isStatic() == isStatic()) {
						reportRestriction(errorlist, 
						 (isStatic() ? "Static" : "Non-static") + " method "
					+ "'"+getID()+"' with "+getNumParameter()
					+ " parameter(s) conflicts with other method defined in same class");
					}				
				}
			}
			
			// check for collisions in the inheritance chain			
			if (!isStatic()) {			
				cd = (ClassDecl) cd.superclass();
				while(!cd.isObject()) {
					for (BodyDecl bd:cd.getBodyDeclList()) {
						if ((bd instanceof MethodDecl)) {
							MethodDecl md = (MethodDecl) bd;							
							if (!md.isStatic() && md.getID().equals(getID()) 
							  && md.getNumParameter()==getNumParameter()
							  && !overrides(md) ) {
  								reportRestriction(errorlist, "Method '"+getID()	+"' with "
  								 +getNumParameter()+" parameters conflicts with method in parent class");								
							}
						}
					}
					cd = (ClassDecl) cd.superclass();
				}
			}
		}
		
		super.checkRestrictions(errorlist);		
	}
	
	// check constructor overloading  (and exception declaration) 
	public void ConstructorDecl.checkRestrictions(ArrayList<String> errorlist) {
		if (hasException()) {
			reportRestriction(errorlist, "Exceptions are not supported");
		}
		ClassDecl cd = (ClassDecl)hostType();
		for (BodyDecl bd:cd.getBodyDeclList()) {
			// no two constructors with same number of arguments
			if ((bd instanceof ConstructorDecl) && bd!=this) {
				ConstructorDecl md = (ConstructorDecl) bd;
				if (md.getNumParameter()==getNumParameter()) {
					reportRestriction(errorlist, 
						 "Multiple constructors with "+getNumParameter()+" parameters");								
				}
			}
		}
	}
	
	// shadowing field identifiers
	public void FieldDeclarator.checkRestrictions(ArrayList<String> errorlist) {
		if (!isStatic()) {
			ClassDecl cd = (ClassDecl) ((ClassDecl)hostType()).superclass();
			while(!cd.isObject()) {
				for (BodyDecl bd:cd.getBodyDeclList()) {
					if (bd.isField()) {
						for (FieldDeclarator fd:bd.fieldDeclarations()) {
							if (!fd.isStatic() && fd.getID().equals(getID())) {
  								reportRestriction(errorlist, "Field '"+getID()+"' must not shadow parent field");								
							}
						}
					}
				}
				cd = (ClassDecl) cd.superclass();
			}
		}
		super.checkRestrictions(errorlist);		
	}

	// Compound assignments can only use limited types of destination
	public void AssignExpr.checkRestrictions(ArrayList<String> errorlist)
	{
		if (!(this instanceof AssignSimpleExpr)) {
			if (getDest().hasPotentialSideEffects()) {
				reportRestriction(errorlist, "Can not use compound assignment when destination my have side effects");			
			}
		}
		
		// Autoboxing in assignments
  		checkAutoBoxing(getSource().type(), getDest().type(), errorlist);
		
		super.checkRestrictions(errorlist);					
	}
	
	// Increment or decrement operators (++, --) only on operands without side effects	
  	public void PostDecExpr.checkRestrictions(ArrayList<String> errorlist) {
		if (getOperand().hasPotentialSideEffects()) {
			reportRestriction(errorlist, "Can not use -- when operand could have side effects");			
		}  	
		super.checkRestrictions(errorlist);					
  	}
  	public void PostIncExpr.checkRestrictions(ArrayList<String> errorlist) {
		if (getOperand().hasPotentialSideEffects()) {
			reportRestriction(errorlist, "Can not use ++ when operand could have side effects");			
		}  	
		super.checkRestrictions(errorlist);					
  	}
  	public void PreDecExpr.checkRestrictions(ArrayList<String> errorlist) {
		if (getOperand().hasPotentialSideEffects()) {
			reportRestriction(errorlist, "Can not use -- when operand could have side effects");			
		}  	
		super.checkRestrictions(errorlist);					
  	}
  	public void PreIncExpr.checkRestrictions(ArrayList<String> errorlist) {
		if (getOperand().hasPotentialSideEffects()) {
			reportRestriction(errorlist, "Can not use ++ when operand could have side effects");			
		}  	
		super.checkRestrictions(errorlist);					
  	}  	
	
	
	// Autoboxing/unboxing in method call parameters
	public void MethodAccess.checkRestrictions(ArrayList<String> errorlist) {
  		MethodDecl m = decl();
  		
  		// check if this is a call using the variable arguments syntax
  		int straightargs = 0;
		if (!m.isVariableArity() 
		|| (getNumArg()==m.getNumParameter() && getArg(getNumArg()-1).type()==m.getParameter(getNumArg()-1).type()) ) 
		{
			straightargs = getNumArg();
		} else {
			straightargs = m.getNumParameter()-1;
		}
		// test for boxing of "normal parameters"
	  	for (int i=0; i<straightargs; i++) {
	  		checkAutoBoxing(getArg(i).type(), m.getParameter(i).type(), errorlist);
  		}
  		// test for boxing of the parameters that are packaged into array
  		for (int i=straightargs; i<getNumArg(); i++) {
	  		checkAutoBoxing(getArg(i).type(), 
	  		               ((ArrayDecl)m.getParameter(straightargs).type()).elementType(),
	  		                errorlist);
  		}
  		
  		// test for availability in supported core libraries
		if (!LibraryList.isAllowed(m.hostType().packageName() + "." + m.hostType().uniqueName(), 
								   m.type().typeName() + " " +m.signature())) {
			reportRestriction(errorlist, "Unsupported core library method in "
				+ m.hostType().packageName() + "." + m.hostType().uniqueName() + ": " 
				+ m.type().typeName() + " " + m.signature());
		}
  		
		super.checkRestrictions(errorlist);					  		
	}
	// Autoboxing/unboxing in super/this-constructor call parameters
	public void ConstructorAccess.checkRestrictions(ArrayList<String> errorlist) {
  		ConstructorDecl m = decl();
  		
  		// check if this is a call using the variable arguments syntax
  		int straightargs = 0;
		if (!m.isVariableArity() 
		|| (getNumArg()==m.getNumParameter() && getArg(getNumArg()-1).type()==m.getParameter(getNumArg()-1).type()) ) 
		{
			straightargs = getNumArg();
		} else {
			straightargs = m.getNumParameter()-1;
		}
		// test for boxing of "normal parameters"
	  	for (int i=0; i<straightargs; i++) {
	  		checkAutoBoxing(getArg(i).type(), m.getParameter(i).type(), errorlist);
  		}
  		// test for boxing of the parameters that are packaged into array
  		for (int i=straightargs; i<getNumArg(); i++) {
	  		checkAutoBoxing(getArg(i).type(), 
	  		               ((ArrayDecl)m.getParameter(straightargs).type()).elementType(),
	  		                errorlist);
  		}

  		// test for availability in supported core libraries
		if (!LibraryList.isAllowed(m.hostType().packageName() + "." + m.hostType().uniqueName(), 
								   m.signature())) {
			reportRestriction(errorlist, "Unsupported core library constructor in "
				+ m.hostType().packageName() + "." + m.hostType().uniqueName() + ": " 
				+ m.signature());
		}
  		
		super.checkRestrictions(errorlist);					  		  		
	}
	// Autoboxing/unboxing in constructor call parameters
	public void ClassInstanceExpr.checkRestrictions(ArrayList<String> errorlist) {
  		ConstructorDecl m = decl();
  		
  		// check if this is a call using the variable arguments syntax
  		int straightargs = 0;
		if (!m.isVariableArity() 
		|| (getNumArg()==m.getNumParameter() && getArg(getNumArg()-1).type()==m.getParameter(getNumArg()-1).type()) ) 
		{
			straightargs = getNumArg();
		} else {
			straightargs = m.getNumParameter()-1;
		}
		// test for boxing of "normal parameters"
	  	for (int i=0; i<straightargs; i++) {
	  		checkAutoBoxing(getArg(i).type(), m.getParameter(i).type(), errorlist);
  		}
  		// test for boxing of the parameters that are packaged into array
  		for (int i=straightargs; i<getNumArg(); i++) {
	  		checkAutoBoxing(getArg(i).type(), 
	  		               ((ArrayDecl)m.getParameter(straightargs).type()).elementType(),
	  		                errorlist);
  		}
  		
  		// test for availability in supported core libraries
		if (!LibraryList.isAllowed(m.hostType().packageName() + "." + m.hostType().uniqueName(), 
								   m.signature())) {
			reportRestriction(errorlist, "Unsupported core library constructor in "
				+ m.hostType().packageName() + "." + m.hostType().uniqueName() + ": " 
				+ m.signature());
		}
  		
		super.checkRestrictions(errorlist);					  		  			
	}
	// autoboxing/unboxing at variable declarators	
	public void VariableDeclarator.checkRestrictions(ArrayList<String> errorlist) {
		 Expr e = getInit();
		 if (e!=null) {
		 	checkAutoBoxing(e.type(), getTypeAccess().type(), errorlist);
		 } 
		super.checkRestrictions(errorlist);					  		  			
	}
	// autoboxing/unboxing in return statement
	public void ReturnStmt.checkRestrictions(ArrayList<String> errorlist) {
		Expr r = getResult();
		if (r!=null) {
			checkAutoBoxing(r.type(), returnType(), errorlist);
		}
		super.checkRestrictions(errorlist);					  		  			
	}  	
	// auto-unboxing of the various conditions and switch expression
	public void ConditionalExpr.checkRestrictions(ArrayList<String> errorlist) {
		checkUnboxing(getCondition(), errorlist);
		super.checkRestrictions(errorlist);					  		  			
	}
	public void IfStmt.checkRestrictions(ArrayList<String> errorlist) {
		checkUnboxing(getCondition(), errorlist);
		super.checkRestrictions(errorlist);					  		  			
	}  	
	public void WhileStmt.checkRestrictions(ArrayList<String> errorlist) {
		checkUnboxing(getCondition(), errorlist);
		super.checkRestrictions(errorlist);					  		  			
	}  	
	public void DoStmt.checkRestrictions(ArrayList<String> errorlist) {
		checkUnboxing(getCondition(), errorlist);
		super.checkRestrictions(errorlist);					  		  			
	}  	
	public void ForStmt.checkRestrictions(ArrayList<String> errorlist) {
		checkUnboxing(getCondition(), errorlist);
		super.checkRestrictions(errorlist);					  		  			
	}  	
	public void SwitchStmt.checkRestrictions(ArrayList<String> errorlist) {
		checkUnboxing(getExpr(), errorlist);
		super.checkRestrictions(errorlist);					  		  			
	}
	public void EnhancedForStmt.checkRestrictions(ArrayList<String> errorlist) {
		if (getExpr().type().isArrayDecl()) {
			checkAutoBoxing(getExpr().type().elementType(), getVariableDecl().getTypeAccess().type(), errorlist);
		} else if (getVariableDecl().getTypeAccess().type().isPrimitiveType()) {
			reportRestriction(errorlist, "Auto-unboxing is not supported");
		}
		super.checkRestrictions(errorlist);					  		  			
	}
	// auto-unboxing the index into an array
	public void ArrayAccess.checkRestrictions(ArrayList<String> errorlist) {
		checkUnboxing(getExpr(), errorlist);
		super.checkRestrictions(errorlist);					  		  			
	}
	// autoboxing/unboxing the content of a new array
  	public void ArrayInit.checkRestrictions(ArrayList<String> errorlist) {
  		for (int i=0; i<getNumInit(); i++) {  				
  			checkAutoBoxing(getInit(i).type(), type().elementType(), errorlist);
  		}
		super.checkRestrictions(errorlist);					  		  			
  	}
	// unboxing the operands for a numerical/string operator
	public void Binary.checkRestrictions(ArrayList<String> errorlist) {	
		if (this instanceof AddExpr && type().isString()) {
			// two operands combining to string were not auto-unboxed
		} else if (this instanceof EqualityExpr) {
			checkAutoBoxing(getLeftOperand().type(), getRightOperand().type(), errorlist);
		} else {
	  		checkUnboxing(getLeftOperand(), errorlist);
  			checkUnboxing(getRightOperand(), errorlist);
  		}	
		super.checkRestrictions(errorlist);					  		  			
	}
	// unboxing the operand for a unary operator
	public void Unary.checkRestrictions(ArrayList<String> errorlist) {	
  		checkUnboxing(getOperand(), errorlist);
		super.checkRestrictions(errorlist);					  		  			
	}
	
	
	// Access to static members is not allowed by using an instance
	public void AbstractDot.checkRestrictions(ArrayList<String> errorlist) {
		Expr l = getLeft();
		Access r = getRight();
		if ((r instanceof MethodAccess) && ((MethodAccess) r).decl().isStatic()) {
			if (! (l instanceof TypeAccess) && ! (l instanceof SuperAccess)) {
				 reportRestriction(errorlist, "Can not access static method '"
				 + ((MethodAccess) r).decl().getID()
				 +"' with instance expression");
			}
		}
		if ((r instanceof VarAccess) && ((VarAccess) r).varDecl().isStatic()) {
			if (! (l instanceof TypeAccess) && ! (l instanceof SuperAccess)) {
				 reportRestriction(errorlist, "Can not access static field '"
				  + ((VarAccess) r).varDecl().name() 
				  + "' with instance expression");
			}
		}
		super.checkRestrictions(errorlist);
	}  		
	
		   	  	
	public void VarAccess.checkRestrictions(ArrayList<String> errorlist) {
		// anonymous classes may not access surrounding local variables
		Variable v = varDecl();
		if (v.isLocalVariable() || v.isParameter()) {	
			if (v.hostType() != hostType()) {
				reportRestriction(errorlist, "Can not access local variables of outer class method");
			}
		}
		
		// check if part of the supported library
		if (v.isClassVariable() || v.isInstanceVariable()) {
			if (!LibraryList.isAllowed(v.hostType().packageName() + "." + v.hostType().uniqueName(),getID())) {
				reportRestriction(errorlist, "Unsupported core library field: "
					+ v.hostType().packageName() + "." + v.hostType().uniqueName() + "." + getID() );
			}
  		}
  						
		super.checkRestrictions(errorlist);
	}		 
}

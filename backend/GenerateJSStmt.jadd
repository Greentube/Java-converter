/**
 * Implement the javascript code generation for all Stmt nodes.
 */

import com.greentube.javaconverter.CodePrinterJS;

aspect GenerateJS 
{
    // --- AssertStmt ---
    
    public void AssertStmt.generateJS(CodePrinterJS out)
    {   // do not generate any assertion code   
    }

    // --- BasicTWR ---

    // --- Block ---

    public void Block.generateJS(CodePrinterJS out) 
    {   
        out.println("{");
        out.increaseIndent();
        int n = getNumStmt();
        for (int i=0; i<n; i++) 
        {   getStmt(i).generateJS(out);
        }
        out.decreaseIndent();
        out.println("}");
    }
  
    // --- BranchTargetStmt ---

    public void DoStmt.generateJS(CodePrinterJS out) 
    {   
        out.print("do ");
        if (getStmt() instanceof Block) out.println();
        getStmt().generateJS(out);
        out.print("while (");
        getCondition().generateUsingResultJS(out);
        out.println(");");
    }

    public void EnhancedForStmt.generateJS(CodePrinterJS out) 
    {   
        String vname = getVariableDecl().name();
        Expr e = getExpr();
        if (e.type().isArrayDecl()) 
        {   out.print("for (var ");
            out.printJSIdentifier(vname, "");
            out.print(", ");
            out.printJSIdentifier(vname, "_i");
            out.print("=0, ");
            out.printJSIdentifier(vname, "_a");
            out.print("=");
            e.generateUsingResultJS(out);
            out.print("; ");
            out.print("(");
            out.printJSIdentifier(vname, "_i");
            out.print("<");
            out.printJSIdentifier(vname, "_a");
            out.print(".length)&&");
            out.print("((");
            out.printJSIdentifier(vname, "");
            out.print("=");
            out.printJSIdentifier(vname, "_a");
            out.print("[");
            out.printJSIdentifier(vname, "_i");
            out.print("])||true); ");
            out.printJSIdentifier(vname, "_i");
            out.print("++)");
        } 
        else if (e.type().isIterable()) 
        {   out.print("for (var ");
            out.printJSIdentifier(vname, "");
            out.print(", ");
            out.printJSIdentifier(vname, "_i");
            out.print("=");         
            e.generateUsingResultJS(out);
            out.print(".iterator_0(); ");
            out.printJSIdentifier(vname, "_i");
            out.print(".hasNext_0()&&((");
            out.printJSIdentifier(vname, "");
            out.print("=");
            out.printJSIdentifier(vname, "_i");
            out.print(".next_0())||true)");         
            out.print(";)");   
        } 
        else 
        {   throw new RuntimeException("Expression is neither an array or an Iterable");
        }
        if (getStmt() instanceof Block) { out.println(); }
        getStmt().generateJS(out);              
        out.println();
    }
 
    public void ForStmt.generateJS(CodePrinterJS out) 
    {   
        out.print("for (");
        for (int i=0; i<getNumInitStmt(); i++) 
        {   if (i>0) out.print(",");               
            Stmt s = getInitStmt(i);
            if (s instanceof ExprStmt)
            {   ((ExprStmt)s).getExpr().generateJS(out);
            }
            else
            {   s.generateJS(out);
            }
        }
        out.print("; ");
        if (hasCondition()) 
        {   getCondition().generateUsingResultJS(out);
        }
        out.print("; ");
        for (int i=0; i<getNumUpdateStmt(); i++) 
        {   if (i>0) out.print(",");
            ((ExprStmt)getUpdateStmt(i)).getExpr().generateJS(out);
        }
        out.print(") ");
        if (getStmt() instanceof Block) out.println();
        getStmt().generateJS(out);
    }

    public void LabeledStmt.generateJS(CodePrinterJS out) 
    {   
        Stmt s = getStmt();
        if 
        (   (s instanceof ForStmt) 
            || (s instanceof EnhancedForStmt)
            || (s instanceof WhileStmt) 
            || (s instanceof DoStmt) 
        )
        {   out.printJSIdentifier(getLabel(),"");
            out.print(": ");
            s.generateJS(out);
        }
        else if (s instanceof Block)
        {   out.printJSIdentifier(getLabel(),"");
            out.println(":");
            out.println("{");
            out.increaseIndent();
            Block b = (Block) s;
            int n = b.getNumStmt();
            for (int i=0; i<n; i++) 
            {   b.getStmt(i).generateJS(out);
            }
            out.decreaseIndent();
            out.println("}");
        }
        else
        {   out.printJSIdentifier(getLabel(),"");
            out.println(":");
            out.println("{");
            out.increaseIndent();            
            s.generateJS(out);
            out.decreaseIndent();
            out.println("}");
        }
    }
    
    public void SwitchStmt.generateJS(CodePrinterJS out) 
    {   
        out.print("switch (");
        getExpr().generateUsingResultJS(out);
        out.println(")");
        out.println("{");
        out.increaseIndent();

        Block b = getBlock();
        int n = b.getNumStmt();
        for (int i=0; i<n; i++) 
        {   Stmt stmt = b.getStmt(i);
            if ((stmt instanceof ConstCase) || (stmt instanceof DefaultCase) || (stmt instanceof Block)) 
            {   stmt.generateJS(out);
            }
            else
            {   out.increaseIndent();
                stmt.generateJS(out);
                out.decreaseIndent();
            }
        }

        out.decreaseIndent();
        out.println("}");
    }

    public void WhileStmt.generateJS(CodePrinterJS out) 
    {   
        out.print("while (");
        getCondition().generateUsingResultJS(out);
        out.print(") ");
        if (getStmt() instanceof Block) out.println();
        getStmt().generateJS(out);
    }

    // --- BreakStmt ---

    public void BreakStmt.generateJS(CodePrinterJS out) 
    {   
        out.print("break");
        String label = getLabel();
        if (label!=null && label.length()>0) 
        {   out.print(" ");
            out.printJSIdentifier(getLabel(), "");
        }
        out.println(";"); 
    }

    // --- Case ---
    
    public void ConstCase.generateJS(CodePrinterJS out) 
    {   
        out.print("case ");
        getValue().generateUsingResultJS(out);
        out.println(":");
    }
    
    public void DefaultCase.generateJS(CodePrinterJS out) 
    {   
        out.println("default:");
    }

    // --- ContinueStmt ---

    public void ContinueStmt.generateJS(CodePrinterJS out) 
    {
        out.print("continue");
        String label = getLabel();
        if (label!=null && label.length()>0) 
        {   out.print(" ");
            out.printJSIdentifier(getLabel(), "");
        }
        out.println(";");
    }
  
    // --- EmptyStmt ---
    public void EmptyStmt.generateJS(CodePrinterJS out)
    {   
        out.println("{}");
    }
    
    // --- ExprStmt ---
  
    public void ExprStmt.generateJS(CodePrinterJS out) 
    {
        getExpr().generateJS(out);
        out.println(";");
    }   
    
    // --- IfStmt ---
    
    public void IfStmt.generateJS(CodePrinterJS out) 
    {   
        Stmt t = getThen();
        Stmt e = getElse();
        out.print("if (");
        getCondition().generateUsingResultJS(out);
        out.print(") ");
        if (t instanceof Block) { out.println(); }
        t.generateJS(out);
        if (e!=null) 
        {   if (!(t instanceof Block) && !(t instanceof EmptyStmt)) out.println();
            out.print("else ");
            e.generateJS(out);
        }
    }
    
    // --- LocalClassDeclStmt ---
    public void LocalClassDeclStmt.generateJS(CodePrinterJS out) 
    {
        // class was already generated 
    }
    
    // --- ReturnStmt ---
    
    public void ReturnStmt.generateJS(CodePrinterJS out) 
    {
        if (enclosingBodyDecl() instanceof ConstructorDecl) 
        {   out.print("return this;");
        }
        else 
        {   Expr r = getResult();
            if (r==null) 
            {   out.print("return;");
            } 
            else
            {   out.print("return ");
                r.generateUsingResultJS(out);
                out.print(";");
            }
        }
        out.println();
    }   
    
    // --- SynchronizedStmt ---
    
    // --- ThrowStmt ---
    public void ThrowStmt.generateJS(CodePrinterJS out) 
    {
        out.print("throw(");
        getExpr().generateUsingResultJS(out);
        out.println(")._e;");
    }
        
    // --- TryStmt ---
    public void TryStmt.generateJS(CodePrinterJS out) 
    {
        out.println("try");
        getBlock().generateJS(out);
        
        generateTryAndCatchClausesJS(out);
    }
    
    public void TryWithResources.generateJS(CodePrinterJS out) 
    {
        if (getNumCatchClause()>0 || getFinally()!=null) 
        {   out.println("try"); 
        }
        out.println("{");
        out.increaseIndent();            

        for (int i=0; i<getNumResource(); i++) 
        {   ResourceDeclaration d = getResource(i);
            out.print("var ");              
            out.printJSIdentifier(d.name(), "");
            out.print(" = ");
            d.getInit().generateUsingResultJS(out);
            out.println(";");
            out.println("try");
            if (i!=getNumResource()-1) 
            {   out.println("{");                                
                out.increaseIndent();
            }                
        }
        
        getBlock().generateJS(out);
        
        for (int i=getNumResource()-1; i>=0; i--)
        {   ResourceDeclaration d = getResource(i);
            if (i!=getNumResource()-1) 
            {   out.decreaseIndent();
                out.println("}");
            }
            out.print("catch($e1) { try { if(");
            out.printJSIdentifier(d.name());
            out.print(") ");
            out.printJSIdentifier(d.name());
            out.print(".close_0(); } catch($e2) {} ");
            out.printJSIdentifier(d.name());
            out.println("=null; throw $e1; }");
            
            out.print("finally { if (");
            out.printJSIdentifier(d.name(), "");
            out.print(") { ");
            out.printJSIdentifier(d.name(), "");
            out.print(".close_0(); ");
            out.println("} }");
        }
        out.decreaseIndent();            
        out.println("}");
        
        generateTryAndCatchClausesJS(out);
    }
    
    
    public void TryStmt.generateTryAndCatchClausesJS(CodePrinterJS out)
    {    
        int n = getNumCatchClause();
        if (n>0) 
        {   CatchClause cc = getCatchClause(0);            
            String varid = "";
            if (cc instanceof BasicCatch)
            {   varid = ((BasicCatch)cc).getParameter().getID();
            }
            else if (cc instanceof MultiCatch)
            {   varid = ((MultiCatch)cc).getParameter().getID();
            }
            
            out.print("catch (");
            out.printJSIdentifier(varid,"$");
            out.println(")");
            out.println("{");
            out.increaseIndent();
            out.print("var ");
            out.printJSIdentifier(varid,"");
            out.print(" = ");
            out.printJSIdentifier(varid,"$");
            out.println(".throwable;");
            for (int i=0; i<n; i++)
            {   cc = getCatchClause(i);
                String var2id = varid;
                
                if (i!=0) { out.print("else "); }
                out.print("if (");                
                if (cc instanceof BasicCatch)
                {   ParameterDeclaration par = ((BasicCatch) cc).getParameter();
                    var2id = par.getID();
                    out.printJSIdentifier(varid,"");
                    out.print(" instanceof ");
                    TypeDecl t = par.type();
                    out.printAndMemorizeReference(t.packageName(),t.uniqueName());
                }
                else if (cc instanceof MultiCatch)
                {   CatchParameterDeclaration par = ((MultiCatch) cc).getParameter();
                    var2id = par.getID();
                    for (int j=0; j<par.getNumTypeAccess(); j++) 
                    {   if (j>0) { out.print(" || "); }
                        out.print("(");
                        out.printJSIdentifier(varid,"");
                        out.print(" instanceof ");
                        TypeDecl t = par.getTypeAccess(j).type();
                        out.printAndMemorizeReference(t.packageName(),t.uniqueName());
                        out.print(")");
                    }                
                }
                else
                {   throw new RuntimeException("Unknown catch clause type");                
                }
                out.println(")");
                
                if (!var2id.equals(varid)) 
                {   out.println();
                    out.print("{   var ");
                    out.printJSIdentifier(var2id);
                    out.print(" = ");
                    out.printJSIdentifier(varid);
                    out.print(";");
                    out.increaseIndent();
                    out.println();                
                    cc.getBlock().generateJS(out);                        
                    out.decreaseIndent();
                    out.println("}");
                }
                else
                {   cc.getBlock().generateJS(out);
                }
            }
            out.print("else { throw ");
            out.printJSIdentifier(varid,"$");
            out.println("; }");
            
            out.decreaseIndent();
            out.println("}");
        }
        
        Block fin = getFinally();
        if (fin!=null)
        {   out.println("finally");
            fin.generateJS(out);        
        }
    }
        
        
    // --- VarDeclStmt ---
    
    public void VarDeclStmt.generateJS(CodePrinterJS out) 
    {
        out.print("var ");
        for (int i=0; i<getNumDeclarator(); i++) 
        {   if (i>0) { out.print(", "); }
            VariableDeclarator d = getDeclarator(i);            
            out.printJSIdentifier(d.name(), "");
            out.print(" = ");
            Expr e = d.getInit();
            if (e!=null) 
            {   e.generateUsingResultJS(out);
            } 
            else
            {   type().generateDefaultValueJS(out);
            }
        }
        if (! (getParent().getParent() instanceof ForStmt)) 
        {   out.println(";");
        } 
    }
    
}


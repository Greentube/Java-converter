import com.greentube.javaconverter.CodePrinter;
aspect GenerateJS {

    // --- AssertStmt ---
    
    public void AssertStmt.generateJS(CodePrinter out)
    {   // do not generate any assertion code   
    }

    // --- BasicTWR ---

    // --- Block ---

    public void Block.generateJS(CodePrinter out) 
    {   
        out.print("{");
        out.increaseIndent();
        out.println();
        int n = getNumStmt();
        for (int i=0; i<n; i++) 
        {   getStmt(i).generateJS(out);
        }
        out.decreaseIndent();
        out.print("}");
        out.println();
    }
  
    // --- BranchTargetStmt ---

    public void DoStmt.generateJS(CodePrinter out) 
    {   out.print("do ");
        if (getStmt() instanceof Block) out.println();
        getStmt().generateJS(out);
        out.print("while (");
        getCondition().generateUsingResultJS(out);
        out.print(");");
        out.println();
    }

    public void EnhancedForStmt.generateJS(CodePrinter out) 
    {   String vname = getVariableDecl().name();
        Expr e = getExpr();
        if (e.type().isArrayDecl()) 
        {   out.print("for (var ");
            out.printJSIdentifier(vname, "");
			out.print(", ");
			out.printJSIdentifier(vname, "_i");
			out.print("=0, ");
			out.printJSIdentifier(vname, "_a");
			out.print("=");
			e.generateUsingResultJS(out);
			out.print("; ");
			out.print("(");
			out.printJSIdentifier(vname, "_i");
			out.print("<");
			out.printJSIdentifier(vname, "_a");
			out.print(".length)&&");
			out.print("((");
			out.printJSIdentifier(vname, "");
			out.print("=");
			out.printJSIdentifier(vname, "_a");
			out.print("[");
			out.printJSIdentifier(vname, "_i");
			out.print("])||true); ");
			out.printJSIdentifier(vname, "_i");
			out.print("++)");
		} 
		else if (e.type().isIterable()) 
        {   out.print("for (var ");
			out.printJSIdentifier(vname, "");
			out.print(", ");
			out.printJSIdentifier(vname, "_i");
			out.print("=");			
			e.generateUsingResultJS(out);
			out.print(".iterator_0(); ");
			out.printJSIdentifier(vname, "_i");
			out.print(".hasNext_0()&&((");
			out.printJSIdentifier(vname, "");
			out.print("=");
			out.printJSIdentifier(vname, "_i");
			out.print(".next_0())||true)");			
			out.print(";)");   
		} 
        else 
        {   throw new RuntimeException("Expression is neither an array or an Iterable");
        }
        if (getStmt() instanceof Block) out.println();
        getStmt().generateJS(out);              
        out.println();
    }
 
    public void ForStmt.generateJS(CodePrinter out) 
    {   out.print("for (");
        if (getNumInitStmt()==0) 
        {   out.print("; ");
        }
        else
        {   for (int i=0; i<getNumInitStmt(); i++) 
            {   if (i>0) out.print(",");
                getInitStmt(i).generateJS(out);
            }
        }
        if (hasCondition()) 
        {   getCondition().generateUsingResultJS(out);
        }
        out.print("; ");
        for (int i=0; i<getNumUpdateStmt(); i++) 
        {   if (i>0) out.print(",");
            ((ExprStmt)getUpdateStmt(i)).getExpr().generateJS(out);
        }
        out.print(") ");
        if (getStmt() instanceof Block) out.println();
        getStmt().generateJS(out);
    }

    public void LabeledStmt.generateJS(CodePrinter out) 
    {   
        Stmt s = getStmt();
        if 
        (   (s instanceof ForStmt) 
            || (s instanceof EnhancedForStmt)
            || (s instanceof WhileStmt) 
            || (s instanceof DoStmt) 
        )
        {   out.printJSIdentifier(getLabel(),"");
            out.print(": ");
            s.generateJS(out);
        }
        else if (s instanceof Block)
        {   out.printJSIdentifier(getLabel(),"");
            out.print(":");
            out.println();  
            out.print("{");
            out.println();            
            out.increaseIndent();
            Block b = (Block) s;
            int n = b.getNumStmt();
            for (int i=0; i<n; i++) 
            {   b.getStmt(i).generateJS(out);
            }
            out.decreaseIndent();
            out.print("}");
            out.println();            
        }
        else
        {   out.printJSIdentifier(getLabel(),"");
            out.print(":");
            out.println();
            out.print("{");
            out.println();  
            out.increaseIndent();            
            s.generateJS(out);
            out.decreaseIndent();
            out.print("}");
            out.println();        
        }
    }
    
    public void SwitchStmt.generateJS(CodePrinter out) 
    {   out.print("switch (");
        getExpr().generateUsingResultJS(out);
        out.print(")");
        out.println();
        out.print("{");
        out.println();
        out.increaseIndent();

        Block b = getBlock();
        int n = b.getNumStmt();
        for (int i=0; i<n; i++) 
        {   Stmt stmt = b.getStmt(i);
            if ((stmt instanceof ConstCase) || (stmt instanceof DefaultCase) || (stmt instanceof Block)) 
            {   stmt.generateJS(out);
            }
            else
            {   out.increaseIndent();
                stmt.generateJS(out);
                out.decreaseIndent();
            }
        }

        out.decreaseIndent();
        out.print("}");
        out.println();
    }

    public void WhileStmt.generateJS(CodePrinter out) 
    {   out.print("while (");
        getCondition().generateUsingResultJS(out);
        out.print(") ");
        if (getStmt() instanceof Block) out.println();
        getStmt().generateJS(out);
    }

    // --- BreakStmt ---

    public void BreakStmt.generateJS(CodePrinter out) 
    {   out.print("break");
        String label = getLabel();
        if (label!=null && label.length()>0) 
        {   out.print(" ");
            out.printJSIdentifier(getLabel(), "");
        }
        out.print(";");	
        out.println();			
    }

    // --- Case ---
    
    public void ConstCase.generateJS(CodePrinter out) 
    {   out.print("case ");
        getValue().generateUsingResultJS(out);
        out.print(":");
        out.println();
    }
    
    public void DefaultCase.generateJS(CodePrinter out) 
    {   out.print("default:");
        out.println();
    }

    // --- ContinueStmt ---

  	public void ContinueStmt.generateJS(CodePrinter out) {
		out.print("continue");
		String label = getLabel();
		if (label!=null && label.length()>0) {
			out.print(" ");
			out.printJSIdentifier(getLabel(), "");
		}
		out.print(";");
		out.println();		
	}
  
    // --- EmptyStmt ---
    
    // --- ExprStmt ---
  
	public void ExprStmt.generateJS(CodePrinter out) {
		getExpr().generateJS(out);
		out.print(";");
		out.println();
	}  	
	
	// --- IfStmt ---
	
    public void IfStmt.generateJS(CodePrinter out) 
    {   Stmt t = getThen();
        Stmt e = getElse();
        out.print("if (");
        getCondition().generateUsingResultJS(out);
        out.print(") ");
        if (t instanceof Block) out.println();
        t.generateJS(out);
        if (e!=null) 
        {   if (!(t instanceof Block)) out.println();
            out.print("else ");
            e.generateJS(out);
        }
    }
	
	// --- LocalClassDeclStmt ---
	public void LocalClassDeclStmt.generateJS(CodePrinter out) {
		// class was already generated 
	}
	
	// --- ReturnStmt ---
	
	public void ReturnStmt.generateJS(CodePrinter out) {
		if (enclosingBodyDecl() instanceof ConstructorDecl) {
			out.print("return this;");
		} else {
			Expr r = getResult();
			if (r==null) {
				out.print("return;");
			} else {
				out.print("return ");
				r.generateUsingResultJS(out);
				out.print(";");
			}
		}
		out.println();
	}  	
	
	// --- SynchronizedStmt ---
	
	// --- ThrowStmt ---
    public void ThrowStmt.generateJS(CodePrinter out) 
    {
        out.print("throw (");
        getExpr().generateUsingResultJS(out);
        out.print(")._error();");
        out.println();
    }
		
	// --- TryStmt ---
		
	// --- VarDeclStmt ---
	
	public void VarDeclStmt.generateJS(CodePrinter out) {
		out.print("var ");
		for (int i=0; i<getNumDeclarator(); i++) {
			if (i>0) out.print(", ");
			VariableDeclarator d = getDeclarator(i);			
			out.printJSIdentifier(d.name(), "");
			out.print(" = ");
			Expr e = d.getInit();
			if (e!=null) {
				e.generateUsingResultJS(out);
			} else {
				type().generateDefaultValueJS(out);
			}
		}
		out.print(";");
		if (! (getParent().getParent() instanceof ForStmt)) {
			out.println();
		} else {
			out.print(" ");
		}
	}
	
}


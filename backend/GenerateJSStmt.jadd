aspect GenerateJS {
 
 	// --- AssertStmt ---
 	
 	// --- BasicTWR ---
 	
 	// --- Block ---
 	
	public void Block.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.println();
		out.print("{");
		out.increaseIndent();
  		int n = getNumStmt();
  		for (int i=0; i<n; i++) {
  			out.println();
  			Stmt stmt = getStmt(i);
  			stmt.generateJS(out);
  			if (!(stmt instanceof Case)) out.print(";");
  		}
		out.decreaseIndent();
		out.println();  		  		
		out.print("}");
  	}
  
  	// --- BranchTargetStmt ---
  	
	public void DoStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("do ");
		getStmt().generateJS(out);
		out.print("while(");	
		getCondition().generateJS(out);
		out.print(")");	
 	}
 	
	public void EnhancedForStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		String vname = getVariableDecl().name();
		Expr e = getExpr();
		if (e.type().isArrayDecl()) {
			out.print("for (var " + vname + "_l, " + vname + "_i=0, " + vname + "_a=");
			e.generateJS(out);
			out.print("; ");
			out.print("(" + vname + "_i<" + vname + "_a.length)&&");
			out.print("((" + vname + "_l=" + vname +"_a[" + vname + "_i])||true); ");
			out.print(vname + "_i++)");
			getStmt().generateJS(out);
		} else if (e.type().isIterable()) {
			out.print("for (var " + vname + "_l, " + vname + "_i=");			
			e.generateJS(out);
			out.print(".iterator_0(); ");
			out.print(vname + "_i.hasNext_0()&&((" + vname + "_l=" + vname + "_i.next_0())||true)");			
			out.print(";)");   
			getStmt().generateJS(out);				
		} else {
			throw new RuntimeException("Expression is neither an array or an Iterable");
		}
 	}
 	
	public void ForStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("for (");
		for (int i=0; i<getNumInitStmt(); i++) {
			if (i>0) out.print(",");
			getInitStmt(i).generateJS(out);
		}
		out.print("; ");
		if (hasCondition()) {
			getCondition().generateJS(out);
		}
		out.print("; ");
		for (int i=0; i<getNumUpdateStmt(); i++) {
			if (i>0) out.print(",");
			getUpdateStmt(i).generateJS(out);
		}
		out.print(")");
		getStmt().generateJS(out);
 	}
 	
	public void LabeledStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print(getLabel()+": ");
		getStmt().generateJS(out);
 	}
 	
	public void SwitchStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("switch (");
		getExpr().generateJS(out);
		out.print(")");
		getBlock().generateJS(out);	
 	}

	public void WhileStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("while (");
		getCondition().generateJS(out);
		out.print(")");
		getStmt().generateJS(out);	
 	}
  	
  	// --- BreakStmt ---
  	
	public void BreakStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("break");
		if (getLabel()!=null) out.print(" "+getLabel());		
	}
  	
  	// --- Case ---
  	
	public void ConstCase.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("case ");
		getValue().generateJS(out);
		out.print(":");
	}
	public void DefaultCase.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("default:");
	}
  	
  	// --- ContinueStmt ---

  	public void ContinueStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("continue");
		if (getLabel()!=null) out.print(" "+getLabel());
	}
  
    // --- EmptyStmt ---
    
    // --- ExprStmt ---
  
	public void ExprStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		getExpr().generateJS(out);
	}  	
	
	// --- IfStmt ---
	
	public void IfStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("if (");
		getCondition().generateJS(out);
		out.print(") ");
		getThen().generateJS(out);
		Stmt e = getElse();
		if (e!=null) {
			out.println();
			out.print("else ");
			e.generateJS(out);
		}
	}  	
	
	// --- LocalClassDeclStmt ---
	public void LocalClassDeclStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		ClassDecl cd = getClassDecl();
		com.greentube.javaconverter.CodePrinter o2 = null; 
		try {    				
			o2 = new com.greentube.javaconverter.CodePrinter(out, cd.constantPoolName());
			cd.generateJS(o2);
		} catch (Exception e) {
      		e.printStackTrace();
      		throw new RuntimeException(e.getMessage());
    	} finally {
    		if (o2!=null) o2.finish();
    	}
	}
	
	// --- ReturnStmt ---
	
	public void ReturnStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		if (enclosingBodyDecl() instanceof ConstructorDecl) {
			out.print("return this");
		} else {
			Expr r = getResult();
			if (r==null) {
				out.print("return");
			} else {
				out.print("return ");
				r.generateJS(out);
			}
		}
	}  	
	
	// --- SynchronizedStmt ---
	
	// --- ThrowStmt ---
		
	// --- TryStmt ---
		
	// --- VarDeclStmt ---
	
	public void VarDeclStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("var ");
		for (int i=0; i<getNumDeclarator(); i++) {
			if (i>0) out.print(",");
			VariableDeclarator d = getDeclarator(i);			
			out.print(d.name() + "_l = ");
			Expr e = d.getInit();
			if (e!=null) {
				e.generateJS(out);
			} else {
				out.print(type().isPrimitiveType() ? "0" : "null");
			}
		}
	}
	
}


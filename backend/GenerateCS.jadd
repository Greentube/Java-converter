aspect GenerateCS {
  	  	
  	public void ASTNode.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		System.err.print("UNEXPECTED:");
		this.dumpTree(System.err);
  	}
  	
  	public String ASTNode.renameMethod(String n, boolean isstatic) {
  		if (isstatic) {
			return n;
		} else {
			if (n.equals("toString")) return "ToString";
			if (n.equals("equals")) return "Equals";
			if (n.equals("hashCode")) return "GetHashCode";
			return n;			
		}  	
  	}  	

  	public void CompilationUnit.generateCS(File outputfolder) {
    	for (TypeDecl t:getTypeDecls()) {
			com.greentube.javaconverter.CodePrinter out = 
			   new com.greentube.javaconverter.CodePrinter(
					outputfolder, t.constantPoolName()+".cs");
	    	t.generateCS(out);
			out.finish();    	
    	}
  	}
    	
	public void ClassDecl.generateCS(com.greentube.javaconverter.CodePrinter out) {
		for (TypeDecl t:nestedTypes()) {
			com.greentube.javaconverter.CodePrinter o2 = 
				 new com.greentube.javaconverter.CodePrinter(out, t.constantPoolName()+".cs");
	    	t.generateCS(o2);
			o2.finish();    		
		}
	  
		out.print("namespace "+packageName()+" {");
		out.increaseIndent();
		out.println();
		out.print("using java.lang;");  
		out.println();
		out.print("public class ");
		out.printCSUniqueName(uniqueName());
		out.print(": ");

    	if (hasSuperClass()) {
    		out.printCSName(superclass().constantPoolName());
    	} else {
    		out.print("System.Object");
    	}
   		for (Iterator<TypeDecl> iter = interfacesIterator(); iter.hasNext(); ) {
   			out.print(", ");
      		out.printCSName(iter.next().constantPoolName());
   		}			
    	
    	out.println();
    	out.print ("{");
    	out.println();
    	out.increaseIndent(); 

		if (isInnerClass() && superclass().isObject()) {
			out.print("public ");
			enclosingType().generateReferenceCS(out);
			out.print(" outer_o;");
			out.println(); 
		}
    	    	        	    	
    	for (BodyDecl bd:getBodyDeclList()) {
			if (bd.isField()) {
				for (FieldDeclarator fd:bd.fieldDeclarations()) {
					out.print(fd.isStatic() ? "public static " : "public ");
					fd.fieldDecl().getTypeAccess().generateCS(out);
					out.print(" ");
					out.print(fd.getID()+"_f;");						
					out.println();
				}
			}
		}		
    	    	        	    	        	    	    
      	for (BodyDecl b : methodsAndConstructors()) {
      		// check if need to suppress auto-generated methods related to Enums
			if (b instanceof MethodDecl) {
      			MethodDecl md = (MethodDecl) b;
      			if (this instanceof EnumDecl) {
      				if (md.getID().equals("values") && md.getNumParameter()==0 ) continue;
      				if (md.getID().equals("valueOf") && md.getNumParameter()==1 )  continue;
      			}
				if (md.getID().startsWith("$SwitchMap$") && md.getNumParameter()==0) continue;      		
      		}
      		else if (b instanceof ConstructorDecl) {
      			ConstructorDecl cd = (ConstructorDecl) b;
      			if (this instanceof EnumDecl) {
      				if (cd.isSynthetic() && cd.getNumParameter()==2 
      				&&  cd.getParameter(1).type()==this) continue;
      			}      		
      		}
	        b.generateCS(out);
    	}    	    	    
    	    	    	
		boolean havestaticconstructor = false;		
		for (BodyDecl bd:getBodyDeclList()) {
			if (bd.isField()) {
				for (FieldDeclarator fd:bd.fieldDeclarations()) {
					if (fd.isStatic() && fd.getInit()!=null) {
						if (!havestaticconstructor) {
							out.print("static ");
							out.printCSUniqueName(uniqueName());
							out.print("() {");
							out.println();
							out.increaseIndent();
							havestaticconstructor=true;
						}							
						out.print(fd.getID()+"_f = ");
						fd.getInit().generateOrUseConstantCS(out);
						out.print(";");
						out.println();
					}
				}
			} else if (bd instanceof StaticInitializer) {
				if (!havestaticconstructor) {
					out.print("static ");
					out.printCSUniqueName(uniqueName());
					out.print("() {");
					out.println();
					out.increaseIndent();
					havestaticconstructor=true;
				}							
				bd.generateCS(out);
			}
		}		
		if (havestaticconstructor) {
			out.decreaseIndent();
			out.print("}");
			out.println();
		}

		if (this instanceof EnumDecl) {
			EnumDecl ed = (EnumDecl) this;
			int ordinal = 0;
			for (EnumConstant ec:ed.enumConstants()) {
				out.print("public static ");
				out.printCSUniqueName(uniqueName());			
				out.print(" "+ec.getID()+"_f = ");
				out.print("new "); 								
				out.printCSUniqueName(ec.getInit().type().uniqueName());
				out.print("(\""+ec.getID()+"\","+ordinal);
				for (int i=0; i<ec.getNumArg(); i++) {
					out.print(",");
					ec.getArg(i).generateCS(out);
				}
				out.print(");");	
				out.println();				
				ordinal++;			
			}	
			out.print("public static ");
			out.printCSUniqueName(uniqueName());
			out.print("[] values() {");
			out.println();
			out.increaseIndent();
			out.print("return new ");
			out.printCSUniqueName(uniqueName());
			out.print("[]{");
			boolean hasfirst=false;
			for (EnumConstant ec:ed.enumConstants()) {
				if (hasfirst) out.print(",");  
				out.print(ec.getID()+"_f");
				hasfirst=true;
			}
			out.print("};");
			out.println();
			out.decreaseIndent();
			out.print("}");
			out.println();
		}

		out.decreaseIndent(); 
		out.print("}");
		out.println();
		out.decreaseIndent(); 
		out.print("}");
		out.println();
  	}
  	  	
  	  	
  	  	
	public void InterfaceDecl.generateCS(com.greentube.javaconverter.CodePrinter out) {
		out.print("namespace "+packageName()+" {");
		out.increaseIndent();
		out.println();
		out.print("public interface ");
		out.printCSUniqueName(uniqueName());

		if (hasSuperInterface()) {
			out.print(": ");
			int n=0;
      		for (Iterator<TypeDecl> iter = interfacesIterator(); iter.hasNext(); n++) {
      			if (n>0) out.print(",");
        		out.printCSName(iter.next().constantPoolName());
      		}			
		}
		out.print(" {");
		out.println();
		out.increaseIndent();
		
		boolean hasfields = false;
		for (BodyDecl bd:getBodyDeclList()) {
			if (bd.isField()) {
				hasfields = true;
			} else if (bd instanceof MethodDecl) {
				bd.generateCS(out);
			}
		}		

		out.decreaseIndent();
		out.print("}");
		out.println();
		
		if (hasfields) {
			out.print("public static class ");
			out.printCSUniqueName(uniqueName()+"_constants");
			out.print(" { ");
			out.println();
			out.increaseIndent();
			
			for (BodyDecl bd:getBodyDeclList()) {
				if (bd.isField()) {
					for (FieldDeclarator fd:bd.fieldDeclarations()) {
						if (fd.isStatic()) {
							out.print("public static ");
							fd.getTypeAccess().generateCS(out);
							out.print(" "); 							
							out.print(fd.getID()+"_f = ");
							fd.getInit().generateOrUseConstantCS(out);
							out.print(";");		
							out.println();			
						}
					}
				}
			}	
			out.decreaseIndent();
			out.print("}");	
			out.println();						
		}		
		
		out.decreaseIndent();
		out.print("}");		
		out.println();
	}  
  	

//  	public void TypeDecl.generateCS(com.greentube.javaconverter.CodePrinter out) {
//    	out.print(constantPoolName());
//    }  
  

  	public void ConstructorDecl.generateCS(com.greentube.javaconverter.CodePrinter out) {
		// decide if all the fields have to be initialized right here	
		boolean needsInit = true;			
		if (hasConstructorInvocation()) {
	        Stmt stmt = getConstructorInvocation();
        	if (stmt instanceof ExprStmt) {
          		ExprStmt exprStmt = (ExprStmt) stmt;
          		Expr expr = exprStmt.getExpr();
          		if (!expr.isSuperConstructorAccess()) {
            		needsInit = false;
          		}
        	}
      	}		
		
  		int numpar = getNumParameter();  		
  		out.print("public ");  		
  		out.printCSUniqueName(hostType().uniqueName());
  		out.print("(");
  		// pass reference to the enclosing object 
  		boolean needouter = hostType().isInnerClass() && !hostType().isSubclassingEnum();
  		if (needouter) {
  			hostType().enclosingType().generateReferenceCS(out);
  			out.print(" outer_o");
  		}
  		for (int i=0; i<numpar; i++) {
  			if (i>0 || needouter) out.print(",");
  			getParameter(i).getTypeAccess().generateCS(out);
  			if (i==numpar-1 && isVariableArity()) {
  				out.print("[]");
  			} 
  			out.print(" ");
  			out.print(getParameter(i).name());
  			out.print("_l");
  		}
  		out.print(")");
  		out.print(":");
  		((ExprStmt)getConstructorInvocation()).getExpr().generateCS(out);		
		out.println();
  		out.print("{");  		
		out.println();
		out.increaseIndent();
		
		// if calling a constructor of this, do not initialize all variables twice		
		if (! needsInit) {
			// nothing to do 			
		} else { 
			// when a super-constructor is called, the initialization of everything else needs to be done here
			if (hostType().isInnerClass() && ((ClassDecl)hostType()).superclass().isObject()) {
				out.print("this.outer_o = outer_o;");
				out.println();
			}			
			
			// do all field initializations
			for (BodyDecl bd:hostType().getBodyDeclList()) {
				if (bd.isField()) {
					for (FieldDeclarator fd:bd.fieldDeclarations()) {
						if (!fd.isStatic() && fd.getInit()!=null) {
							out.print("this."+fd.getID()+"_f = ");
							fd.getInit().generateCS(out);
							out.print(";");						
							out.println();
						}
					}
				} else if (bd instanceof InstanceInitializer) {
					bd.generateCS(out);
				}
			}
		}
		
		// build body of constructor
		Block block = getBlock();
  		int n = block.getNumStmt();
  		for (int i=0; i<n; i++) {
  			Stmt stmt = block.getStmt(i);
  			stmt.generateCS(out);
  		}
		out.decreaseIndent();
		out.print("}");
  		out.println();		
  	}

//	public void EnumConstant.generateCS(com.greentube.javaconverter.CodePrinter out) {
//	}

	public void InstanceInitializer.generateCS(com.greentube.javaconverter.CodePrinter out) {
		getBlock().generateCS(out);	
	}
//	public void FieldDecl.generateCS(com.greentube.javaconverter.CodePrinter out) {
//	}
//	public void MemberClassDecl.generateCS(com.greentube.javaconverter.CodePrinter out) {
//	}
//	public void MemberInterfaceDecl.generateCS(com.greentube.javaconverter.CodePrinter out) {
//	}

  	public void MethodDecl.generateCS(com.greentube.javaconverter.CodePrinter out) {
		if (isStatic()) {
  			// test if this method shadows a static super method
  			boolean isoverriding = false;
  			ClassDecl c = (ClassDecl)(hostType());
  			while (!c.isObject()) {
  				c = (ClassDecl) (c.superclass());
				for (BodyDecl b : c.methodsAndConstructors()) {
					if (b instanceof MethodDecl && ((MethodDecl)b).isStatic() 
				    && signature().equals(((MethodDecl)b).signature()) ) { 
						isoverriding = true;
					}
		    	}    	    	      				
  			} 			 		
			out.print("public static ");		
			if (isoverriding) out.print("new ");
			  								
		} else if (hostType().isClassDecl()) {  			
  			// test if this method overrides a super method
  			boolean isoverriding = false;
  			ClassDecl c = (ClassDecl)(hostType());
  			while (!c.isObject()) {
  				c = (ClassDecl) (c.superclass());
				for (BodyDecl b : c.methodsAndConstructors()) {
					if (b instanceof MethodDecl && overrides((MethodDecl)b) ) { 
						isoverriding = true;
					}
		    	}    	    	      				
  			} 			 		
  			out.print("public ");
  			out.print(isoverriding ? "override " : "virtual ");  			
  		}  		
  		
		String n = renameMethod(name(), isStatic());
  		getTypeAccess().generateCS(out);
  		out.print(" ");
  		out.print(n);
  		out.print("(");
  		int numpar = getNumParameter();
  		for (int i=0; i<numpar; i++) {
  			if (i>0) out.print(",");
  			getParameter(i).getTypeAccess().generateCS(out);
  			if (i==numpar-1 && isVariableArity()) {
  				out.print("[]");
  			} 
  			out.print(" ");
  			out.print(getParameter(i).name());
  			out.print("_l");
  		}
  		out.print(")");
  		
  		if (getBlock()!=null) {
	  		out.println();
  			getBlock().generateCS(out);
  		} else {
  			out.print(";");
  			out.println();  		
  		}
  	}

	public void StaticInitializer.generateCS(com.greentube.javaconverter.CodePrinter out) {
		getBlock().generateCS(out);
	}

//	public void SubstitutedBodyDecl.generateCS(com.greentube.javaconverter.CodePrinter out) {
//	}


	public void TypeDecl.generateReferenceCS(com.greentube.javaconverter.CodePrinter out) {
		if (isPrimitiveType()) {
  			if (isInt()) {
  				out.print("int");
  			} else if (isByte()) {
  				out.print("sbyte");  		
  			} else if (isChar()) {  		
  				out.print("char");
  			} else if (isBoolean()) {
  				out.print("bool");
  			} else if (isDouble()) {
  				out.print("double");
  			} else {
  				throw new RuntimeException("Type not supported:"+fullName());
  			}
  		} else if (isVoid()) {
  			out.print("void");
  		} else if (isArrayDecl()) {
  			elementType().generateReferenceCS(out);
  			for (int i=dimension(); i>0; i--) {
  				out.print("[]");
  			}
  		} else {
  			out.printCSName(constantPoolName());
		}
	}  	
	
	public boolean TypeDecl.isSubclassingEnum() {
		if (isEnumDecl()) return true;
		if (!isClassDecl()) return false;
		ClassDecl cd = (ClassDecl) this;
		return cd.hasSuperclass() && cd.superclass().isSubclassingEnum();
	}
	
	public int EnumDecl.determineOrdinal(String name) {
		int ordinal = 0;
		for (EnumConstant ec:enumConstants()) {
			if (ec.getID().equals(name)) return ordinal;
			ordinal++;
		}
		return 0;
	}
	
  	public void Constant.generateCharacterCS(com.greentube.javaconverter.CodePrinter out, char c) {
  			switch(c) {
  			case '\b': 	out.print("\\b");
  						break;
  			case '\f':  out.print("\\f");	
  			            break;
  			case '\n':  out.print("\\n"); 
  			            break;
  			case '\r':  out.print("\\r");
  			            break;
  			case '\t':  out.print("\\t");
  			            break;
  			case '\\':  out.print("\\\\");
  			            break;
  			case '"':   out.print("\\\"");
  			            break;  			
  			case '\'':  out.print("\\'");
  			            break;  			
  			default: 
  				if (c>=32 && c<=126) {
  				 	out.print(""+c);
  				} else {
  					String hx = Integer.toHexString((int)c);
  					out.print("\\u");
  					for (int j=hx.length(); j<4; j++) {
  						out.print("0");
  					} 
  					out.print(hx);
  				}
  				break;
  			}  	
  	}  	
  	public void Constant.generateCS(com.greentube.javaconverter.CodePrinter out) {
		if (this instanceof	ConstantBoolean) {
			out.print(booleanValue()?"true":"false");
		} else if (this instanceof ConstantChar) {
			out.print("'");
			generateCharacterCS(out, (char) intValue());
			out.print("'");
		} else if (this instanceof ConstantDouble) {
			double d = doubleValue();
			if (Double.isNaN(d)) {
				out.print("System.Double.NaN");
			} else if (Double.isInfinite(d)) {
				if (d>0) out.print("System.Double.PositiveInfinity");
				else     out.print("System.Double.NegativeInfinity");
			} else {
				out.print(""+d);
			}
		} else if (this instanceof ConstantInt) {
			out.print(""+intValue());
		} else if (this instanceof ConstantString) {
	  		String v = stringValue();
	  		out.print("\"");
	  		for (int i=0; i<v.length(); i++) {
	  			generateCharacterCS(out,v.charAt(i));
	  		}
	  		out.print("\"");	
		}
  	}		
}

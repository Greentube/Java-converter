/**
 * Implement the C# code generation for all AST nodes that are not derived from Expr or Stmt.
 * This covers mainly the class and interface declarations and the attached methods and fields.
 */

import com.greentube.javaconverter.CodePrinter;
import com.greentube.javaconverter.CodePrinterCS;

aspect GenerateCS 
{       
    public void ASTNode.generateCS(CodePrinterCS out) 
    {
        this.dumpTree(System.err);
        throw new RuntimeException("Can not create CS for:"+this.getClass().getName());
    }  

    public void CompilationUnit.generateCS(File outputfolder) 
    {
        for (TypeDecl t:getTypeDecls()) 
        {   CodePrinterCS out = new CodePrinterCS
            (   outputfolder,
                CodePrinter.escapePackagePath(t.packageName(),"_") 
                  + CodePrinter.escapeIdentifier(t.uniqueName(),".cs","_",null)
            );
            t.generateCS(out);
            out.finish();       
        }
    }
    
    public boolean FieldDeclarator.isConst() // [CC]
    {
        if (!isFinal())
            return false; // only final fields can result in const
        
        if (!(getTypeAccessNoTransform() instanceof PrimitiveTypeAccess))
            return false; // allow only primitive types for const
        
        // TODO: look at initial value
        
        return true;
    }

    public void ClassDecl.generateCS(CodePrinterCS out) 
    {   
        for (TypeDecl t:nestedTypes()) 
        {   CodePrinterCS o2 = new CodePrinterCS(out.getOutputFolder(), 
                  CodePrinter.escapePackagePath(t.packageName(),"_") 
                + CodePrinter.escapeIdentifier(t.uniqueName(),".cs","_",null)
            );
            t.generateCS(o2);
            o2.finish();
        }

        out.println("using java.lang;");  

        if (packageName().length()>0) 
        {   out.print("namespace ");
            generatePackageNameCS(out);           
            out.print(" { ");
        }
        
        boolean enum_has_abstract=false;
        if (this instanceof EnumDecl) 
        {   for (MethodDecl method : localMethods()) 
            {   if (method.isAbstract()) { enum_has_abstract=true; }
            }
        }        
        out.print(hasAbstract() || enum_has_abstract ? "public abstract class ":"public class ");
        out.printIdentifier(uniqueName());
        out.print(": ");

        if (hasSuperClass()) 
        {   superclass().generateNameCS(out);
        }
        else
        {   out.print("System.Object");
        }
        for (Access ac: getImplementsList() ) 
        {   out.print(", ");
            ac.generateCS(out);               
        }  

        out.println();
        out.println("{");
        out.increaseIndent(); 

        if (needsEnclosing() && !superclass().needsEnclosing()) 
        {   out.print("public ");
            enclosingType().generateNameCS(out);
            out.print(" _o;");
            out.println(); 
        }
        for (Variable v:enclosingVariables()) 
        {   out.print("public ");
            v.type().generateNameCS(out);
            out.print(" ");
            out.printIdentifier(v.name(),"_o");            
            out.println(";");
        }

        for (BodyDecl bd:getBodyDeclList()) 
        {   if (bd.isField()) 
            {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                {   out.print("public ");
                    if (fd.isStatic()) 
                    {   if (!fd.isConst()) // [CC] set static for non-final members
                        {   out.print("static ");
                        }
                        // test if shadowing a previous static field - need "new" keyword 
                        ClassDecl cd = (ClassDecl) superclass();
                        findoriginal: while(!cd.isObject()) 
                        {   for (BodyDecl y:cd.getBodyDeclList()) 
                            {   if (y.isField()) 
                                {   for (FieldDeclarator x:y.fieldDeclarations()) 
                                    {   if (x.isStatic() && x.getID().equals(fd.getID())) 
                                        {   out.print("new ");
                                            break findoriginal;
                                        }
                                    }
                                }
                            }
                            cd = (ClassDecl) cd.superclass();
                        }                   
                        if (fd.isConst()) // [CC] set const for final members
                        {   out.print("const ");
                        }
                    }                    
                    fd.fieldDecl().getTypeAccess().generateCS(out);
                    for (int di=0; di<fd.getNumDims(); ++di) // [CC] extra dimensions
                    {   out.print("[]");
                    }
                    out.print(" ");
                    out.printIdentifier(fd.getID(),"_f");
                    if (fd.isConst() && (fd.getInit() != null)) // [CC] initialize const values here (TODO: maybe do this for non-const as well?)
                    {   out.print(" = ");
                        fd.getInit().generateUsingResultCS(out);
                    }
                    out.println(";");                     
                }
            }
        }       
                                                            
        // determine which bridge methods need to be suppressed 
        Collection<MethodDecl> bridgemethods = bridgeMethods();
        ArrayList<MethodDecl> removedbridgemethods = new ArrayList<>();
        for (BodyDecl b : methodsAndConstructors()) 
        {   // check if need to suppress auto-generated bridge methods 
            if 
            (   bridgemethods.contains(b)  
                && hasMethodWithSignature(((MethodDecl)b).signature(), bridgemethods) 
            ) 
            {  removedbridgemethods.add((MethodDecl)b);
            }
        }
                                                            
        // instance methods                                                             
        for (BodyDecl b : methodsAndConstructors()) 
        {   if (removedbridgemethods.contains(b)) { continue; }

            // check if need to suppress auto-generated methods related to Enums
            if (b instanceof MethodDecl) 
            {   MethodDecl md = (MethodDecl) b;
                if (this instanceof EnumDecl) 
                {   if (md.getID().equals("values") && md.getNumParameter()==0 ) { continue; }
                    if (md.getID().equals("valueOf") && md.getNumParameter()==1 ) { continue; }
                }
                if (md.getID().startsWith("$SwitchMap$") && md.getNumParameter()==0) { continue; }              
                
                // check if there was a removed bridge method with the same signature
                // - need to use its return type for the non-bridge method also
                Access ta = null; 
                for (MethodDecl bm : removedbridgemethods)
                {   if (bm.signature().equals(md.signature())) 
                    {   ta = bm.getTypeAccess();
                    }
                }
                
                md.generateCS(out, false, ta);
            }
            else
            {   if (b instanceof ConstructorDecl) 
                {   ConstructorDecl cd = (ConstructorDecl) b;
                    if (this instanceof EnumDecl) 
                    {   if 
                        (   cd.isSynthetic() && cd.getNumParameter()==2 
                            && cd.getParameter(1).type()==this
                        ) 
                        { continue; }
                    }
                }           
                b.generateCS(out);
            }
        }                   
                        
        boolean havestaticconstructor = false;      
        for (BodyDecl bd:getBodyDeclList()) 
        {   if (bd.isField()) 
            {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                {   if (fd.isStatic() && fd.getInit()!=null) 
                    {   if (!havestaticconstructor) 
                        {   out.print("static ");
                            out.printIdentifier(uniqueName());
                            out.println("()");
                            out.println("{");
                            out.increaseIndent();
                            havestaticconstructor=true;
                        }                           
                        if (!fd.isConst()) // [CC] only initialize non-const values here (TODO: maybe do this for all fields?)
                        {   out.printIdentifier(fd.getID(),"_f");
                            out.print(" = ");
                            fd.getInit().generateUsingResultCS(out);
                            out.println(";");
                        }
                    }
                }
            } 
            else if (bd instanceof StaticInitializer) 
            {   if (!havestaticconstructor) 
                {   out.print("static ");
                    out.printIdentifier(uniqueName());
                    out.println("() {");
                    out.increaseIndent();
                    havestaticconstructor=true;
                }                           
                bd.generateCS(out);
            }
        }       
        if (havestaticconstructor) 
        {   out.decreaseIndent();
            out.println("}");
        }

        if (this instanceof EnumDecl) 
        {   EnumDecl ed = (EnumDecl) this;
            int ordinal = 0;
            for (EnumConstant ec:ed.enumConstants()) 
            {   out.print("public static ");
                out.printIdentifier(uniqueName());
                out.print(" ");
                out.printIdentifier(ec.getID(),"_f");     
                out.print(" = new ");                               
                out.printIdentifier(ec.getInit().type().uniqueName());
                out.print("(\""+ec.getID()+"\","+ordinal);
                for (int i=0; i<ec.getNumArg(); i++) 
                {   out.print(",");
                    ec.getArg(i).generateCS(out);
                }
                out.println(");");    
                ordinal++;          
            }   
            out.print("public static ");
            out.printIdentifier(uniqueName());
            out.println("[] values()");
            out.println("{");
            out.increaseIndent();
            out.print("return new ");
            out.printIdentifier(uniqueName());
            out.print("[]{");
            boolean hasfirst=false;
            for (EnumConstant ec:ed.enumConstants()) 
            {   if (hasfirst) { out.print(","); }  
                out.printIdentifier(ec.getID(),"_f");
                hasfirst=true;
            }
            out.println("};");
            out.decreaseIndent();
            out.println("}");
            
            out.print("public static ");
            out.printIdentifier(uniqueName());
            out.println(" valueOf(System.String s)");
            out.println("{");
            out.increaseIndent();
            out.println("switch (s)");
            out.println("{");
            out.increaseIndent();
            for (EnumConstant ec:ed.enumConstants()) 
            {   out.print("case ");
                (new Constant.ConstantString(ec.getID())).generateCS(out);
                out.print(": return ");
                out.printIdentifier(ec.getID(),"_f");
                out.println(";");
            }
            out.println("default: throw new java.lang.IllegalArgumentException();");
            out.decreaseIndent();
            out.println("}");
            out.decreaseIndent();
            out.println("}");
        }
    
        // add redirects for interface default methods
        ArrayList<MethodDecl> neededredirects = new ArrayList<MethodDecl>();
        for (Access ac: getImplementsList() ) 
        {   while (ac instanceof Dot) ac=((Dot)ac).getRight();        
            TypeDecl t = (ac instanceof TypeAccess) ? ((TypeAccess) ac).type() 
                                                    : ((ParTypeAccess) ac).type(); 
            for(BodyDecl bd: ((InterfaceDecl)t).recursivelyGetBodyDecl())
            {   if (bd instanceof MethodDecl) 
                {   MethodDecl md = (MethodDecl) bd;
                    if 
                    (   md.isDefault() 
                        && !this.hasMethodWithSignature(md.signature(), null)
                        && md.isSupportedInLibraries() 
                        && !neededredirects.contains(md)
                    )
                    {   neededredirects.add(md); 
                    }
                }
            }
        }
        for (MethodDecl md:neededredirects) 
        {   out.print("public virtual ");
            md.getTypeAccess().generateCS(out);
            out.print(" ");
            out.printIdentifier(md.name());
            out.print("(");
            int numpar = md.getNumParameter();
            for (int i=0; i<numpar; i++)
            {   if (i!=0) { out.print(", "); }
                md.getParameter(i).getTypeAccess().generateCS(out);
                if (i==numpar-1 && md.isVariableArity()) 
                {   out.print("[]");
                }        
                out.print(" p"+i);                     
            }
            out.println(")");                        
            out.println("{");
            if (!md.isVoid()) { out.print("return "); }
            md.hostType().generateNameCS(out);
            out.print("_c.");
            out.printCSMethodName(md.name(),true);
            out.print("(this");
            for (int i=0; i<numpar; i++) 
            {   out.print(", ");
                out.print("p"+i);                            
            }
            out.println(");");                        
            out.println("}");
        }  
        
        // add synthetic methods for array dimensioning of needed
        generateDimsCS(out);
    
        out.decreaseIndent(); 
        out.print("}");
        if (packageName().length()>0) 
        {   out.print("}");
        }
        out.println();
    }
    
        
    public void InterfaceDecl.generateCS(CodePrinterCS out) 
    {
        out.println("using java.lang;");  
        boolean haspackage = packageName().length()>0;
        if (haspackage) 
        {   out.print("namespace ");
            generatePackageNameCS(out); 
            out.print(" { ");                     
        }
        out.print("public interface ");
        out.printIdentifier(uniqueName());

        if (hasSuperInterface()) 
        {   out.print(": ");
            int n=0;
            for (Access ac: getSuperInterfaceList()) 
            {   if (n>0) { out.print(","); }
                ac.generateCS(out);
                n++;
            }           
        }
        
        out.println();
        out.println("{");
        out.increaseIndent();
        
        boolean needstatic = false;
        for (BodyDecl bd:getBodyDeclList()) 
        {   if (bd.isField()) 
            {   needstatic = true;
            } 
            else if (bd instanceof MethodDecl) 
            {   MethodDecl md = (MethodDecl) bd;
               if (md.getBlock()!=null) 
               {   needstatic = true;
                   if (md.isDefault()) md.generateCS(out,true,null); 
               }
               else 
               {   md.generateCS(out);
               }
            }
        }

        out.decreaseIndent();
        out.print("}");
        if (haspackage) { out.print("}"); }     
        out.println();
                
        // add special class for static fields and static/default methods 
        if (needstatic) 
        {   if (haspackage) {
                out.print("namespace ");
                generatePackageNameCS(out);
                out.print(" { ");
            }
            out.print("public static class ");
            out.printIdentifier(uniqueName());
            out.println("_c ");
            out.println("{");
            out.increaseIndent();
            
            for (BodyDecl bd:getBodyDeclList()) 
            {   if (bd.isField()) 
                {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                    {   if (fd.isStatic()) 
                        {   out.print("public static ");
                            fd.getTypeAccess().generateCS(out);
                            out.print(" ");                             
                            out.printIdentifier(fd.getID(),"_f");
                            out.print(" = ");
                            fd.getInit().generateUsingResultCS(out);
                            out.println(";");     
                        }
                    }
                } 
                else if (bd instanceof MethodDecl) 
                {   MethodDecl md = (MethodDecl) bd;
                    if (md.getBlock()!=null) 
                    {   md.generateCS(out);
                    }
                }               
            }   
            
            generateDimsCS(out);
                        
            out.decreaseIndent();
            out.print("}"); 
            if (haspackage) { out.print("}"); }     
            out.println();                      
        }       
    }  

    public void ReferenceType.generateDimsCS(CodePrinterCS out)
    {
        HashMap<Object,int[]> m = out.retrieveDims();
        for (Object en:m.keySet()) 
        {   TypeDecl type = (TypeDecl) en;
            int[] id_and_depth = m.get(type);

            for (int d=5; d<=id_and_depth[1]; d++) 
            {   out.print("private static ");
                type.generateNameCS(out);
                for (int i=0; i<d; i++) { out.print("[]"); }
                out.print(" _dim"+id_and_depth[0]+"(");
                for (int i=0; i<d; i++) 
                {   if (i>0) { out.print(", "); }
                    out.print("int n"+i);
                }
                out.println(")");
                out.println("{");
                out.increaseIndent();
                type.generateNameCS(out);
                for (int i=0; i<d; i++) { out.print("[]"); }
                out.print(" a = new ");
                type.generateNameCS(out);
                out.print("[n0]");
                for (int i=1; i<d; i++) { out.print("[]"); }
                out.println(";");
                out.print("for (int i0=0; n1>=0 && i0<n0; i0++)");
                out.println();
                out.println("{");
                out.increaseIndent();
                out.print("a[i0] = ");
                if (d<=5) 
                {   out.print("SYSTEM.dim<");
                    type.generateNameCS(out);
                    out.print(">");
                } 
                else 
                {   out.print("_dim"+id_and_depth[0]);
                }
                out.print("(");
                for (int i=1; i<d; i++) 
                {   if (i>1) { out.print(", "); }
                    out.print("n"+i);
                }
                out.print(")");
                out.println(";");
                out.decreaseIndent();
                out.println("}");
                out.println("return a;");
                out.decreaseIndent();
                out.println("}");
            }
        }
    } 



    public void ConstructorDecl.generateCS(CodePrinterCS out) 
    {   
        // decide if all the fields have to be initialized right here   
        boolean needsInit = true;           
        if (hasConstructorInvocation()) 
        {   Stmt stmt = getConstructorInvocation();
            if (stmt instanceof ExprStmt) 
            {   ExprStmt exprStmt = (ExprStmt) stmt;
                Expr expr = exprStmt.getExpr();
                if (!expr.isSuperConstructorAccess()) 
                {   needsInit = false;
                }
            }
        }       
        
        Collection<Variable>encvar = hostType().enclosingVariables();
        boolean needouter = hostType().needsEnclosing();
        int numpar = getNumParameter();
                
        out.print("public ");       
        out.printIdentifier(hostType().uniqueName());
        out.print("(");         
        // pass reference to the enclosing object 
        if (needouter) 
        {   hostType().enclosingType().generateNameCS(out);
            out.print(" _o");
        }
        // pass accessible local variables of constructing method
        int countencvar=0;
        for (Variable v:encvar) 
        {   if (countencvar>0 || needouter) { out.print(","); }
            v.type().generateNameCS(out);
            out.print(" ");
            out.printIdentifier(v.name(),"_o");   
            countencvar++;
        }
        for (int i=0; i<numpar; i++) 
        {   if (i>0 || needouter || encvar.size()>0) { out.print(","); }
            getParameter(i).getTypeAccess().generateCS(out);
            if (i==numpar-1 && isVariableArity()) 
            {   out.print("[]");
            } 
            out.print(" ");
            out.printIdentifier(getParameter(i).name());
        }
        out.print(")");
        out.print(":");
        
        // intentionally no post-processing
        ((ExprStmt)getConstructorInvocation()).getExpr().generateCS(out);   
                                                    
        out.println();
        out.println("{");         
        out.increaseIndent();
        
        // when a super-constructor is called, the initialization of everything that belongs
        // to this class itself needs to be done here
        // if calling a constructor of this, do not initialize all variables twice      
        if (needsInit) 
        {   if (needouter && !((ClassDecl)hostType()).superclass().needsEnclosing()) 
            {   out.println("this._o = _o;");
            }           
            for (Variable v:encvar) 
            {   out.print("this.");
                out.printIdentifier(v.name(),"_o");
                out.print(" = ");   
                out.printIdentifier(v.name(),"_o");
                out.println(";");
            }
            
            // do all field initializations
            for (BodyDecl bd:hostType().getBodyDeclList()) 
            {   if (bd.isField()) 
                {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                    {   if (!fd.isStatic() && fd.getInit()!=null) 
                        {   out.print("this.");
                            out.printIdentifier(fd.getID(), "_f");
                            out.print(" = ");
                            fd.getInit().generateUsingResultCS(out);
                            out.println(";");                     
                        }
                    }
                }
                else if (bd instanceof InstanceInitializer) 
                {   bd.generateCS(out);
                }
            }
        }
        
        // build body of constructor
        Block block = getBlock();
        int n = block.getNumStmt();
        for (int i=0; i<n; i++) 
        {   Stmt stmt = block.getStmt(i);
            stmt.generateCS(out);
        }
        out.decreaseIndent();
        out.println("}");
    }

//  public void EnumConstant.generateCS(CodePrinterCS out) 
//    {
//  }

    public void InstanceInitializer.generateCS(CodePrinterCS out) 
    {
        getBlock().generateCS(out); 
    }
//  public void FieldDecl.generateCS(CodePrinterCS out) 
//  {
//  }
//  public void MemberClassDecl.generateCS(CodePrinterCS out) 
//  {
//  }
//  public void MemberInterfaceDecl.generateCS(CodePrinterCS out) 
//  {
//  }

    public void MethodDecl.generateCS(CodePrinterCS out) 
    {
        generateCS(out,false,null);
    }    
    public void MethodDecl.generateCS(CodePrinterCS out, boolean omitbody, Access overwritereturntype) 
    {
        boolean isinterfaceextension = false;
        // perform some checks for class methods
        if (hostType().isClassDecl())
        {   if (isStatic()) 
            {   // test if this method shadows a static super method
                boolean isoverriding = false;
                ClassDecl c = (ClassDecl)(hostType());
                while (!c.isObject()) 
                {   c = (ClassDecl) (c.superclass());
                    for (BodyDecl b : c.methodsAndConstructors()) 
                    {   if 
                        (   b instanceof MethodDecl && ((MethodDecl)b).isStatic() 
                            && signature().equals(((MethodDecl)b).signature()) 
                        ) 
                        { isoverriding = true; }
                    }                                  
                }                    
                out.print("public static ");     
                if (isoverriding) { out.print("new "); }                                         
            } 
            else 
            {   // test if this method overrides a super method
                boolean isoverriding = false;
                ClassDecl c = (ClassDecl)(hostType());
                while (!c.isObject()) 
                {   c = (ClassDecl) (c.superclass());
                    for (BodyDecl b : c.methodsAndConstructors()) 
                    {   if (b instanceof MethodDecl && overrides((MethodDecl)b) ) 
                        {   isoverriding = true;
                        }
                    }                                 
                }                    
                out.print("public ");
                out.print(isoverriding ? "override " : (isAbstract() ? "abstract ":"virtual "));             
            }       
        }
        // perform some checks for interface methods
        else
        {   if (getBlock()!=null && !omitbody)   // static or default interface method
            {   out.print("public static ");
                isinterfaceextension = isDefault();
            }       
        }
        
        if (overwritereturntype!=null)
        {   overwritereturntype.generateCS(out);
        }
        else
        {   getTypeAccess().generateCS(out);
        }
        out.print(" ");
        out.printCSMethodName(name(), isStatic());
        out.print("(");
        if (isinterfaceextension) 
        {   hostType().generateNameCS(out);
            out.print(" @this");
        }
        int numpar = getNumParameter();
        for (int i=0; i<numpar; i++) 
        {   if (i>0 || isinterfaceextension) { out.print(", "); }
            getParameter(i).getTypeAccess().generateCS(out);
            if (i==numpar-1 && isVariableArity()) 
            {   out.print("[]");
            } 
            out.print(" ");
            out.printIdentifier(getParameter(i).name());
        }
        out.print(")");
        
        if (getBlock()!=null && !omitbody) 
        {   out.println();          
            getBlock().generateCS(out);
        } 
        else
        {   out.println(";");
        }
    }

    public void StaticInitializer.generateCS(CodePrinterCS out) 
    {   
        getBlock().generateCS(out);
    }

    
    /**
     * Do not generate code for the TypeDecl itself, but only for its name to be 
     * referenced from other places.
     */
    public void TypeDecl.generateNameCS(CodePrinterCS out) 
    {
        if (isPrimitiveType()) 
        {   if (isInt()) { out.print("int"); }
            else if (isByte()) { out.print("sbyte"); }
            else if (isShort()) { out.print("short"); }
            else if (isChar()) { out.print("char"); } 
            else if (isBoolean()) { out.print("bool"); }
            else if (isDouble()) { out.print("double"); }
            else 
            {   throw new RuntimeException("Type not supported:"+fullName());
            }
        } 
        else if (isVoid()) 
        {   out.print("void");
        } 
        else if (isArrayDecl()) 
        {   elementType().generateNameCS(out);
            for (int i=dimension(); i>0; i--) 
            {   out.print("[]");
            }
        } 
        else 
        {   TypeDecl erased = erasure();
            String s = erased.packageName()+"."+erased.uniqueName();
            if (s.equals("java.lang.String")) { out.print("System.String"); }
            else if (s.equals("java.lang.Object")) { out.print("System.Object"); }
            else if (s.equals("java.lang.System")) { out.print("java.lang.SYSTEM"); }
            else if (s.equals("java.lang.CharSequence")) { out.print("System.Object"); }
            else
            {   StringTokenizer t = new StringTokenizer(s,".");
                for (int i=0; t.hasMoreElements(); i++) 
                {   if (i>0) { out.print("."); }
                    out.printIdentifier(t.nextToken());
                }
            }
        }
    }
    public void ReferenceType.generatePackageNameCS(CodePrinterCS out) 
    {
        StringTokenizer t = new StringTokenizer(erasure().packageName(),".");
        for (int i=0; t.hasMoreElements(); i++) 
        {   if (i>0) { out.print("."); }
            out.printIdentifier(t.nextToken());
        }
    }

        
    public void Constant.generateCS(CodePrinterCS out) 
    {
        if (this instanceof ConstantBoolean) 
        {   out.print(booleanValue()?"true":"false");
        } 
        else if (this instanceof ConstantChar) 
        {   out.print("'");
            generateCharacterCS(out, (char) intValue());
            out.print("'");
        } 
        else if (this instanceof ConstantDouble) 
        {   double d = doubleValue();
            if (Double.isNaN(d)) 
            {   out.print("System.Double.NaN");
            } 
            else if (Double.isInfinite(d)) 
            {   if (d>0) { out.print("System.Double.PositiveInfinity"); }
                else     { out.print("System.Double.NegativeInfinity"); }
            } 
            else 
            {   out.print(""+d);
            }
        } 
        else if (this instanceof ConstantInt) 
        {   out.print(""+intValue());
        }
        else if (this instanceof ConstantString) 
        {   String s = stringValue();
            out.print("\"");
            for (int i=0; i<s.length(); i++)
            {  generateCharacterCS(out,s.charAt(i));
            }
            out.print("\"");   
        }
    }      
    private static void Constant.generateCharacterCS(CodePrinterCS out, char c) 
    {
        switch(c) 
        {   case '\b':  { out.print("\\b"); break; }
            case '\f':  { out.print("\\f"); break; }
            case '\n':  { out.print("\\n"); break; }
            case '\r':  { out.print("\\r"); break; }
            case '\t':  { out.print("\\t"); break; }
            case '\\':  { out.print("\\\\"); break; }
            case '"':   { out.print("\\\""); break; }              
            case '\'':  { out.print("\\'"); break; }              
            default: 
            {   if (c>=32 && c<=126) 
                {   out.print(""+c);
                } 
                else
                {   String hx = Integer.toHexString((int)c);
                    out.print("\\u");
                    for (int j=hx.length(); j<4; j++) 
                    {   out.print("0");
                    } 
                    out.print(hx);
                }
                break;
            }
        } 
    }           
     
}

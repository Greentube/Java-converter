aspect GenerateJS {
 
 	// --- Access --- 
 	
  	public void AbstractDot.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		Access a = getRight();
  		if (! (a instanceof ClassInstanceExpr)) {
  			getLeft().generateJS(out);
  		}
  		a.generateJS(out);
 	}
//  	public void Wildcard.generateJS(com.greentube.javaconverter.CodePrinter out) {
// 	}
//  	public void WildcardExtends.generateJS(com.greentube.javaconverter.CodePrinter out) {
// 	}
//  	public void WildcardSuper.generateJS(com.greentube.javaconverter.CodePrinter out) {
// 	}
  	public void ArrayAccess.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("[");
  		getExpr().generateJS(out);
  		out.print("]");
 	}
//  	public void ClassAccess.generateJS(com.greentube.javaconverter.CodePrinter out) {
// 	}
  	public void ClassInstanceExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
		int n = getNumArg();
  		out.print("(new ");
  		out.printAndMemorizeReference(type().constantPoolName());
		out.print("(");  		
		if (isRightChildOfDot()) {
			prevExpr().generateJS(out);
  		} else if (type().isNestedType()) {
  			out.print("this");
  		}
  		out.print("))._"+n+"(");
  		for (int i=0; i<n; i++) {
			if (i>0) out.print(",");
			getArg(i).generateJS(out);  		
  		}
  		out.print(")");
  		
  		// check if this is inside a static initializer - must force early loading of created class
  		if (enclosingBodyDecl().isField()) {
  			out.memorizeComplete(type().constantPoolName());
  		}
 	}
  	public void ConstructorAccess.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		String target = decl().hostType().constantPoolName();
  		if (!target.equals("java/lang/Object")) {
			out.println();
			out.printAndMemorizeReference(target);
			out.print(".prototype._" + getNumArg() + ".call(this");
			for (int i=0; i<getNumArg(); i++) {
  				out.print(",");
 				getArg(i).generateJS(out);  			
			}
			out.print(");");
		}
 	}
 	
//  	public void DiamondAccess.generateJS(com.greentube.javaconverter.CodePrinter out) {
// 	}
  	public void MethodAccess.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		MethodDecl m = decl();
  		
  		if (m.isStatic()) {
  			String target = m.hostType().constantPoolName();
  			out.printAndMemorizeReference(target);
  			out.print(".prototype."+m.name()+"_"+m.getNumParameter()+"(");

	  		// check if this is inside a static initializer - must force early loading of accessed class
	  		BodyDecl bd = enclosingBodyDecl();
  			if (bd.isField() || (bd instanceof StaticInitializer)) {
  				out.memorizeComplete(target);
  			}
  			
  		} else if (!isRightChildOfDot()) {
			out.print("this.");
			TypeDecl t = hostType();
			if (t!=m.hostType() && t.isInnerTypeOf(m.hostType())) {
				while (t!=m.hostType()) {			
					out.print("outer.");
					t = t.enclosingType();
				}
			}  		
  			out.print(m.name()+"_"+m.getNumParameter()+"(");
  			
  		} else if (prevExpr().isSuperAccess()) {
			out.print("."+m.name()+"_"+m.getNumParameter()+".call(this");
  			if (m.getNumParameter()>0) out.print(",");
  			
  		} else {
  			out.print("."+m.name()+"_"+m.getNumParameter()+"(");
  		}

		// check if this is a method with variable number of parameters - must 
		// package last arguments into array
		int pararraystart=-1;
		if (m.isVariableArity()) {		
			if (getNumArg()==m.getNumParameter() 
			 && getArg(getNumArg()-1).type()==m.getParameter(getNumArg()-1).type() ) {
			 	// the call uses an explicit array already - no implicit array creation needed
			} else {
				pararraystart = m.getNumParameter()-1;
			}
  		}
  		// generate parameters and inject one '[' in the correct position
  		for (int i=0; i<getNumArg(); i++) {
  			if (i>0) out.print(",");
  			if (pararraystart==i) out.print("[");
  			getArg(i).generateJS(out);
  		}
  		if (pararraystart>=0) {
  			if (pararraystart>=getNumArg()) out.print(pararraystart>0 ? ",[" : "[");
  			out.print("]");
  		}
  		out.print(")");  	
 	}
//  	public void PackageAccess.generateJS(com.greentube.javaconverter.CodePrinter out) {
// 	}
//  	public void ParseName.generateJS(com.greentube.javaconverter.CodePrinter out) {
// 	}
  	public void SuperAccess.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.printAndMemorizeReference(type().constantPoolName());
  		out.print(".prototype");
 	}
  	public void ThisAccess.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("this");
 	}
  	public void TypeAccess.generateJS(com.greentube.javaconverter.CodePrinter out) {
 	}
  	public void ArrayTypeAccess.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getAccess().generateJS(out);
	}
  	public void ArrayTypeWithSizeAccess.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getAccess().generateJS(out);
  		getExpr().generateJS(out);
  		out.print(",");
	}   	

  	public void VarAccess.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		Variable v = varDecl();
  		if (v.isClassVariable()) {
  			String target = v.hostType().constantPoolName();
			out.printAndMemorizeReference(target);  		
  			out.print(".prototype."+getID()+"_f");  
  			// check if this is inside a static initializer - must force early loading of accessed class
	  		BodyDecl bd = enclosingBodyDecl();
  			if (bd.isField() || (bd instanceof StaticInitializer)) {
  				out.memorizeComplete(target);
  			}  		  						  			
  		} else if (v.isInstanceVariable()) {
			if (isRightChildOfDot()) {
				out.print(".");
			} else {
				out.print("this.");
				TypeDecl t = hostType();
				if (t!=v.hostType() && t.isInnerTypeOf(v.hostType())) {
					while (t!=v.hostType()) {			
						out.print("outer.");
						t = t.enclosingType();
					}
				}  		
  			}  		
			out.print(getID()+"_f");
  		} else if (v.isLocalVariable() || v.isParameter()) {  
  			if (v.hostType() == hostType()) {		
				out.printLocalVariable(getID());
			} else {
				throw new RuntimeException("Can not access local variables of outer class method");
			}
  		} else {
  			// this fits in no other category - maybe the 'length' attribute of arrays 
			out.print("."+getID());
  		}  		
 	}
  	
  	// --- ArrayInit ---
  	
  	public void ArrayInit.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("[");
  		for (int i=0; i<getNumInit(); i++) {
  			if (i>0) out.print(",");
  			getInit(i).generateJS(out);
  		}
  		out.print("]");
  	}
  	
  	// --- AssignExpr ---

  	public void AssignMinusExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateJS(out);
  		out.print(" -= ");
  		getSource().generateJS(out);
  	}
  	public void AssignPlusExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		// do some case discrimination if this is a string concatenation
  		Expr d = getDest();
  		Expr s = getSource();
  		if (type().isString()) {
  			d.generateJS(out);
  			out.print(" += \"\"+");
  			if (s.type().isChar()) {
  				out.print("_c2s(");
  				s.generateJS(out);
  				out.print(")");
  			} else {
  				s.generateJS(out);
  			}
  		} else {
	  		d.generateJS(out);
  			out.print(" += ");
  			s.generateJS(out);
  		}
  	}
  	public void AssignAndExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateJS(out);
  		out.print(" &= ");
  		getSource().generateJS(out);
  	}
  	public void AssignOrExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateJS(out);
  		out.print(" |= ");
  		getSource().generateJS(out);
  	}
  	public void AssignXorExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateJS(out);
  		out.print(" ^= ");
  		getSource().generateJS(out);
  	}
  	public void AssignDivExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateJS(out);
  		out.print(" /= ");
  		getSource().generateJS(out);
  	}
  	public void AssignModExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateJS(out);
  		out.print(" %= ");
  		getSource().generateJS(out);
  	}
  	public void AssignMulExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateJS(out);
  		out.print(" *= ");
  		getSource().generateJS(out);
  	}
  	public void AssignLShiftExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateJS(out);
  		out.print(" <<= ");
  		getSource().generateJS(out);
  	}
  	public void AssignRShiftExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateJS(out);
  		out.print(" >>= ");
  		getSource().generateJS(out);
  	}
  	public void AssignURShiftExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateJS(out);
  		out.print(" >>>= ");
  		getSource().generateJS(out);
  	}
  	public void AssignSimpleExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateJS(out);
  		out.print(" = ");
  		getSource().generateJS(out);
  	}
  	  	
  	// --- Binary ---

  	public void AddExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		// do some case discrimination if this is a string concatenation
  		Expr l = getLeftOperand();
  		Expr r = getRightOperand();
  		if (type().isString()) {
  			if (l.type().isChar()) {
  				out.print("_c2s(");
  				l.generateJS(out);
  				out.print(")");
  			} else {
  				l.generateJS(out);
  			}
  			out.print("+\"\"+");
  			if (r.type().isChar()) {
  				out.print("_c2s(");
  				r.generateJS(out);
  				out.print(")");
  			} else {
  				r.generateJS(out);
  			}
  		} else {
	  		l.generateJS(out);
  			out.print(" + ");
  			r.generateJS(out);
  		}
  	}
  	public void SubExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" - ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void DivExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
		TypeDecl t = type();
		if (t.isFloat() || t.isDouble()) {
	  		getLeftOperand().generateJS(out);
  			out.print(" / ");
  			getRightOperand().generateJS(out);
  		} else {  	
			out.print("_divideInteger(");
	  		getLeftOperand().generateJS(out);
  			out.print(",");
  			getRightOperand().generateJS(out);
			out.print(")");
  		}
  	}
  	public void ModExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" % ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void MulExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" * ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void AndBitwiseExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" & ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void OrBitwiseExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" | ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void XorBitwiseExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" ^ ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void AndLogicalExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" && ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void OrLogicalExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" || ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void EQExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" === ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void NEExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" != ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void GEExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" >= ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void GTExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" > ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void LEExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" <= ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void LTExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" < ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void LShiftExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" << ");
  		getRightOperand().generateJS(out);

  	}
  	public void RShiftExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" >> ");
  		getRightOperand().generateJS(out);  	
  	}
  	public void URShiftExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateJS(out);
  		out.print(" >>> ");
  		getRightOperand().generateJS(out);  	
  	}
  	
  	
  	// --- CastExpr ---
  	
  	public void CastExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
		TypeDecl t = type();
		if (t.isPrimitiveType()) {
			if (t.isByte()) { 
				out.print("_castTObyte(");
				getExpr().generateJS(out);
				out.print(")");
			} else if (t.isChar()) {
				out.print("_castTOchar(");
				getExpr().generateJS(out);
				out.print(")");
			} else if (t.isInt()) {
				out.print("_castTOint(");
				getExpr().generateJS(out);
				out.print(")");
			} else if (t.isDouble()) {
				getExpr().generateJS(out);
			} else {
				throw new RuntimeException("Type not supported:"+t.fullName());
			}
		} else {
  			getExpr().generateJS(out);
  		}
  	}
  	
  	// --- ConditionalExpr ---
  	
  	public void ConditionalExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getCondition().generateJS(out);
  		out.print("?");
  		getTrueExpr().generateJS(out);
  		out.print(":");
  		getFalseExpr().generateJS(out);
  	}
  	
  	// --- InstanceOfExpr ---

  	public void InstanceOfExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  	  	TypeDecl t = getTypeAccess().type();
  	  	if (t.isArrayDecl()) {
//  	  		out.error("Can not create type check for array types");
// 	  		out.print("false");
	  		out.print("(_denullify(");
  			getExpr().generateJS(out);
  			out.print(")._is_Array)");
  	  	} else if (!t.isReferenceType()) {
  	  		out.print("false");
  	  		throw new RuntimeException("Can not create type check for primitive types");
  	  	} else {
	  		out.print("(_denullify(");
  			getExpr().generateJS(out);
  			out.print(").");
	  		out.print("_is_");
	  		out.printAndMemorizeReference(t.constantPoolName());
  			out.print(")");
  		}
  	}
  	
  	// --- PrimaryExpr ---
  	
  	public void ArrayCreationExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		if (hasArrayInit()) {
  			getArrayInit().generateJS(out);
  		} else {
  			Access ta = getTypeAccess();
	  		out.print("_createArray(");  		
			ta.generateJS(out);
			
			if ((ta instanceof ArrayTypeWithSizeAccess) 
			 && ta.type().elementType().isPrimitiveType()) { 
				out.print("0");
			} else {
				out.print("null");
			}								
			out.print(")");  		
  		}
  	}
  	public void BooleanLiteral.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(isTrue()?"true":"false");
  	}
  	public void CharacterLiteral.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(""+constant().intValue());	
  	}
//  	public void IllegalLiteral.generateJS(com.greentube.javaconverter.CodePrinter out) {
//  	}
  	public void NullLiteral.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("null");
  	}
  	public void DoubleLiteral.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(""+constant().doubleValue());	
  	}
  	public void IntegerLiteral.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(""+constant().intValue());	
  	}
  	public void StringLiteral.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		String v = constant().stringValue();
  		out.print("\"");
  		for (int i=0; i<v.length(); i++) {
  			char c = v.charAt(i);
  			switch(c) {
  			case '\b': 	out.print("\\b");
  						break;
  			case '\f':  out.print("\\f");	
  			            break;
  			case '\n':  out.print("\\n"); 
  			            break;
  			case '\r':  out.print("\\r");
  			            break;
  			case '\t':  out.print("\\t");
  			            break;
  			case '\\':  out.print("\\\\");
  			            break;
  			case '"':   out.print("\\\"");
  			            break;  			
  			default: 
  				if (c>=32 && c<=126) {
  				 	out.print(""+c);
  				} else {
  					String hx = Integer.toHexString((int)c);
  					out.print("\\u");
  					for (int j=hx.length(); j<4; j++) {
  						out.print("0");
  					} 
  					out.print(hx);
  				}
  				break;
  			}
  		}
  		out.print("\"");
  		
  		// check if this is inside a static initializer - must force early loading of created class
  		BodyDecl bd = enclosingBodyDecl();
		if (bd.isField() || (bd instanceof StaticInitializer)) {
  			out.memorizeComplete("java/lang/String");
  		}  		
  	}
  	public void ParExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("(");
  		getExpr().generateJS(out);
  		out.print(")");
  	}

  	
  	// --- Unary ---
  	public void BitNotExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(" ~ ");
  		getOperand().generateJS(out);  	
  	}
  	public void LogNotExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(" ! ");
  		getOperand().generateJS(out);  	
  	}
  	public void MinusExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(" - ");
  		getOperand().generateJS(out);  	
  	}
  	public void PlusExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(" + ");    
  		getOperand().generateJS(out);  	
  	}
  	public void PostDecExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getOperand().generateJS(out);  	
  		out.print(" -- ");    
  	}
  	public void PostIncExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		getOperand().generateJS(out);  	
  		out.print(" ++ ");    
  	}
  	public void PreDecExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(" -- ");    
  		getOperand().generateJS(out);  	
  	}
  	public void PreIncExpr.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(" ++ ");    
  		getOperand().generateJS(out);  	
  	}
  	
}


/**
 * Implement the javascript code generation for all Expr nodes.
 */

import com.greentube.javaconverter.CodePrinterJS;

aspect GenerateJS 
{
    /**
     * This code generation of expressions is used when the result of the expression
     * is actually used for further operation, as opposed to be just thrown away
     * (after a method call for example).
     * Some subtypes of Expr can also do additional optimizations in these cases.
     */
    public void Expr.generateUsingResultJS(CodePrinterJS out) 
    {   
        if (isConstant() && !type().isEnumDecl()) 
        {   constant().generateJS(out);                     
        } else 
        {   generateJS(out);
        }
    }

     
    // --- Access --- 
    
    public void Dot.generateJS(CodePrinterJS out) 
    {
        // search down the tree to find the end of the Dot sequence
        Access a = getRight();
        while (a instanceof Dot) 
        {   a = ((Dot)a).getRight();
        }
        if (a instanceof ClassInstanceExpr) 
        {   // do not generate enclosing instance expression here - must be done by constructor
        } 
        else if 
        (   ((a instanceof MethodAccess) && ((MethodAccess)a).decl().isStatic())
        ||  ((a instanceof VarAccess) && ((VarAccess)a).decl().isStatic())
        )
        {   // do not generate instance expression when accessing static field
        } 
        else 
        {   // generate everything from begin
            a = this;
            while (a instanceof Dot) 
            {   ((Dot)a).getLeft().generateJS(out);
                a = ((Dot)a).getRight();
            }
        }
          
        a.generateJS(out);
    }    
    public void Dot.generateExcludingRightmostJS(CodePrinterJS out) 
    {
       Access a = this;
       while (a instanceof Dot) 
       {   ((Dot)a).getLeft().generateJS(out);
           a = ((Dot)a).getRight();
       }
    }    
    public Access Dot.findRightmostAccess()
    {   
        Access a = getRight();
        while (a instanceof Dot) 
        {   a = ((Dot)a).getRight();
        }
        return a;    
    }
    
//  public void Wildcard.generateJS(CodePrinterJS out) 
//  {
//  }
//  public void WildcardExtends.generateJS(CodePrinterJS out) 
//  {
//  }
//  public void WildcardSuper.generateJS(CodePrinterJS out) 
//  {
//  }
    public void ArrayAccess.generateJS(CodePrinterJS out) 
    {
        out.print("[");
        getExpr().generateUsingResultJS(out);
        out.print("]");
    }
//  public void ClassAccess.generateJS(CodePrinterJS out) 
//  {
//  }
    public void ClassInstanceExpr.generateJS(CodePrinterJS out) 
    {   
        if (transformed()!=this)
        {   transformed().generateJS(out);
            return;
        }
        // special construction of string objects
        if (type().isString()) 
        {   out.print(getNumArg()<=1 ? "_array2str" : "_subarray2str");
            out.print("(");
            for (int i=0; i<getNumArg(); i++) 
            {   if (i>0) { out.print(","); }
                getArg(i).generateUsingResultJS(out);
            }
            out.print(")");
            return;
        }

        boolean foundpar=false;
        out.print("(new ");
        out.printAndMemorizeReference(type().packageName(), type().uniqueName());
        out.print("(");
        if (isRightChildOfDot()) 
        {   prevExpr().generateJS(out);
            foundpar=true;
        }
        else if (type().needsEnclosing()) 
        {   out.print("this");
            foundpar=true;
        }
        for (Variable v:type().enclosingVariables()) 
        {   if (foundpar) { out.print(","); }
            out.printJSIdentifier(v.name());
            foundpar=true;
        }        
        out.print("))");

        ConstructorDecl m = decl();
        out.print("._"+m.getNumParameter()+"(");        
        for (int i=0; i<getNumArg(); i++) 
        {   if (i>0) { out.print(","); }
            getArg(i).generateUsingResultJS(out);
        }
        out.print(")");

        // check if this is inside a static initializer - must force early loading of created class
        if (enclosingBodyDecl().isField()) 
        {   out.memorizeComplete(type().packageName(),type().uniqueName());
        }
    }
    public void ConstructorAccess.generateJS(CodePrinterJS out) 
    {   
        if (transformed()!=this)
        {   transformed().generateJS(out);
            return;
        }

        TypeDecl ht = decl().hostType();
        out.printAndMemorizeReference(ht.packageName(), ht.uniqueName());

        ConstructorDecl m = decl();
        out.print(".prototype._" + m.getNumParameter() + ".call(this");
        for (int i=0; i<getNumArg(); i++) 
        {   out.print(",");
            getArg(i).generateUsingResultJS(out);
        }
        out.print(")");
    }

//  public void DiamondAccess.generateJS(CodePrinterJS out) {
//
//  }
    public void MethodAccess.generateJS(CodePrinterJS out) 
    {   
        if (transformed()!=this)
        {   transformed().generateJS(out);
            return;
        }

        MethodDecl m = decl();
        if (m.isStatic()) 
        {   TypeDecl t = m.hostType();
            String tname = t.uniqueName();
            String n = m.name();
            if (t.packageName().equals("java.lang") && (t.uniqueName().equals("Math") || t.uniqueName().equals("System"))) 
            {   // special handling of the Math.abs method            
                if (n.equals("abs") && m.type().isInt()) 
                {   n = "absInt";
                }
                // special handling of the Math.round and System.currentTimeMillis methods
                else if (m.type().isLong())      
                {   Expr parentexp = (Expr) getParent();
                    while ((parentexp instanceof Dot) && (parentexp.getParent() instanceof Expr)) 
                    {   parentexp = (Expr) parentexp.getParent();
                    }
                    n = n + (parentexp.type().isInt() ? "AsInt" : "AsDouble"); 
                }
            }
            
            out.printAndMemorizeReference(t.packageName(),tname);            
            out.print("_");
            out.printJSIdentifier(n,"_"+m.getNumParameter());
            out.print("(");

            // check if this is inside a static initializer - 
            //must force early loading of accessed class
            BodyDecl bd = enclosingBodyDecl();
            if (bd.isField() || (bd instanceof StaticInitializer)) 
            {   out.memorizeComplete(t.packageName(),t.uniqueName());
            }
        } 
        else if (!isRightChildOfDot()) 
        {   out.print("this.");
            TypeDecl t = hostType();
            if (t!=m.hostType() && t.isInnerTypeOf(m.hostType())) 
            {   while (t!=m.hostType()) 
                {   out.print("_o.");
                    t = t.enclosingType();
                }
            }
            out.printJSIdentifier(m.name(),"_"+m.getNumParameter());
            out.print("(");
        }
        else if (prevExpr().isSuperAccess()) 
        {   out.printAndMemorizeReference(m.hostType().packageName(),m.hostType().uniqueName());
            out.print(".prototype.");         
            out.printJSIdentifier(m.name(),"_"+m.getNumParameter());
            out.print(".call(this");
            if (m.getNumParameter()>0) out.print(",");
        }
        else
        {   out.print(".");
            out.printJSIdentifier(m.name(),"_"+m.getNumParameter());
            out.print("(");
        }

        // generate parameters 
        for (int i=0; i<getNumArg(); i++) 
        {   if (i>0) { out.print(","); }
            // do necessary data conversion for some built-in methods 
            // to clarify the use of a char instead of a int 
            TypeDecl ht = m.hostType();
            String tn = ht.packageName() + "." + ht.uniqueName();
            if 
            (   i==0 && getNumArg()==1 && 
                (   (m.name().equals("append") && tn.equals("java.lang.StringBuffer"))
                    || (m.name().equals("append") && tn.equals("java.lang.StringBuilder"))
                    || (m.name().equals("print") && tn.equals("java.io.PrintStream"))
                    || (m.name().equals("println") && tn.equals("java.io.PrintStream"))
                ) 
            ) 
            {   TypeDecl at = getArg(0).type(); 
                if (at.isChar()) 
                {   out.print("_c2s(");     
                    getArg(i).generateUsingResultJS(out);
                    out.print(")");
                }
                else if (at.isDouble()) 
                {   out.print("_d2s(");     
                    getArg(i).generateUsingResultJS(out);
                    out.print(")");
                }
                else if (at.isPrimitiveType()) 
                {   out.print("_p2s(");     
                    getArg(i).generateUsingResultJS(out);
                    out.print(")");
                }
                else 
                {   getArg(i).generateUsingResultJS(out);
                }   
            } 
            // do conversion of regex parameter for the String.split method
            else if (i==0 && m.name().equals("split") && tn.equals("java.lang.String"))
            {   String ss = getArg(0).regexToSearchString();
                Constant.generateStringJS(out,ss);
            }
            else 
            {  getArg(i).generateUsingResultJS(out);
            }
        }
        out.print(")");
    }

//  public void PackageAccess.generateJS(CodePrinterJS out) 
//  {
//  }
//  public void ParseName.generateJS(CodePrinterJS out) 
//  {
//  }
    public void SuperAccess.generateJS(CodePrinterJS out) 
    {
        // do not generate anything - must be implemented by the method or variable access
    }
    public void ThisAccess.generateJS(CodePrinterJS out) 
    {
        // do not generate anything for static access - must be implemented by the method or variable access
        if (isLeftChildOfDot()) 
        {   Access n = nextAccess();
            if ((n instanceof MethodAccess) && ((MethodAccess)n).decl().isStatic()) { return; }
            if ((n instanceof VarAccess) && ((VarAccess)n).decl().isStatic()) { return; }
        }
        out.print("this");
        // check if accessing the instance of an outer class
        TypeDecl t = hostType();
        if (t!=type() && t.isInnerTypeOf(type())) 
        {   while (t!=type()) 
            {   out.print("._o");
                t = t.enclosingType();
            }
        }       
    }
    public void ArrayTypeAccess.generateJS(CodePrinterJS out) 
    {
        getAccess().generateJS(out);
    }
    public void ArrayTypeWithSizeAccess.generateJS(CodePrinterJS out) 
    {
        getAccess().generateJS(out);
        getExpr().generateJS(out);
        out.print(",");
    }       

    public void VarAccess.generateJS(CodePrinterJS out) 
    {
        Variable v = varDecl();
        if (v.isClassVariable()) 
        {   TypeDecl t = v.hostType();
            out.printAndMemorizeReference(t.packageName(),t.uniqueName());                      
            out.print("_");
            out.printJSIdentifier(getID(),"");  
            // check if this is inside a static initializer - must force early loading of accessed class
            BodyDecl bd = enclosingBodyDecl();
            if (bd.isField() || (bd instanceof StaticInitializer)) 
            {   out.memorizeComplete(t.packageName(),t.uniqueName());
            }                                           
        }
        else if (v.isInstanceVariable()) 
        {   if (!hasPrevExpr()) 
            {   out.print("this.");
                TypeDecl t = hostType();
                if (t!=v.hostType() && t.isInnerTypeOf(v.hostType())) 
                {   while (t!=v.hostType()) 
                    {
                        out.print("_o.");
                        t = t.enclosingType();
                    }
                }       
            }
            else
            {   out.print(".");
            } 
            out.printJSIdentifier(getID(),"");
        } 
        else if (v.isLocalVariable() || v.isParameter()) 
        {   if (v.hostType() == hostType()) 
            {   out.printJSIdentifier(getID(), "");
            }
            else 
            {   // this must be an access to local variable of calling method
                out.print("this.");
                out.printJSIdentifier(getID(), "_o");
            }
        }
        else if (getID().equals("length")) 
        {   out.print(".length");
        }
        else
        {   throw new RuntimeException("Unknown type of variable access");
        }       
    }
    public void TypeAccess.generateJS(CodePrinterJS out) 
    {           
    }   
    public void ParTypeAccess.generateJS(CodePrinterJS out) 
    {           
    }
    
    // --- ArrayInit ---
    
    public void ArrayInit.generateJS(CodePrinterJS out) 
    {   
        out.print("_arr(");
        type().generateElementTypeAndDimensionsJS(out);
        out.print(",");
        out.print("[");
        for (int i=0; i<getNumInit(); i++) 
        {   if (i>0) { out.print(","); }
            getInit(i).generateUsingResultJS(out);
        }
        out.print("])");
    }

    // --- AssignExpr ---

    public void AssignExpr.generateWithNativeOperatorJS(CodePrinterJS out, String operator)
    {
        getDest().generateJS(out);
        out.print(" ");
        out.print(operator);
        out.print(" ");
        getSource().generateJS(out);
    }

    public void AssignExpr.generateWithDecomposedOperatorJS(CodePrinterJS out, boolean addcast, String op)
    {
        Expr d = getDest();
        Expr s = getSource();
    
        // determine which kind of cast is needed  
        String caststart = "";
        String castend = "";
        if (addcast)
        {   if (s.type().isDouble()) 
            {   if (d.type().isByte()) { caststart="_castTObyte("; }
                else if (d.type().isChar()) { caststart="_castTOchar("; }
                else if (d.type().isShort()) { caststart="_castTOshort("; }
                else if (d.type().isInt()) { caststart="_castTOint("; }
                else { throw new RuntimeException("Can not implicitly cast to destination type"); }
                castend = ")";
            }
            else
            {   if (d.type().isByte()) { caststart="(((("; castend=")|0)<<24)>>24)"; }
                else if (d.type().isChar()) { caststart="(("; castend=")& 0xffff)"; }
                else if (d.type().isShort()) { caststart="(((("; castend=")|0)<<16)>>16)"; }
                else if (d.type().isInt()) { caststart="(("; castend=")|0)"; }
                else { throw new RuntimeException("Can not implicitly cast to destination type"); }            
            }
        }
    
        // check if need to create an inner function to avoid double evaluation        
        boolean usefunction = false;
        Expr funcpar2 = null;
        if (d instanceof Dot)
        {   Access a = ((Dot)d).findRightmostAccess();
            if (a instanceof ArrayAccess)
            {   out.print("(function(a,i,x){return a[i]=");
                out.print(caststart);
                if (op.startsWith("_"))
                {   out.print(op+"(a[i],x)");
                }
                else 
                {   out.print("a[i] "+op+" x");
                }
                out.print(castend);
                out.print("})");
                usefunction = true; 
                funcpar2 = ((ArrayAccess)a).getExpr();
            }
            else if (a instanceof VarAccess && ((VarAccess)a).varDecl().isInstanceVariable())
            {   String id = out.escapeJSIdentifier(((VarAccess)a).getID(),"");
                out.print("(function(o,x){return o."+id+"=");
                out.print(caststart);
                if (op.startsWith("_"))
                {   out.print(op+"(o."+id+",x)");
                }
                else 
                {   out.print("o."+id+" "+op+" x");
                }
                out.print(castend);
                out.print("})");
                usefunction = true;                    
            }
        }
         
        // call the anonymous function
        if (usefunction)
        {   out.print("(");
            ((Dot)d).generateExcludingRightmostJS(out);
            if (funcpar2!=null) 
            {   out.print(",");
                funcpar2.generateJS(out); 
            }
            out.print(",");
            s.generateJS(out);        
            out.print(")");
        }
        // no function needed - use the operator directly
        else
        {
            d.generateJS(out);
            out.print(" = ");
            out.print(caststart);
            
            if (op.startsWith("_"))     // it is a function call  
            {   out.print(op);
                out.print("(");
                d.generateJS(out);
                out.print(",");
                s.generateJS(out);
                out.print(")");
            }
            else                        // it is an operator
            {
                out.print("((");
                d.generateJS(out); 
                out.print(")");
                out.print(op);
                out.print("(");
                s.generateJS(out);
                out.print("))");
            }
            out.print(castend);
        }
    }
    
    public void AssignMinusExpr.generateJS(CodePrinterJS out) 
    {
        if (getDest().type().isDouble())
        {   generateWithNativeOperatorJS(out, "-=");
        }
        else 
        {   generateWithDecomposedOperatorJS(out, true, "-");           
        }
    }
    public void AssignPlusExpr.generateJS(CodePrinterJS out) 
    {
        Expr d = getDest();
        Expr s = getSource();
        if (d.type().isString())
        {   d.generateJS(out);
            out.print(" += \"\"+");
            if (s.type().isChar()) 
            {   out.print("_c2s(");
                s.generateJS(out);
                out.print(")");
            } 
            else
            {   s.generateJS(out);
            }
        } 
        else if (d.type().isDouble())
        {   generateWithNativeOperatorJS(out, "+=");
        }
        else 
        {   generateWithDecomposedOperatorJS(out, true, "+");           
        }
    }
    public void AssignMulExpr.generateJS(CodePrinterJS out)
    {   
        Expr d = getDest();
        Expr s = getSource();
        if (d.type().isDouble())
        {   generateWithNativeOperatorJS(out, "*=");
        }
        // do some case discrimination if this is an int multiplication with large operands        
        else if (d.type().isInt() && s.type().isInt() && !d.hasLessThan20Bits() && !s.hasLessThan20Bits()) 
        {   generateWithDecomposedOperatorJS(out, false, "_imul");            
        }
        else
        {   generateWithDecomposedOperatorJS(out, true, "*");
        }
    }   
    public void AssignDivExpr.generateJS(CodePrinterJS out) 
    {
        Expr d = getDest();
        Expr s = getSource();
        if (d.type().isDouble())
        {   generateWithNativeOperatorJS(out, "/=");
        }
        else if (s.type().isDouble())
        {   generateWithDecomposedOperatorJS(out, true, "/");
        }
        else if (d.type().isInt())
        {   generateWithDecomposedOperatorJS(out, false, "_idiv");
        }
        else
        {   generateWithDecomposedOperatorJS(out, true, "_idiv");
        }
    }
    public void AssignModExpr.generateJS(CodePrinterJS out) 
    {
        if (getDest().type().isDouble())
        {   generateWithNativeOperatorJS(out, "%=");
        }
        else
        {   generateWithDecomposedOperatorJS(out, true, "%");
        }
    }
    
    public void AssignAndExpr.generateJS(CodePrinterJS out) 
    {
        Expr d = getDest();
        Expr s = getSource();
        if (d.type().isInt())
        {   generateWithNativeOperatorJS(out, "&=");
        }
        else if (d.type().isBoolean() && s.type().isBoolean())
        {   generateWithDecomposedOperatorJS(out, false, "_and");        
        }
        else
        {   generateWithDecomposedOperatorJS(out, true, "&");
        }
    }
    public void AssignOrExpr.generateJS(CodePrinterJS out) 
    {
        Expr d = getDest();
        Expr s = getSource();
        if (d.type().isInt())
        {   generateWithNativeOperatorJS(out, "|=");
        }
        else if (d.type().isBoolean() && s.type().isBoolean())
        {   generateWithDecomposedOperatorJS(out, false, "_or");        
        }
        else
        {   generateWithDecomposedOperatorJS(out, true, "|");
        }
    }
    public void AssignXorExpr.generateJS(CodePrinterJS out) 
    {
        Expr d = getDest();
        Expr s = getSource();
        if (d.type().isInt())
        {   generateWithNativeOperatorJS(out, "^=");
        }
        else if (d.type().isBoolean() && s.type().isBoolean())
        {   generateWithDecomposedOperatorJS(out, false, "_xor");        
        }
        else
        {   generateWithDecomposedOperatorJS(out, true, "^");
        }
    }
    public void AssignLShiftExpr.generateJS(CodePrinterJS out) 
    {
        if (getDest().type().isInt())
        {   generateWithNativeOperatorJS(out, "<<=");
        }
        else
        {   generateWithDecomposedOperatorJS(out, true, "<<");
        }
    }
    public void AssignRShiftExpr.generateJS(CodePrinterJS out) 
    {
        if (getDest().type().isInt())
        {   generateWithNativeOperatorJS(out, ">>=");
        }
        else
        {   generateWithDecomposedOperatorJS(out, true, ">>");
        }
    }
    public void AssignURShiftExpr.generateJS(CodePrinterJS out) 
    {
        if (getDest().type().isInt())
        {   generateWithNativeOperatorJS(out, ">>>=");
        }
        else
        {   generateWithDecomposedOperatorJS(out, true, ">>>");
        }
    }
    
    public void AssignSimpleExpr.generateJS(CodePrinterJS out) 
    {
        getDest().generateJS(out);
        out.print(" = ");
        getSource().generateUsingResultJS(out);
    }
        
    // --- Binary ---

    public void AddExpr.generateJS(CodePrinterJS out) 
    {
        // do some case discrimination if this is a string concatenation
        Expr l = getLeftOperand();
        Expr r = getRightOperand();
        if (type().isString()) 
        {
            if ((l.type().isString() && l.isConstant()) || (l instanceof AddExpr)) 
            {   l.generateUsingResultJS(out);
            } 
            else if (l.type().isChar()) 
            {   out.print("_c2s(");
                l.generateUsingResultJS(out);
                out.print(")");
            } 
            else if (l.type().isDouble()) 
            {   out.print("_d2s(");
                l.generateUsingResultJS(out);
                out.print(")");
            } 
            else if (l.type().isReferenceType()) 
            {   out.print("_str(");
                l.generateUsingResultJS(out);
                out.print(")");         
            } 
            else
            {   l.generateUsingResultJS(out);
            }
            out.print("+\"\"+");
            if ((r.type().isString() && r.isConstant()) || (r instanceof AddExpr)) 
            {   r.generateUsingResultJS(out);
            }
            else if (r.type().isChar()) 
            {   out.print("_c2s(");
                r.generateUsingResultJS(out);
                out.print(")");
            } 
            else if (r.type().isDouble())
            {   out.print("_d2s(");
                r.generateUsingResultJS(out);
                out.print(")");
            } 
            else if (r.type().isReferenceType()) 
            {   out.print("_str(");
                r.generateUsingResultJS(out);
                out.print(")");         
            } 
            else
            {   r.generateUsingResultJS(out);            
            }
        } 
        else if (type().isDouble()) 
        {   l.generateUsingResultJS(out);
            out.print(" + ");
            r.generateUsingResultJS(out);
        } 
        else
        {   out.print("((");
            l.generateUsingResultJS(out);
            out.print(" + ");
            r.generateUsingResultJS(out);
            out.print(")|0)");
        }
    }
    public void SubExpr.generateJS(CodePrinterJS out) 
    {
        Expr l = getLeftOperand();
        Expr r = getRightOperand();     
        if (type().isDouble()) 
        {   l.generateUsingResultJS(out);
            out.print(" - ");
            r.generateUsingResultJS(out);
        }
        else
        {   out.print("((");
            l.generateUsingResultJS(out);
            out.print(" - ");
            r.generateUsingResultJS(out);
            out.print(")|0)");
        }
    }
    public void DivExpr.generateJS(CodePrinterJS out) 
    {
        Expr l = getLeftOperand();
        Expr r = getRightOperand();     
        if (type().isDouble()) 
        {   l.generateUsingResultJS(out);
            out.print(" / ");
            r.generateUsingResultJS(out);
        } 
        else
        {   out.print("_idiv(");
            l.generateUsingResultJS(out);
            out.print(", ");
            r.generateUsingResultJS(out);
            out.print(")");
        }
    }
    public void MulExpr.generateJS(CodePrinterJS out) 
    {
        Expr l = getLeftOperand();
        Expr r = getRightOperand();     
        if (type().isDouble()) 
        {   l.generateUsingResultJS(out);
            out.print(" * ");
            r.generateUsingResultJS(out);
        }
        else if (l.hasLessThan20Bits() || r.hasLessThan20Bits()) 
        {   out.print("((");
            l.generateUsingResultJS(out);
            out.print(" * ");
            r.generateUsingResultJS(out);
            out.print(")|0)");
        }
        else
        {   out.print("_imul(");
            l.generateUsingResultJS(out);
            out.print(", ");
            r.generateUsingResultJS(out);
            out.print(")");         
        }
    }
    public void ModExpr.generateJS(CodePrinterJS out) 
    {   
        getLeftOperand().generateUsingResultJS(out);
        out.print(" % ");
        getRightOperand().generateUsingResultJS(out);
    }   
    public void AndBitwiseExpr.generateJS(CodePrinterJS out) 
    {
        Expr l = getLeftOperand();
        Expr r = getRightOperand();
        if (l.type().isBoolean() && r.type().isBoolean())
        {   out.print("_and(");
            l.generateUsingResultJS(out);
            out.print(",");        
            r.generateUsingResultJS(out);
            out.print(")");
            return;
        }
        l.generateUsingResultJS(out);
        out.print(" & ");
        r.generateUsingResultJS(out);   
    }
    public void OrBitwiseExpr.generateJS(CodePrinterJS out) 
    {
        Expr l = getLeftOperand();
        Expr r = getRightOperand();
        if (l.type().isBoolean() && r.type().isBoolean())
        {   out.print("_or(");
            l.generateUsingResultJS(out);
            out.print(",");        
            r.generateUsingResultJS(out);
            out.print(")");
            return;
        }
        getLeftOperand().generateUsingResultJS(out);
        out.print(" | ");
        getRightOperand().generateUsingResultJS(out);   
    }
    public void XorBitwiseExpr.generateJS(CodePrinterJS out) 
    {
        Expr l = getLeftOperand();
        Expr r = getRightOperand();
        if (l.type().isBoolean() && r.type().isBoolean())
        {   out.print("_xor(");
            l.generateUsingResultJS(out);
            out.print(",");        
            r.generateUsingResultJS(out);
            out.print(")");
            return;
        }
        getLeftOperand().generateUsingResultJS(out);
        out.print(" ^ ");
        getRightOperand().generateUsingResultJS(out);   
    }
    public void AndLogicalExpr.generateJS(CodePrinterJS out) 
    {
        getLeftOperand().generateUsingResultJS(out);
        out.print(" && ");
        getRightOperand().generateUsingResultJS(out);   
    }
    public void OrLogicalExpr.generateJS(CodePrinterJS out) 
    {
        getLeftOperand().generateUsingResultJS(out);
        out.print(" || ");
        getRightOperand().generateUsingResultJS(out);   
    }
    public void EQExpr.generateJS(CodePrinterJS out) 
    {
        getLeftOperand().generateUsingResultJS(out);
        out.print(" === ");
        getRightOperand().generateUsingResultJS(out);   
    }
    public void NEExpr.generateJS(CodePrinterJS out) 
    {
        getLeftOperand().generateUsingResultJS(out);
        out.print(" !== ");
        getRightOperand().generateUsingResultJS(out);   
    }
    public void GEExpr.generateJS(CodePrinterJS out) 
    {
        getLeftOperand().generateUsingResultJS(out);
        out.print(" >= ");
        getRightOperand().generateUsingResultJS(out);   
    }
    public void GTExpr.generateJS(CodePrinterJS out) 
    {
        getLeftOperand().generateUsingResultJS(out);
        out.print(" > ");
        getRightOperand().generateUsingResultJS(out);   
    }
    public void LEExpr.generateJS(CodePrinterJS out) 
    {
        getLeftOperand().generateUsingResultJS(out);
        out.print(" <= ");
        getRightOperand().generateUsingResultJS(out);   
    }
    public void LTExpr.generateJS(CodePrinterJS out) 
    {
        getLeftOperand().generateUsingResultJS(out);
        out.print(" < ");
        getRightOperand().generateUsingResultJS(out);   
    }
    public void LShiftExpr.generateJS(CodePrinterJS out) 
    {
        getLeftOperand().generateUsingResultJS(out);
        out.print(" << ");
        getRightOperand().generateUsingResultJS(out);
    }
    public void RShiftExpr.generateJS(CodePrinterJS out) 
    {
        getLeftOperand().generateUsingResultJS(out);
        out.print(" >> ");
        getRightOperand().generateUsingResultJS(out);   
    }
    public void URShiftExpr.generateJS(CodePrinterJS out) 
    {
        getLeftOperand().generateUsingResultJS(out);
        out.print(" >>> ");
        getRightOperand().generateUsingResultJS(out);   
    }
    
    
    // --- CastExpr ---
    
    public void CastExpr.generateJS(CodePrinterJS out) 
    {
        TypeDecl t = type();
        if (t.isPrimitiveType()) 
        {   TypeDecl et = getExpr().type();
            if (t.isByte()) 
            {   out.print("_castTObyte(");
                getExpr().generateUsingResultJS(out);
                out.print(")");
            } 
            else if (t.isChar()) 
            {   out.print("_castTOchar(");
                getExpr().generateUsingResultJS(out);
                out.print(")");
            } 
            else if (t.isShort()) 
            {   out.print("_castTOshort(");
                getExpr().generateUsingResultJS(out);
                out.print(")");
            } 
            else if (t.isInt()) 
            {   if (!et.isLong() && !et.isInt()) { out.print("_castTOint("); }
                getExpr().generateUsingResultJS(out);
                if (!et.isLong() && !et.isInt()) { out.print(")"); }
            } 
            else if (t.isDouble()) 
            {   getExpr().generateUsingResultJS(out);
            } 
            else
            {   throw new RuntimeException("Type not supported:"+t.fullName());
            }
        }
        else if (t.isArrayDecl()) 
        {   out.print("_checkarray(");
            getExpr().generateUsingResultJS(out);
            out.print(",");
            t.generateElementTypeAndDimensionsJS(out);
            out.print(")");
        } 
        else if (t.isInterfaceDecl()) 
        {   out.print("_checkinterface(");
            getExpr().generateUsingResultJS(out);
            out.print(",");
            out.printAndMemorizeReference(t.packageName(),t.uniqueName());
            out.print(")");
        }
        else if (t.isString())
        {   out.print("_checkstr(");
            getExpr().generateUsingResultJS(out);
            out.print(")");
        }        
        else if (t.isObject())    // no check (is ensured by compiler)  
        {   getExpr().generateUsingResultJS(out);
        }       
        else 
        {   out.print("_checkclass(");
            getExpr().generateUsingResultJS(out);
            out.print(",");
            out.printAndMemorizeReference(t.packageName(),t.uniqueName());
            out.print(")");
        }
    }
    
    // --- ConditionalExpr ---
    
    public void ConditionalExpr.generateJS(CodePrinterJS out) 
    {
        getCondition().generateUsingResultJS(out);
        out.print("?");
        getTrueExpr().generateUsingResultJS(out);
        out.print(":");
        getFalseExpr().generateUsingResultJS(out);
    }
    
    // --- InstanceOfExpr ---

    public void InstanceOfExpr.generateJS(CodePrinterJS out) 
    {
        TypeDecl t = getTypeAccess().type();
        if (t.isArrayDecl())
        {   out.print("_isarray(");
            getExpr().generateUsingResultJS(out);
            out.print(",");
            t.generateElementTypeAndDimensionsJS(out);
            out.print(")");
        }
        else if (!t.isReferenceType()) 
        {   out.print("false");
            throw new RuntimeException("Can not create type check for primitive types");
        }
        else if (t.isInterfaceDecl()) 
        {   out.print("_isinterface(");
            getExpr().generateUsingResultJS(out);
            out.print(",");
            out.printAndMemorizeReference(t.packageName(),t.uniqueName());
            out.print(")");
        }
        else if (t.isString())
        {   out.print("_isstr(");
            getExpr().generateUsingResultJS(out);
            out.print(")");
        }        
        else if (t.isObject())      
        {   
            out.print("((");
            getExpr().generateUsingResultJS(out);
            out.print(")!==null)");
        }               
        else 
        {   out.print("(");  
            getExpr().generateUsingResultJS(out);
            out.print(" instanceof ");
            out.printAndMemorizeReference(t.packageName(),t.uniqueName());
            out.print(")");
        }
    }

    // --- PrimaryExpr ---
    
    public void ArrayCreationExpr.generateJS(CodePrinterJS out) 
    {
        if (hasArrayInit()) 
        {   getArrayInit().generateJS(out);
        } 
        else
        {   Access ta = getTypeAccess();
            out.print("_dim(");
            type().generateElementTypeAndDimensionsJS(out);
            out.print(",[");
            ta.generateJS(out);
            out.print("],");
            if 
            (   (ta instanceof ArrayTypeWithSizeAccess) 
                && ta.type().elementType().isPrimitiveType()
            )
            {   out.print(ta.type().elementType().isBoolean()?"false":"0");
            } 
            else
            {   out.print("null");
            }                               
            out.print(")");         
        }
    }
    public void Literal.generateJS(CodePrinterJS out) 
    {
        constant().generateJS(out);
    }
//  public void IllegalLiteral.generateCS(CodePrinterJS out) 
//  {
//  }
    public void NullLiteral.generateJS(CodePrinterJS out) 
    {
        out.print("null");
    }
    
    public void ParExpr.generateJS(CodePrinterJS out) 
    {
        out.print("(");
        getExpr().generateJS(out);
        out.print(")");
    }
    
    // --- Unary ---
    public void BitNotExpr.generateJS(CodePrinterJS out) 
    {
        out.print(" ~ ");
        getOperand().generateUsingResultJS(out);    
    }
    public void LogNotExpr.generateJS(CodePrinterJS out) 
    {
        out.print(" ! ");
        getOperand().generateUsingResultJS(out);    
    }
    public void MinusExpr.generateJS(CodePrinterJS out) 
    {
        if (type().isDouble()) 
        {   out.print("-");
            getOperand().generateUsingResultJS(out);
        } 
        else     
        {   out.print("(-(");
            getOperand().generateUsingResultJS(out);    
            out.print(")|0)");
        }
    }
    public void PlusExpr.generateJS(CodePrinterJS out) 
    {
        getOperand().generateUsingResultJS(out);    
    }
    
    
    public void Unary.generateWithDecomposedOperatorJS(CodePrinterJS out, boolean pre, boolean inc)
    {
        Expr d = getOperand();
        boolean needresult = !(getParent() instanceof ExprStmt);
        
        // determine which cast operations is needed
        String caststart = "";
        String castend = "";
        if (d.type().isByte()) { caststart="(((("; castend=")|0)<<24)>>24)"; }
        else if (d.type().isChar()) { caststart="(("; castend=")& 0xffff)"; }
        else if (d.type().isShort()) { caststart="(((("; castend=")|0)<<16)>>16)"; }
        else if (d.type().isInt()) { caststart="(("; castend=")|0)"; }
        else { throw new RuntimeException("Can not implicitly cast to destination type"); }                    

        // check if need to create an inner function to avoid double evaluation        
        boolean usefunction = false;
        Expr funcpar2 = null;
        if (d instanceof Dot)
        {   Access a = ((Dot)d).findRightmostAccess();
            if (a instanceof ArrayAccess)
            {   out.print("(function(a,i){");
                out.print(pre ? "return a[i]=" : "var t=a[i];a[i]=");
                out.print(caststart);
                out.print(inc ? "a[i]+1" : "a[i]-1");
                out.print(castend);
                out.print(pre ? ";" : ";return t;"); 
                out.print("})");
                usefunction = true; 
                funcpar2 = ((ArrayAccess)a).getExpr();
            }
            else if (a instanceof VarAccess && ((VarAccess)a).varDecl().isInstanceVariable())
            {   String id = out.escapeJSIdentifier(((VarAccess)a).getID(),"");
                out.print("(function(o,x){");
                out.print(pre ? "return o."+id+"=" : "var t=o."+id+";o."+id+"=");
                out.print(caststart);
                out.print(inc ? "o."+id+"+1" : "o."+id+"-1");
                out.print(castend);
                out.print(pre ? ";" : ";return t;"); 
                out.print("})");
                usefunction = true;                    
            }
        }
        
        // call the anonymous function
        if (usefunction)
        {   out.print("(");
            ((Dot)d).generateExcludingRightmostJS(out);
            if (funcpar2!=null) 
            {   out.print(",");
                funcpar2.generateJS(out); 
            }
            out.print(")");
        }
        // no function was generated - perform work directly
        else
        {   if (!pre && needresult)     // call function to carry original value around the operation
            {   out.print("_1st("); 
                d.generateUsingResultJS(out);
                out.print(",");
            }       
            d.generateUsingResultJS(out);
            out.print("=");
            out.print(caststart);
            d.generateUsingResultJS(out);
            out.print(inc?" +1":" -1");
            out.print(castend);
            if (!pre && needresult)
            {   out.print(")");
            }
        }        
    }   
    public void PostDecExpr.generateJS(CodePrinterJS out) 
    {
        if (type().isDouble()) 
        {   getOperand().generateJS(out);
            out.print("--");
        }
        else
        {   generateWithDecomposedOperatorJS(out, false, false);
        }
    }
    public void PostIncExpr.generateJS(CodePrinterJS out) 
    {
        if (type().isDouble()) 
        {   getOperand().generateJS(out);
            out.print("++");
        }
        else
        {   generateWithDecomposedOperatorJS(out, false, true);
        }
    }
    public void PreDecExpr.generateJS(CodePrinterJS out) 
    {
        if (type().isDouble()) 
        {   out.print("--");
            getOperand().generateJS(out);            
        }
        else
        {   generateWithDecomposedOperatorJS(out, true, false);
        }
    }
    public void PreIncExpr.generateJS(CodePrinterJS out) 
    {
        if (type().isDouble()) 
        {   out.print("++");
            getOperand().generateJS(out);            
        }
        else
        {   generateWithDecomposedOperatorJS(out, true, true);
        }
    }   

    public void LambdaExpr.generateJS(CodePrinterJS out) 
    {    
         toClass().generateJS(out); 
    }
    public void TypeMethodReference.generateJS(CodePrinterJS out)
    {    
         toClass().generateJS(out); 
    }
    public void ExprMethodReference.generateJS(CodePrinterJS out)
    {    
         toClass().generateJS(out); 
    }
    
}


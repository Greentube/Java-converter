import java.util.ArrayList;
import com.greentube.javaconverter.CodePrinter;

aspect GenerateCS {

	
	public void Expr.generateUsingResultCS(CodePrinter out) {	
		if (isConstant() && !type().isEnumDecl()) {
			constant().generateCS(out);  		
  		} else {  		
			TypeDecl t = neededDownCast();
			if (t==null) {  		  		
  				generateCS(out);
  			} else {
  				out.print("((");
				out.print(t.getNameCS());		
  				out.print(")(");
  				generateCS(out);
  				out.print("))");
  			}
  		}
  	}   	
  	public TypeDecl Expr.neededDownCast() {
  		return null;
  	}

 	// --- Access --- 
 	
 	public void AbstractDot.generateUsingResultCS(CodePrinter out) {
 		generateCS(out, true, null,0);
 	}
 	
  	public void AbstractDot.generateCS(CodePrinter out) {
 		generateCS(out, false, null,0);
  	}
  	  	
  	public void AbstractDot.generateCS(CodePrinter out, boolean useresult, ArrayList<Expr>list, int len) {  		
  		// unwind the order in which the AbstractDot elements are nested
  		if (list==null) {  		
  			list = new ArrayList<>();		// decomposition into Expression
  			AbstractDot a = this;
  			while (a.getRight() instanceof AbstractDot) {
  				list.add(a.getLeft());  		    				  		  	
				a = (AbstractDot) a.getRight();
			}
			list.add(a.getLeft());
			list.add(a.getRight());
			len = list.size();
		}
		
  		// recursion termination
  		if (len<1) return;
  		
  		Expr last = list.get(len-1);
  		TypeDecl t = useresult ? last.neededDownCast() : null;
  		if (t!=null) {
			out.print("((");
			out.print(t.getNameCS());
			out.print(")(");				  		
  		}
  		boolean skipfirst=false;
  		// do not generate explicit the type accesses - will be done by the expression itself
  		if (len>=2 && (list.get(len-2) instanceof TypeAccess)) {
			skipfirst = true;
		}
  		// do not generate explicit super accesses - will be done by the expression itself
  		if (len>=2 && (list.get(len-2) instanceof SuperAccess)) {
			skipfirst = true;
		}
		// do not generate the preceeding expression for " x.new " calls. will be injected by the new action later.
		if (len==2 && (list.get(1) instanceof ClassInstanceExpr)) {
			skipfirst=true; 
		}
		// do not generate the expression for a static method access
		if (len==2 && (list.get(1) instanceof MethodAccess) && ((MethodAccess)list.get(1)).decl().isStatic()) {
		  skipfirst=true;
		}
        // do not generate the expression for a static variable access
        if (len==2 && (list.get(1) instanceof VarAccess) && ((VarAccess)list.get(1)).decl().isStatic()) {
          skipfirst=true;
        }
        
		if (!skipfirst) {
			generateCS(out,true,list,len-1);
		}
  		last.generateCS(out);		// intentionally do not do post-processing			 
		if (t!=null) {
			out.print("))");
		}
  	}
  	
 	
//  	public void Wildcard.generateCS(CodePrinter out) {
// 	}
//  	public void WildcardExtends.generateCS(CodePrinter out) {
// 	}
//  	public void WildcardSuper.generateCS(CodePrinter out) {
// 	}
  	public void ArrayAccess.generateCS(CodePrinter out) {
  		out.print("[");
  		getExpr().generateUsingResultCS(out);
  		out.print("]");
 	}
//  	public void ClassAccess.generateCS(CodePrinter out) {
// 	}
    public void ClassInstanceExpr.generateCS(CodePrinter out) {
        if (transformed()!=this)
        {   transformed().generateCS(out);
            return;
        }
        
        boolean foundpar=false;
         
        int n = getNumArg();
        out.print("new ");
        out.print(type().getNameCS());
        out.print("(");
        if (isRightChildOfDot()) {
            prevExpr().generateUsingResultCS(out);
            foundpar=true;
        } else if (type().needsEnclosing()) {
            out.print("this");
            foundpar=true;
        }
        
        for (Variable v:type().enclosingVariables()) {
            if (foundpar) out.print(",");
            out.printCSIdentifier(v.name());
            foundpar=true;
        }
        
        for (int i=0; i<n; i++) {
            if (i>0 || foundpar) out.print(",");
            getArg(i).generateUsingResultCS(out);
        }
        out.print(")");
    }

    public void ConstructorAccess.generateCS(CodePrinter out) 
    {   if (transformed()!=this) 
        {   transformed().generateCS(out);
            return;
        }

        boolean passouter = false;
        if (this instanceof SuperConstructorAccess) {
            out.print("base");
            passouter = hostType().needsEnclosing() 
                        && ((ClassDecl)hostType()).superclass().needsEnclosing();
        } else {
            out.print("this");
            passouter = hostType().needsEnclosing();
        }
        
        Collection<Variable>encvar = hostType().enclosingVariables();

        out.print("(");
        if (passouter) {
            out.print("_o");
        }
        
        int encvarcount=0;
        if (!(this instanceof SuperConstructorAccess)) {
            for (Variable v:encvar) {
                if (encvarcount>0 || passouter) out.print(",");
                out.printCSIdentifier(v.name(),"_o");
                encvarcount++;
            }
        }
        
        for (int i=0; i<getNumArg(); i++) 
        {
            if (i>0 || passouter || encvarcount>0) out.print(",");
            getArg(i).generateUsingResultCS(out);
        }
        out.print(")");
    }

//  	public void DiamondAccess.generateCS(CodePrinter out) {
// 	}
    public void MethodAccess.generateCS(CodePrinter out) 
    {   if (transformed()!=this) 
        {   transformed().generateCS(out);
            return;
        }

        MethodDecl m = decl();
        if (m.isStatic()) 
        {   TypeDecl ht = m.hostType();
            out.print(ht.getNameCS());
            out.print(".");
            out.printCSIdentifier(renameMethod(m.name(),true), "");
        }
        else if (isRightChildOfDot()) 
        {   if (prevExpr().isSuperAccess()) {
                out.print("base");
            }
            out.print(".");
            out.printCSIdentifier(renameMethod(m.name(),false), "");
        }
        else 
        {   out.print("this.");
            TypeDecl t = hostType();
            if (t!=m.hostType() && t.isInnerTypeOf(m.hostType())) 
            {   while (t!=m.hostType()) 
                {   out.print("_o");
                    out.print(".");
                    t = t.enclosingType();
                }
            }
            out.printCSIdentifier(renameMethod(m.name(),false), "");
        }

        out.print("(");
        for (int i=0; i<getNumArg(); i++) 
        {   if (i>0) out.print(",");
            getArg(i).generateUsingResultCS(out);
        }
        out.print(")");
    }
       
 	public TypeDecl MethodAccess.neededDownCast() {
  		MethodDecl m = decl();
		if (m.erasedMethod().type()!=m.type()) {
      		return m.type();
    	}
    	return null;
 	}
 	
 	
//  	public void PackageAccess.generateCS(CodePrinter out) {
// 	}
//  	public void ParseName.generateCS(CodePrinter out) {
// 	}

  	public void ParTypeAccess.generateCS(CodePrinter out) {
  		getTypeAccess().generateCS(out);
 	}
 	
//  	public void SuperAccess.generateCS(CodePrinter out) {
// 	}

  	public void ThisAccess.generateCS(CodePrinter out) {
  		out.print("this");
 	}
	
  	public void TypeAccess.generateCS(CodePrinter out) {
  		out.print(type().getNameCS());
	}
 	
  	public void ArrayTypeAccess.generateCS(CodePrinter out) {
  		getAccess().generateCS(out);
  		// test if inside an ArrayCreationExpr - may need to construct proper call parameter for dim()
  		ASTNode p = this;
  		while ( (p=p.getParent()) != null) {
  			if (p instanceof ArrayCreationExpr && !((ArrayCreationExpr)p).hasArrayInit()) {
  				out.print(",-1");
  				return;
  			}
  		}
  		out.print("[]");
	}
	
  	public void ArrayTypeWithSizeAccess.generateCS(CodePrinter out) {
  		Access a = getAccess();
  		if (a instanceof ArrayTypeWithSizeAccess) {
  			a.generateCS(out);
  			out.print(",");
  		}  		
  		getExpr().generateUsingResultCS(out);
	}   	

  	public void VarAccess.generateCS(CodePrinter out) {  	
  		Variable v = varDecl();
  		if (v.isClassVariable()) {
			out.print(v.hostType().getNameCS());
  			if (v.hostType().isInterfaceDecl()) {
  				out.print("_c"); 
  			}
  			out.print(".");
  			out.printCSIdentifier(getID(), "_f");
  		} else if (v.isInstanceVariable()) {
			if (isRightChildOfDot()) {
				out.print(".");
			} else {
				out.print("this.");
				TypeDecl t = hostType();
				if (t!=v.hostType() && t.isInnerTypeOf(v.hostType())) {
					while (t!=v.hostType()) {			
						out.print("_o.");
						t = t.enclosingType();
					}
				}  		
  			}  		
			out.printCSIdentifier(getID(), "_f");
  		} else if (v.isLocalVariable() || v.isParameter()) {  
  			if (v.hostType() == hostType()) {		
				out.printCSIdentifier(getID(), "");
			} else 
			{   out.print("this.");
                out.printCSIdentifier(getID(), "_o");
			}
  		} else if (getID().equals("length")) {
			out.print(".Length");
		} else {
			throw new RuntimeException("Unknown type of variable access");
  		}  		
 	}
 	public TypeDecl VarAccess.neededDownCast() {
  		if (isFieldAccess() && (varDecl() instanceof FieldDeclarator)) {
  			FieldDeclarator fd = (FieldDeclarator) varDecl();
  			if (fd.isInstanceVariable() && fd.type() != fd.erasedField().type()) {
    	  		return fd.type();
    		}  		
  		}
		return null; 		
 	}
  	
  	
  	// --- ArrayInit ---
  	
  	public void ArrayInit.generateCS(CodePrinter out) {
  		out.print("new ");
  		out.print(type().getNameCS());
  		out.print("{");
  		for (int i=0; i<getNumInit(); i++) {
  			if (i>0) out.print(",");
  			getInit(i).generateUsingResultCS(out);
  		}
  		out.print("}");
  	}
  	
  	// --- AssignExpr ---
	
	public void AssignExpr.generateWithOptionalCastCS(CodePrinter out, String operator) {
  		Expr d = getDest();
  		Expr s = getSource();
		// may need to refactor into normal binary operation
  		if (s.type()!=d.type()) {
			d.generateCS(out);
			out.print(" = ");
			if (!d.type().isInt() || !s.type().isDouble()) {
				out.print("(");						
				out.print(d.type().getNameCS());
  				out.print(")");
  			}
  			if (s.type().isDouble()) {
  				out.print("SYSTEM.castToInt");
  			}		
  			out.print("(");			
			d.generateCS(out);		
			out.print(" ");
			out.print(operator);
			out.print(" ");
  			s.generateUsingResultCS(out);
  			out.print(")");		
  		// can use the compound operator	
  		} else {
  			d.generateCS(out);
  			out.print(" ");
  			out.print(operator);
  			out.print("= ");
  			s.generateUsingResultCS(out);
  		}
	}
	
  	public void AssignMinusExpr.generateCS(CodePrinter out) {
  		generateWithOptionalCastCS(out, "-");
  	}
  	public void AssignPlusExpr.generateCS(CodePrinter out) {
  		// do some case discrimination if this is a string concatenation
  		if (type().isString()) {
	  		Expr d = getDest();
  			Expr s = getSource();
  			d.generateCS(out);
  			out.print (" = ");
  			out.print("System.String.Join(\"\",SYSTEM.str(");
  			d.generateCS(out);
  			out.print("),SYSTEM.str(");
			s.generateUsingResultCS(out);
			out.print("))");
		// may need to refactor into normal binary operation
  		} else {
	  		generateWithOptionalCastCS(out, "+");
	  	}
  	}
  	public void AssignDivExpr.generateCS(CodePrinter out) {
  		Expr d = getDest();
  		Expr s = getSource();
  		if (d.type().isDouble() || s.type().isDouble()) {
	  		generateWithOptionalCastCS(out, "/");
	  	} else {
			d.generateCS(out);
			out.print(" = ");
			if (!d.type().isInt()) {
				out.print("(");						
				out.print(d.type().getNameCS());
  				out.print(")");
  			}
  			out.print("SYSTEM.div(");			
			d.generateCS(out);		
			out.print(",");
  			s.generateUsingResultCS(out);
  			out.print(")");		
		}
  	}
  	public void AssignModExpr.generateCS(CodePrinter out) {
  		generateWithOptionalCastCS(out, "%");
  	}
  	public void AssignMulExpr.generateCS(CodePrinter out) {
  		generateWithOptionalCastCS(out, "*");
  	}
  	
  	
  	public void AssignAndExpr.generateCS(CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" &= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignOrExpr.generateCS(CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" |= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignXorExpr.generateCS(CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" ^= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignLShiftExpr.generateCS(CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" <<= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignRShiftExpr.generateCS(CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" >>= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignURShiftExpr.generateCS(CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" = (int) (");
  		out.print("((uint)(");
  		getDest().generateCS(out);
  		out.print(")) >> ");
  		getSource().generateUsingResultCS(out);
  		out.print(")");
  	}
  	public void AssignSimpleExpr.generateCS(CodePrinter out) {
  		Expr d = getDest();
  		Expr s = getSource();

  		d.generateCS(out);
  		out.print(" = ");

		if (d.type().isChar() && s.type().isInt()) {
			out.print("SYSTEM.castToChar(");
  			s.generateUsingResultCS(out);
  			out.print(")");		
		} else {
  			s.generateUsingResultCS(out);
		}
  	}

  	// --- Binary ---

  	public void AddExpr.generateCS(CodePrinter out) {
  		// do some case discrimination if this is a string concatenation
  		Expr l = getLeftOperand();
  		Expr r = getRightOperand();
  		
  		if (type().isString()) {
			if ((l.type().isString() && l.isConstant()) || (l instanceof AddExpr)) {
				l.generateUsingResultCS(out);
			} else {
				out.print("SYSTEM.str(");
  				l.generateUsingResultCS(out);
				out.print(")");
			}			
	  		out.print("+");
			if ((r.type().isString() && r.isConstant()) || (r instanceof AddExpr)) {
				r.generateUsingResultCS(out);
			} else {
				out.print("SYSTEM.str(");
  				r.generateUsingResultCS(out);
				out.print(")");
			}
		} else {
  			l.generateUsingResultCS(out);
	  		out.print("+");
			r.generateUsingResultCS(out);	
		}		
  	}
  	public void SubExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("-");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void DivExpr.generateCS(CodePrinter out) {
		if (type().isDouble()) {
			getLeftOperand().generateUsingResultCS(out);
  			out.print("/");
  			getRightOperand().generateUsingResultCS(out);
  		} else {
  			out.print("(SYSTEM.div(");
			getLeftOperand().generateUsingResultCS(out);
  			out.print(",");
  			getRightOperand().generateUsingResultCS(out);
  			out.print("))");  		
  		}
  	}
  	public void ModExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("%");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void MulExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("*");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void AndBitwiseExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("&");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void OrBitwiseExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("|");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void XorBitwiseExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("^");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void AndLogicalExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("&&");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void OrLogicalExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("||");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void EQExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("==");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void NEExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("!=");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void GEExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print(">=");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void GTExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print(">");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void LEExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("<=");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void LTExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("<");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void LShiftExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("<<");
  		getRightOperand().generateUsingResultCS(out);

  	}
  	public void RShiftExpr.generateCS(CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print(">>");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void URShiftExpr.generateCS(CodePrinter out) {
  		out.print("((int)(");
  		out.print("((uint)(");
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("))>>");
  		getRightOperand().generateUsingResultCS(out);
  		out.print("))");  	
  	}
  	
  	
  	// --- CastExpr ---
  	
  	public void CastExpr.generateCS(CodePrinter out) {
		TypeDecl t = type();
		Expr e = getExpr();
		if (t.isPrimitiveType()) {
			if (t.isBoolean()) {
				e.generateUsingResultCS(out);			
			} else if (t.isByte()) {
				if (e.type().isDouble()) {
					out.print("(SYSTEM.castToByte(");
				} else {
					out.print("((sbyte)(");
				}				
				e.generateUsingResultCS(out);
				out.print("))");
			} else if (t.isChar()) {
				if (e.type().isDouble()) {
					out.print("(SYSTEM.castToChar(");
				} else {
					out.print("((char)(");
				}				
				e.generateUsingResultCS(out);
				out.print("))");
			} else if (t.isInt()) {
				if (e.type().isDouble()) {
					out.print("(SYSTEM.castToInt(");
				} else {
					out.print("((int)(");
				}				
				e.generateUsingResultCS(out);
				out.print("))");
			} else if (t.isDouble()) {
				out.print("((double)(");
				e.generateUsingResultCS(out);
				out.print("))");
			} else {
				e.dumpTree(System.out);
				throw new RuntimeException("Type not supported in cast:"+t.fullName());
			}
		} else {
	  		out.print("((");
  			getTypeAccess().generateCS(out);
	  		out.print(")");
			e.generateUsingResultCS(out);
			out.print(")");
		}
  	}
  	
  	// --- ConditionalExpr ---
  	
  	public void ConditionalExpr.generateCS(CodePrinter out) {
  		getCondition().generateUsingResultCS(out);
  		out.print("?");
  		getTrueExpr().generateUsingResultCS(out);
  		out.print(":");
  		getFalseExpr().generateUsingResultCS(out);
  	}
  	
  	// --- InstanceOfExpr ---

  	public void InstanceOfExpr.generateCS(CodePrinter out) {
  		getExpr().generateUsingResultCS(out);
  		out.print(" is ");
  		getTypeAccess().generateCS(out);
  	}
  	
  	// --- PrimaryExpr ---
  	
  	public void ArrayCreationExpr.generateCS(CodePrinter out) {
  		// array with initialization data
  		if (hasArrayInit()) {
  			getArrayInit().generateCS(out);
  		} else {
  			TypeDecl t = type();
  			int d = t.dimension();
  			// one-dimensional array
  			if (d==1) {
  				out.print("new ");
  				out.print(t.elementType().getNameCS());
  				out.print("[");
  				getTypeAccess().generateCS(out);
  				out.print("]");
  			// multi-dimensional array
  			} else {
  				if (d<=4) {
  					out.print("SYSTEM.dim<");
  					out.print(t.elementType().getNameCS());
  					out.print(">");
  				} else {
					int id = out.memorizeDim(t.elementType().getNameCS(), d);				
  				    out.print("_dim"+id);
  				}  				
				out.print("(");
  				getTypeAccess().generateCS(out);
				out.print(")");
			}
  		}
  	}
  	
  	public void Literal.generateCS(CodePrinter out) {
  		constant().generateCS(out);
  	}
//  	public void IllegalLiteral.generateCS(CodePrinter out) {
//  	}
  	public void NullLiteral.generateCS(CodePrinter out) {
  		out.print("null");
  	}
  	public void ParExpr.generateCS(CodePrinter out) {
  		out.print("(");
  		getExpr().generateCS(out);
  		out.print(")");
  	}
  	
  	// --- Unary ---
  	public void BitNotExpr.generateCS(CodePrinter out) {
  		out.print("~");
  		getOperand().generateUsingResultCS(out);  	
  	}
  	public void LogNotExpr.generateCS(CodePrinter out) {
  		out.print("!");
  		getOperand().generateUsingResultCS(out);  	
  	}
  	public void MinusExpr.generateCS(CodePrinter out) {
  		out.print(" - ");
  		getOperand().generateUsingResultCS(out);  	
  	}
  	public void PlusExpr.generateCS(CodePrinter out) {
  		out.print(" + ");    
  		getOperand().generateUsingResultCS(out);  	
  	}
  	public void PostDecExpr.generateCS(CodePrinter out) {
  		getOperand().generateCS(out);  	
  		out.print(" -- ");    
  	}
  	public void PostIncExpr.generateCS(CodePrinter out) {
  		getOperand().generateCS(out);  	
  		out.print(" ++ ");    
  	}
  	public void PreDecExpr.generateCS(CodePrinter out) {
  		out.print(" -- ");    
  		getOperand().generateCS(out);  	
  	}
  	public void PreIncExpr.generateCS(CodePrinter out) {
  		out.print(" ++ ");    
  		getOperand().generateCS(out);  	
  	}
	
}


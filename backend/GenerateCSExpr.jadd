/**
 * Implement the C# code generation for all Expr nodes.
 */

import java.util.ArrayList;
import com.greentube.javaconverter.CodePrinter;
import com.greentube.javaconverter.CodePrinterCS;

aspect GenerateCS 
{
    /**
     * This code generation of expressions is used when the result of the expression
     * is actually used for further operation, as opposed to be just thrown away
     * (after a method call for example).
     * Some subtypes of Expr can also do additional optimizations in these cases.
     */
    public void Expr.generateUsingResultCS(CodePrinterCS out) 
    {   
        if (isConstant() && !type().isEnumDecl()) 
        {
            constant().generateCS(out);         
        } 
        else 
        {   TypeDecl t = neededDownCast();
            if (t==null) 
            {   generateCS(out);
            } 
            else
            {   out.print("((");
                t.generateNameCS(out);       
                out.print(")(");
                generateCS(out);
                out.print("))");
            }
        }
    }       

    // --- Access --- 
    
    public void Dot.generateUsingResultCS(CodePrinterCS out) 
    {
        generateCS(out, true, null,0);
    }    
    public void Dot.generateCS(CodePrinterCS out) 
    {
        generateCS(out, false, null,0);
    }       
    public void Dot.generateCS(CodePrinterCS out, boolean useresult, ArrayList<Expr>list, int len) 
    {          
        // unwind the order in which the Dot elements are nested
        if (list==null) 
        {   list = new ArrayList<>();       // decomposition into Expression
            Dot a = this;
            while (a.getRight() instanceof Dot) 
            {   list.add(a.getLeft());                                          
                a = (Dot) a.getRight();
            }
            list.add(a.getLeft());
            list.add(a.getRight());
            len = list.size();
        }
        
        // recursion termination
        if (len<1) { return; }
        
        Expr last = list.get(len-1);
        TypeDecl t = useresult ? last.neededDownCast() : null;
        if (t!=null) 
        {   out.print("((");
            t.generateNameCS(out);
            out.print(")(");                        
        }
        boolean skipfirst=false;
        // do not generate explicit the type accesses - will be done by the expression itself
        if (len>=2 && (list.get(len-2) instanceof TypeAccess)) 
        {   skipfirst = true;
        }
        // do not generate explicit super accesses - will be done by the expression itself
        if (len>=2 && (list.get(len-2) instanceof SuperAccess)) 
        {   skipfirst = true;
        }
        // do not generate the preceeding expression for " x.new " calls. will be injected by the new action later.
        if (len==2 && (list.get(1) instanceof ClassInstanceExpr))
        {   skipfirst=true; 
        }
        // do not generate the leading expression for a static method access
        if (len>=2 && (list.get(len-1) instanceof MethodAccess) && ((MethodAccess)list.get(len-1)).decl().isStatic()) 
        {   skipfirst=true;
        }
        // do not generate the leading expression for a static variable access
        if (len>=2 && (list.get(len-1) instanceof VarAccess) && ((VarAccess)list.get(len-1)).decl().isStatic()) 
        {   skipfirst=true;
        }
        
        if (!skipfirst) 
        {   generateCS(out,true,list,len-1);
        }
        last.generateCS(out);       // intentionally do not do post-processing           
        if (t!=null) 
        {   out.print("))");
        }
    }
    
    
//  public void Wildcard.generateCS(CodePrinterCS out) 
//  {
//  }
//  public void WildcardExtends.generateCS(CodePrinterCS out) 
//  {
//  }
//  public void WildcardSuper.generateCS(CodePrinterCS out) 
//  {
//  }
    public void ArrayAccess.generateCS(CodePrinterCS out) 
    {
        out.print("[");
        getExpr().generateUsingResultCS(out);
        out.print("]");
    }
//  public void ClassAccess.generateCS(CodePrinterCS out) 
//  {
//  }
    public void ClassInstanceExpr.generateCS(CodePrinterCS out) 
    {   
        if (transformed()!=this)
        {   transformed().generateCS(out);
            return;
        }
        
        boolean foundpar=false;
         
        int n = getNumArg();
        out.print("new ");
        type().generateNameCS(out);
        out.print("(");
        if (isRightChildOfDot())
        {   prevExpr().generateUsingResultCS(out);
            foundpar=true;
        } 
        else if (type().needsEnclosing()) 
        {   out.print("this");
            foundpar=true;
        }
        
        for (Variable v:type().enclosingVariables()) 
        {   if (foundpar) out.print(", ");
            out.printIdentifier(v.name());
            foundpar=true;
        }
        
        for (int i=0; i<n; i++) 
        {   if (i>0 || foundpar) { out.print(", "); }
            getArg(i).generateUsingResultCS(out);
        }
        out.print(")");
    }

    public void ConstructorAccess.generateCS(CodePrinterCS out) 
    {   if (transformed()!=this) 
        {   transformed().generateCS(out);
            return;
        }

        boolean passouter = false;
        if (this instanceof SuperConstructorAccess) 
        {   out.print("base");
            passouter = hostType().needsEnclosing() 
                        && ((ClassDecl)hostType()).superclass().needsEnclosing();
        } 
        else 
        {   out.print("this");
            passouter = hostType().needsEnclosing();
        }
        
        Collection<Variable>encvar = hostType().enclosingVariables();

        out.print("(");
        if (passouter) 
        {   out.print("_o");
        }
        
        int encvarcount=0;
        if (!(this instanceof SuperConstructorAccess)) 
        {   for (Variable v:encvar) 
            {   if (encvarcount>0 || passouter) { out.print(", "); }
                out.printIdentifier(v.name(),"_o");
                encvarcount++;
            }
        }
        
        for (int i=0; i<getNumArg(); i++) 
        {   if (i>0 || passouter || encvarcount>0) { out.print(", "); }
            getArg(i).generateUsingResultCS(out);
        }
        out.print(")");
    }

//  public void DiamondAccess.generateCS(CodePrinterCS out) 
//  {
//  }

    public void MethodAccess.generateCS(CodePrinterCS out) 
    {   
        if (transformed()!=this) 
        {   transformed().generateCS(out);
            return;
        }

        MethodDecl m = decl();
        if (m.isStatic()) 
        {   if (m.hostType().isString() && m.name().equals("join")) 
            {   out.print("java.lang.StringExtensions.join");
            }
            else 
            {   m.hostType().generateNameCS(out);
                if (m.hostType() instanceof InterfaceDecl) out.print("_c");
                out.print(".");
                out.printCSMethodName(m.name(),true);
            }
        }
        else if (isRightChildOfDot()) 
        {   if (prevExpr().isSuperAccess()) 
            {   out.print("base");
            }
            out.print(".");
            out.printCSMethodName(m.name(),false);
        }
        else 
        {   out.print(m.hostType().isClassDecl() ? "this":"@this");
            out.print(".");
            for (int i=hostType().nestingLevelInside(m.hostType()); i>0; i--)
            {
                 out.print("_o.");
            }
            out.printCSMethodName(m.name(),false);
        }

        out.print("(");
        for (int i=0; i<getNumArg(); i++) 
        {   if (i>0) out.print(", ");
            // do conversion of regex parameter for the String.split method
            if (i==0 && m.name().equals("split") && m.hostType().isString())
            {   String ss = getArg(0).regexToSearchString();
                new Constant.ConstantString(ss).generateCS(out);
            }
            else
            {   getArg(i).generateUsingResultCS(out);
            }
        }
        out.print(")");
    }
       
    
//  public void PackageAccess.generateCS(CodePrinterCS out) 
//  {
//  }
//  public void ParseName.generateCS(CodePrinterCS out) 
//  {
//  }

    public void ParTypeAccess.generateCS(CodePrinterCS out) 
    {
        getTypeAccess().generateCS(out);
    }
    
//  public void SuperAccess.generateCS(CodePrinterCS out) 
//  {
//  }

    public void ThisAccess.generateCS(CodePrinterCS out) 
    {
        TypeDecl t = hostType();
        // inside an interface default method, need to rename the this  
        if (!t.isClassDecl()) 
        {   out.print("@this");
            return;
        }
        out.print("this");
        // check if accessing the instance of an outer class
        for (int i=t.nestingLevelInside(type()); i>0; i--)
        {   out.print("._o");
            t = t.enclosingType();
        }       
    }
    
    public void TypeAccess.generateCS(CodePrinterCS out) 
    {   
        type().generateNameCS(out);
    }
    
    public void ArrayTypeAccess.generateCS(CodePrinterCS out) 
    {
        getAccess().generateCS(out);
        // test if inside an ArrayCreationExpr - may need to construct proper call parameter for dim()
        ASTNode p = this;
        while ( (p=p.getParent()) != null) 
        {   if (p instanceof ArrayCreationExpr && !((ArrayCreationExpr)p).hasArrayInit()) 
            {   out.print(",-1");
                return;
            }
        }
        out.print("[]");
    }
    
    public void ArrayTypeWithSizeAccess.generateCS(CodePrinterCS out) 
    {   
        Access a = getAccess();
        if (a instanceof ArrayTypeWithSizeAccess) 
        {   a.generateCS(out);
            out.print(", ");
        }       
        getExpr().generateUsingResultCS(out);
    }       

    public void VarAccess.generateCS(CodePrinterCS out) 
    {     
        Variable v = varDecl();
        if (v.isClassVariable()) 
        {   v.hostType().generateNameCS(out);
            if (v.hostType().isInterfaceDecl()) 
            {   out.print("_c"); 
            }
            out.print(".");
            out.printIdentifier(getID(), "_f");
        } 
        else if (v.isInstanceVariable()) 
        {   if (isRightChildOfDot()) 
            {   out.print(".");
            } 
            else
            {   out.print("this.");
                for (int i=hostType().nestingLevelInside(v.hostType()); i>0; i--)
                {
                    out.print("_o.");
                }       
            }       
            out.printIdentifier(getID(), "_f");
        } 
        else if (v.isLocalVariable() || v.isParameter()) 
        {   if (v.hostType() == hostType()) 
            {   out.printIdentifier(getID());
            } 
            else 
            {   out.print("this.");
                out.printIdentifier(getID(), "_o");
            }
        }
        else if (getID().equals("length")) 
        {   out.print(".Length");
        } 
        else
        {   throw new RuntimeException("Unknown type of variable access");
        }       
    }
    
    // --- ArrayInit ---
    
    public void ArrayInit.generateCS(CodePrinterCS out) 
    {
        out.print("new ");
        type().generateNameCS(out);
        out.print("{");
        for (int i=0; i<getNumInit(); i++) 
        {   if (i>0) { out.print(", "); }
            getInit(i).generateUsingResultCS(out);
        }
        out.print("}");
    }
    
    // --- AssignExpr ---
    
    public void AssignExpr.generateWithOptionalFallbackCS(CodePrinterCS out, String operator, String fallback) 
    {
        Expr d = getDest();
        Expr s = getSource();
        // for identical types it is safe to use the operator
        if ((s.type()==d.type() || fallback==null) && operator!=null) 
        {   d.generateCS(out);
            out.print(" ");
            out.print(operator);
            out.print(" ");
            s.generateUsingResultCS(out);
        }
        // otherwise use a fallback-method that is overloaded to handle all types
        else
        {   out.print("SYSTEM.");
            out.print(fallback);
            out.print("(ref ");
            d.generateCS(out);
            out.print(", ");
            s.generateUsingResultCS(out);
            out.print(")");
        }
    }    
    public void AssignMinusExpr.generateCS(CodePrinterCS out) 
    {
        generateWithOptionalFallbackCS(out, "-=", "ASSIGNMINUS");
    }    
    public void AssignPlusExpr.generateCS(CodePrinterCS out) 
    {
        // do a case discrimination if this is a string concatenation
        if (type().isString())  
        {   out.print("SYSTEM.ASSIGNPLUS(ref ");
            getDest().generateCS(out);
            out.print(",SYSTEM.str(");
            getSource().generateUsingResultCS(out);
            out.print("))");
        } 
        else
        {   generateWithOptionalFallbackCS(out, "+=", "ASSIGNPLUS");
        }
    }
    public void AssignDivExpr.generateCS(CodePrinterCS out) 
    {
        generateWithOptionalFallbackCS(out, null, "ASSIGNDIV");
    }
    public void AssignModExpr.generateCS(CodePrinterCS out) 
    {
        generateWithOptionalFallbackCS(out, "%=", "ASSIGNMOD");
    }
    public void AssignMulExpr.generateCS(CodePrinterCS out) 
    {
        generateWithOptionalFallbackCS(out, "*=", "ASSIGNMUL");
    }    
    
    public void AssignAndExpr.generateCS(CodePrinterCS out) 
    {
        generateWithOptionalFallbackCS(out, "&=", "ASSIGNAND"); 
    }
    public void AssignOrExpr.generateCS(CodePrinterCS out) 
    {
        generateWithOptionalFallbackCS(out, "|=", "ASSIGNOR");
    }
    public void AssignXorExpr.generateCS(CodePrinterCS out) 
    {
        generateWithOptionalFallbackCS(out, "^=", "ASSIGNXOR"); 
    }
    public void AssignLShiftExpr.generateCS(CodePrinterCS out) 
    {
        generateWithOptionalFallbackCS(out, "<<=", "ASSIGNLSHIFT"); 
    }
    public void AssignRShiftExpr.generateCS(CodePrinterCS out) 
    {
        generateWithOptionalFallbackCS(out, ">>=", "ASSIGNRSHIFT"); 
    }
    public void AssignURShiftExpr.generateCS(CodePrinterCS out) 
    {
        generateWithOptionalFallbackCS(out, null, "ASSIGNURSHIFT"); 
    }
//        getDest().generateCS(out);
//        out.print(" = (");
//        getDest().type().generateNameCS(out);        
//        out.print(")(((uint)(");
//        getDest().generateCS(out);
//        out.print(")) >> ");
//        getSource().generateUsingResultCS(out);
//        out.print(")");
//    }
    public void AssignSimpleExpr.generateCS(CodePrinterCS out) 
    {
        Expr d = getDest();
        Expr s = getSource();

        d.generateCS(out);
        out.print(" = ");

        if (d.type().isChar() && s.type().isInt()) 
        {   out.print("SYSTEM.castToChar(");
            s.generateUsingResultCS(out);
            out.print(")");     
        } 
        else
        {   s.generateUsingResultCS(out);
        }
    }

    // --- Binary ---

    public void AddExpr.generateCS(CodePrinterCS out) 
    {
        // do some case discrimination if this is a string concatenation
        Expr l = getLeftOperand();
        Expr r = getRightOperand();
        
        if (type().isString()) 
        {   if ((l.type().isString() && l.isConstant()) || (l instanceof AddExpr)) 
            {   l.generateUsingResultCS(out);
            } 
            else 
            {   out.print("SYSTEM.str(");
                l.generateUsingResultCS(out);
                out.print(")");
            }           
            out.print("+");
            if ((r.type().isString() && r.isConstant()) || (r instanceof AddExpr)) 
            {   r.generateUsingResultCS(out);
            } 
            else
            {   out.print("SYSTEM.str(");
                r.generateUsingResultCS(out);
                out.print(")");
            }
        } 
        else
        {   l.generateUsingResultCS(out);
            out.print("+");
            r.generateUsingResultCS(out);   
        }       
    }
    public void SubExpr.generateCS(CodePrinterCS out)
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print("-");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void DivExpr.generateCS(CodePrinterCS out) 
    {
        if (type().isDouble()) 
        {   getLeftOperand().generateUsingResultCS(out);
            out.print("/");
            getRightOperand().generateUsingResultCS(out);
        } 
        else
        {   out.print("(SYSTEM.div(");
            getLeftOperand().generateUsingResultCS(out);
            out.print(", ");
            getRightOperand().generateUsingResultCS(out);
            out.print("))");        
        }
    }
    public void ModExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print("%");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void MulExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print("*");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void AndBitwiseExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print("&");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void OrBitwiseExpr.generateCS(CodePrinterCS out) 
    {
        Expr l = getLeftOperand();
        Expr r = getRightOperand();                
        if (type().isInt() && !l.type().isInt())   
        {   out.print("((int)");
            l.generateUsingResultCS(out);
            out.print(")");
        } 
        else
        {   l.generateUsingResultCS(out);
        }        
        out.print("|");        
        if (type().isInt() && !r.type().isInt())   
        {   out.print("((int)");
            r.generateUsingResultCS(out);
            out.print(")");
        } 
        else
        {   r.generateUsingResultCS(out);
        }
    }
    public void XorBitwiseExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print("^");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void AndLogicalExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print(" && ");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void OrLogicalExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print(" || ");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void EQExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print("==");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void NEExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print("!=");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void GEExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print(">=");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void GTExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print(">");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void LEExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print("<=");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void LTExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print("<");
        getRightOperand().generateUsingResultCS(out);   
    }
    public void LShiftExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print("<<");
         if (getRightOperand().type().isLong())
        {	
        	out.print("((int)");
        	getRightOperand().generateUsingResultCS(out);
        	out.print(")");
        }
        else 
        {	
        	getRightOperand().generateUsingResultCS(out);
        }
    }
    public void RShiftExpr.generateCS(CodePrinterCS out) 
    {
        getLeftOperand().generateUsingResultCS(out);
        out.print(">>");
		if (getRightOperand().type().isLong())
        {	
        	out.print("((int)");
        	getRightOperand().generateUsingResultCS(out);
        	out.print(")");
        }
        else 
        {	
        	getRightOperand().generateUsingResultCS(out);
        }  
    }
    public void URShiftExpr.generateCS(CodePrinterCS out) 
    {
		if (getLeftOperand().type().isLong() || getRightOperand().type().isLong())
    	{
        	out.print("((long)(");
        	out.print("((ulong)(");
        	getLeftOperand().generateUsingResultCS(out);
        	out.print("))>>((int)");
        	getRightOperand().generateUsingResultCS(out);
        	out.print(")))");    	
    	}
    	else
    	{ 
        	out.print("((int)(");
        	out.print("((uint)(");
        	getLeftOperand().generateUsingResultCS(out);
        	out.print("))>>");
        	getRightOperand().generateUsingResultCS(out);
        	out.print("))");
       	}    
    }
    
    
    // --- CastExpr ---
    
    public void CastExpr.generateCS(CodePrinterCS out) 
    {
        TypeDecl t = type();
        Expr e = getExpr();
        if (t.isPrimitiveType()) 
        {   if (t.isBoolean()) 
            {   e.generateUsingResultCS(out);           
            } 
            else if (t.isByte()) 
            {   if (e.type().isDouble()) 
                {   out.print("(SYSTEM.castToByte(");
                } 
                else
                {   out.print("((sbyte)(");
                }               
                e.generateUsingResultCS(out);
                out.print("))");
            }
            else if (t.isChar()) 
            {   if (e.type().isDouble()) 
                {   out.print("(SYSTEM.castToChar(");
                } 
                else
                {   out.print("((char)(");
                }               
                e.generateUsingResultCS(out);
                out.print("))");
            } 
            else if (t.isShort()) 
            {   if (e.type().isDouble()) 
                {   out.print("(SYSTEM.castToShort(");
                } 
                else
                {   out.print("((short)(");
                }               
                e.generateUsingResultCS(out);
                out.print("))");
            } 
            else if (t.isInt()) 
            {   if (e.type().isDouble()) 
                {   out.print("(SYSTEM.castToInt(");
                } 
                else
                {   out.print("((int)(");
                }               
                e.generateUsingResultCS(out);
                out.print("))");
            }
            else if (t.isLong()) 
            {   if (e.type().isDouble()) 
                {   out.print("(SYSTEM.castToLong(");
                } 
                else
                {   out.print("((long)(");
                }               
                e.generateUsingResultCS(out);
                out.print("))");
            }
            else if (t.isDouble()) 
            {   out.print("((double)(");
                e.generateUsingResultCS(out);
                out.print("))");
            } 
            else 
            {   e.dumpTree(System.out);
                throw new RuntimeException("Type not supported in cast:"+t.fullName());
            }
        } 
        else
        {   out.print("((");
            getTypeAccess().generateCS(out);
            out.print(")");
            e.generateUsingResultCS(out);
            out.print(")");
        }
    }
    
    // --- ConditionalExpr ---
    
    public void ConditionalExpr.generateCS(CodePrinterCS out) 
    {   
        getCondition().generateUsingResultCS(out);
        out.print("? ");
        getTrueExpr().generateUsingResultCS(out);
        out.print(" : ");
        getFalseExpr().generateUsingResultCS(out);
    }
    
    // --- InstanceOfExpr ---

    public void InstanceOfExpr.generateCS(CodePrinterCS out) 
    {   
        getExpr().generateUsingResultCS(out);
        out.print(" is ");
        getTypeAccess().generateCS(out);
    }
    
    // --- PrimaryExpr ---
    
    public void ArrayCreationExpr.generateCS(CodePrinterCS out) 
    {
        // array with initialization data
        if (hasArrayInit()) 
        {   getArrayInit().generateCS(out);
        } 
        else
        {   TypeDecl t = type();
            int d = t.dimension();
            // one-dimensional array
            if (d==1) 
            {   out.print("new ");
                t.elementType().generateNameCS(out);
                out.print("[");
                getTypeAccess().generateCS(out);
                out.print("]");
            // multi-dimensional array
            } 
            else
            {   if (d<=4) 
                {   out.print("SYSTEM.dim<");
                    t.elementType().generateNameCS(out);
                    out.print(">");
                } 
                else
                {   int id = out.memorizeDim(t.elementType(), d);               
                    out.print("_dim"+id);
                }               
                out.print("(");
                getTypeAccess().generateCS(out);
                out.print(")");
            }
        }
    }
    
    public void Literal.generateCS(CodePrinterCS out) 
    {
        constant().generateCS(out);
    }
//  public void IllegalLiteral.generateCS(CodePrinterCS out) 
//  {
//  }
    public void NullLiteral.generateCS(CodePrinterCS out) 
    {
        out.print("null");
    }
    public void ParExpr.generateCS(CodePrinterCS out) 
    {
        out.print("(");
        getExpr().generateCS(out);
        out.print(")");
    }
    
    // --- Unary ---
    public void BitNotExpr.generateCS(CodePrinterCS out) 
    {
        out.print("~");
        getOperand().generateUsingResultCS(out);    
    }
    public void LogNotExpr.generateCS(CodePrinterCS out) 
    {
        out.print("!");
        getOperand().generateUsingResultCS(out);    
    }
    public void MinusExpr.generateCS(CodePrinterCS out) 
    {
        out.print("-");
        getOperand().generateUsingResultCS(out);    
    }
    public void PlusExpr.generateCS(CodePrinterCS out) 
    {
        out.print("+");    
        getOperand().generateUsingResultCS(out);    
    }
    public void PostDecExpr.generateCS(CodePrinterCS out) 
    {
        getOperand().generateCS(out);   
        out.print("--");    
    }
    public void PostIncExpr.generateCS(CodePrinterCS out) 
    {
        getOperand().generateCS(out);   
        out.print("++");    
    }
    public void PreDecExpr.generateCS(CodePrinterCS out) 
    {
        out.print("--");    
        getOperand().generateCS(out);   
    }
    public void PreIncExpr.generateCS(CodePrinterCS out) 
    {
        out.print("++");    
        getOperand().generateCS(out);   
    }

    public void LambdaExpr.generateCS(CodePrinterCS out) 
    {    
         toClass().generateCS(out); 
    }
    public void TypeMethodReference.generateCS(CodePrinterCS out)
    {    
         toClass().generateCS(out); 
    }
    public void ExprMethodReference.generateCS(CodePrinterCS out)
    {    
         toClass().generateCS(out); 
    }
    
    public void SyntheticTypeAccess.generateCS(CodePrinterCS out)
    {
       type().generateNameCS(out);
    }
}


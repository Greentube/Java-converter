import java.util.ArrayList;
aspect GenerateCS {

	
	public void Expr.generateUsingResultCS(com.greentube.javaconverter.CodePrinter out) {	
		if (isConstant() && !type().isEnumDecl()) {
			constant().generateCS(out);  		
  		} else {  		
			TypeDecl t = neededDownCast();
			if (t==null) {  		  		
  				generateCS(out);
  			} else {
  				out.print("((");
				t.generateReferenceCS(out);		
  				out.print(")(");
  				generateCS(out);
  				out.print("))");
  			}
  		}
  	}   	
  	public TypeDecl Expr.neededDownCast() {
  		return null;
  	}

 	// --- Access --- 
 	
 	public void AbstractDot.generateUsingResultCS(com.greentube.javaconverter.CodePrinter out) {
 		generateCS(out, true, null,0);
 	}
 	
  	public void AbstractDot.generateCS(com.greentube.javaconverter.CodePrinter out) {
 		generateCS(out, false, null,0);
  	}
  	  	
  	public void AbstractDot.generateCS(com.greentube.javaconverter.CodePrinter out, boolean useresult, ArrayList<Expr>list, int len) {  		
  		// unwind the order in which the AbstractDot elements are nested
  		if (list==null) {  		
  			list = new ArrayList<>();		// decomposition into Expression
  			AbstractDot a = this;
  			while (a.getRight() instanceof AbstractDot) {
  				list.add(a.getLeft());  		    				  		  	
				a = (AbstractDot) a.getRight();
			}
			list.add(a.getLeft());
			list.add(a.getRight());
			len = list.size();
		}
		
  		// recursion termination
  		if (len<1) return;
  		
  		Expr last = list.get(len-1);
  		TypeDecl t = useresult ? last.neededDownCast() : null;
  		if (t!=null) {
			out.print("((");
			t.generateReferenceCS(out);
			out.print(")(");				  		
  		}
  		boolean skipfirst=false;
  		// do not generate additional type access when addressing nested types absolutely
  		if (len==2 && (list.get(0) instanceof TypeAccess) && (list.get(1) instanceof TypeAccess)) {
  			skipfirst=true;
		}
		// do not generate the preceeding expression for " x.new " calls. will be injected by the new action later.
		if (len==2 && (list.get(1) instanceof ClassInstanceExpr)) {
			skipfirst=true; 
		}
		if (!skipfirst) {
			generateCS(out,true,list,len-1);
		}
  		last.generateCS(out);		// intentionally do not do post-processing			 
		if (t!=null) {
			out.print("))");
		}
  	}
  	
 	
//  	public void Wildcard.generateCS(com.greentube.javaconverter.CodePrinter out) {
// 	}
//  	public void WildcardExtends.generateCS(com.greentube.javaconverter.CodePrinter out) {
// 	}
//  	public void WildcardSuper.generateCS(com.greentube.javaconverter.CodePrinter out) {
// 	}
  	public void ArrayAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("[");
  		getExpr().generateUsingResultCS(out);
  		out.print("]");
 	}
//  	public void ClassAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {
// 	}
  	public void ClassInstanceExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
		int n = getNumArg();
  		out.print("new ");
  		out.printCSName(type().constantPoolName());
		out.print("(");  		
		if (isRightChildOfDot()) {
			prevExpr().generateUsingResultCS(out);
			if (n>0) out.print(",");
		} else if (type().needsEnclosing()) {
			out.print("this");
			if (n>0) out.print(",");
		}
		
  		ConstructorDecl m = decl();
  		// check if must create a temporary array to package the var args   	
		if (!m.isVariableArity() 
		|| (getNumArg()==m.getNumParameter() && getArg(getNumArg()-1).type()==m.getParameter(getNumArg()-1).type()) ) 
		// can leave parameters as they are
		{
	  		for (int i=0; i<getNumArg(); i++) {
  				if (i>0) out.print(",");
  				getArg(i).generateUsingResultCS(out);
  			}
  		// need to package last parameters (may be zero) into array		
  		} else {
  			// non-varargs parameters
	  		for (int i=0; i<m.getNumParameter()-1; i++) {
  				if (i>0) out.print(",");
  				getArg(i).generateUsingResultCS(out);
  			}  		
  			// create array for the rest
  			if (m.getNumParameter()>1) out.print(",");
  			out.print("new ");
  			m.getParameter(m.getNumParameter()-1).type().generateReferenceCS(out);
  			out.print("{");
  			for (int i=m.getNumParameter()-1; i<getNumArg(); i++) {
  				if (i>m.getNumParameter()-1) out.print(",");
  				getArg(i).generateUsingResultCS(out);
  			}
  			out.print("}");  			
  		}
  		out.print(")");  	
 	}
 	
  	public void ConstructorAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {
  			boolean passouter = false;
  			if (this instanceof SuperConstructorAccess) {
  				out.print("base");
  				passouter = hostType().isInnerClass() && !hostType().isSubclassingEnum()
  				        && !((ClassDecl)hostType()).superclass().isObject();
  			} else {
  				out.print("this");
  				passouter = hostType().isInnerClass() && !hostType().isSubclassingEnum();
  			}
  	
			out.print("(");
			if (passouter) {
				out.print("outer_o");
			}
			
	  		ConstructorDecl m = decl();
	  		// check if must create a temporary array to package the var args   	
			if (!m.isVariableArity() 
			|| (getNumArg()==m.getNumParameter() && getArg(getNumArg()-1).type()==m.getParameter(getNumArg()-1).type()) ) 
			// can leave parameters as they are
			{
		  		for (int i=0; i<getNumArg(); i++) {
	  				if (i>0 || passouter) out.print(",");
	  				getArg(i).generateUsingResultCS(out);
	  			}
	  		// need to package last parameters (may be zero) into array		
	  		} else {
	  			// non-varargs parameters
		  		for (int i=0; i<m.getNumParameter()-1; i++) {
	  				if (i>0 || passouter) out.print(",");
	  				getArg(i).generateUsingResultCS(out);
	  			}  		
	  			// create array for the rest
	  			if (m.getNumParameter()>1) out.print(",");
	  			out.print("new ");
	  			m.getParameter(m.getNumParameter()-1).type().generateReferenceCS(out);
	  			out.print("{");
	  			for (int i=m.getNumParameter()-1; i<getNumArg(); i++) {
	  				if (i>m.getNumParameter()-1) out.print(",");
	  				getArg(i).generateUsingResultCS(out);
	  			}
	  			out.print("}");  			
	  		}
	  		out.print(")");  	
 	}
 	
//  	public void DiamondAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {
// 	}
  	public void MethodAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		MethodDecl m = decl();
  		if (m.isStatic()) {
  			if (!isRightChildOfDot()) {
  				out.printCSName(m.hostType().constantPoolName());
  			}
			out.print(".");
  			out.print(renameMethod(m.name(),true));
  			
  		} else if (!isRightChildOfDot()) {
			out.print("this.");
			TypeDecl t = hostType();
			if (t!=m.hostType() && t.isInnerTypeOf(m.hostType())) {
				while (t!=m.hostType()) {			
					out.print("outer_o.");
					t = t.enclosingType();
				}
			}  		
  			out.print(renameMethod(m.name(),false));

  		} else {
  			out.print(".");
  			out.print(renameMethod(m.name(),false));
  		}

  		out.print("(");
  		// check if must create a temporary array to package the var args   	
		if (!m.isVariableArity() 
		|| (getNumArg()==m.getNumParameter() && getArg(getNumArg()-1).type()==m.getParameter(getNumArg()-1).type()) ) 
		// can leave parameters as they are
		{
	  		for (int i=0; i<getNumArg(); i++) {
  				if (i>0) out.print(",");
  				getArg(i).generateUsingResultCS(out);
  			}
  		// need to package last parameters (may be zero) into array		
  		} else {
  			// non-varargs parameters
	  		for (int i=0; i<m.getNumParameter()-1; i++) {
  				if (i>0) out.print(",");
  				getArg(i).generateUsingResultCS(out);
  			}  		
  			// create array for the rest
  			if (m.getNumParameter()>1) out.print(",");
  			out.print("new ");
  			m.getParameter(m.getNumParameter()-1).type().generateReferenceCS(out);
  			out.print("{");
  			for (int i=m.getNumParameter()-1; i<getNumArg(); i++) {
  				if (i>m.getNumParameter()-1) out.print(",");
  				getArg(i).generateUsingResultCS(out);
  			}
  			out.print("}");  			
  		}
  		out.print(")");  	
 	}
 	public TypeDecl MethodAccess.neededDownCast() {
  		MethodDecl m = decl();
		if (/*m.hostType().isParameterizedType() &&*/ m.erasedMethod().type()!=m.type()) {
      		return m.type();
    	}
    	return null;
 	}
 	
 	
//  	public void PackageAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {
// 	}
//  	public void ParseName.generateCS(com.greentube.javaconverter.CodePrinter out) {
// 	}

  	public void ParTypeAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getTypeAccess().generateCS(out);
 	}
 	
  	public void SuperAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("base");
 	}
  	public void ThisAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("this");
 	}
	
  	public void TypeAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		type().generateReferenceCS(out);
	}
 	
  	public void ArrayTypeAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getAccess().generateCS(out);
  		// test if inside an ArrayCreationExpr - may need to construct proper call parameter for dim()
  		ASTNode p = this;
  		while ( (p=p.getParent()) != null) {
  			if (p instanceof ArrayCreationExpr && !((ArrayCreationExpr)p).hasArrayInit()) {
  				out.print(",-1");
  				return;
  			}
  		}
  		out.print("[]");
	}
	
  	public void ArrayTypeWithSizeAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		Access a = getAccess();
  		if (a instanceof ArrayTypeWithSizeAccess) {
  			a.generateCS(out);
  			out.print(",");
  		}  		
  		getExpr().generateUsingResultCS(out);
	}   	

  	public void VarAccess.generateCS(com.greentube.javaconverter.CodePrinter out) {  	
  		Variable v = varDecl();
  		if (v.isClassVariable()) {
  			if (!isRightChildOfDot()) {
  				out.printCSName(v.hostType().constantPoolName());
  			} else if (v.hostType().isInterfaceDecl()) {
  				out.print("_constants");
  			}
  			out.print(".");
  			out.print(getID());
  			out.print("_f");  
  		} else if (v.isInstanceVariable()) {
			if (isRightChildOfDot()) {
				out.print(".");
			} else {
				out.print("this.");
				TypeDecl t = hostType();
				if (t!=v.hostType() && t.isInnerTypeOf(v.hostType())) {
					while (t!=v.hostType()) {			
						out.print("outer_o.");
						t = t.enclosingType();
					}
				}  		
  			}  		
			out.print(getID()+"_f");
  		} else if (v.isLocalVariable() || v.isParameter()) {  
  			if (v.hostType() == hostType()) {		
				out.print(getID());
				out.print("_l");
			} else {
				throw new RuntimeException("Can not access local variables of outer class method");
			}
  		} else {
  			// this fits in no other category - maybe the 'length' attribute of arrays 
  			if (getID().equals("length")) {
  				out.print(".Length");
  			} else {
				out.print("."+getID());
			}
  		}  		
 	}
 	public TypeDecl VarAccess.neededDownCast() {
  		if (isFieldAccess() && (varDecl() instanceof FieldDeclarator)) {
  			FieldDeclarator fd = (FieldDeclarator) varDecl();
  			if (fd.isInstanceVariable() && fd.type() != fd.erasedField().type()) {
    	  		return fd.type();
    		}  		
  		}
		return null; 		
 	}
  	
  	
  	// --- ArrayInit ---
  	
  	public void ArrayInit.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("new ");
  		type().generateReferenceCS(out);
  		out.print("{");
  		for (int i=0; i<getNumInit(); i++) {
  			if (i>0) out.print(",");
  			getInit(i).generateUsingResultCS(out);
  		}
  		out.print("}");
  	}
  	
  	// --- AssignExpr ---

  	public void AssignMinusExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" -= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignPlusExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		// do some case discrimination if this is a string concatenation
  		Expr d = getDest();
  		Expr s = getSource();
  		if (type().isString()) {
  			d.generateCS(out);
  			out.print (" = ");
  			out.print("System.String.Join(\"\",java.lang.SYSTEM.str(");
  			d.generateCS(out);
  			out.print("),java.lang.SYSTEM.str(");
			s.generateUsingResultCS(out);
			out.print("))");
  		} else {
	  		d.generateCS(out);
  			out.print(" += ");
  			s.generateUsingResultCS(out);
  		}
  	}
  	public void AssignAndExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" &= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignOrExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" |= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignXorExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" ^= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignDivExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" /= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignModExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" %= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignMulExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" *= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignLShiftExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" <<= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignRShiftExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" >>= ");
  		getSource().generateUsingResultCS(out);
  	}
  	public void AssignURShiftExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getDest().generateCS(out);
  		out.print(" = (int) (");
  		out.print("((uint)(");
  		getDest().generateCS(out);
  		out.print(")) >> ");
  		getSource().generateUsingResultCS(out);
  		out.print(")");
  	}
  	public void AssignSimpleExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		Expr d = getDest();
  		Expr s = getSource();

  		d.generateCS(out);
  		out.print(" = ");

		if (d.type().isChar() && s.type().isInt()) {
			out.print("java.lang.SYSTEM.castToChar(");
  			s.generateUsingResultCS(out);
  			out.print(")");		
		} else {
  			s.generateUsingResultCS(out);
		}
  	}

  	// --- Binary ---

  	public void AddExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		// do some case discrimination if this is a string concatenation
  		Expr l = getLeftOperand();
  		Expr r = getRightOperand();
  		
  		if (type().isString()) {
			if ((l.type().isString() && l.isConstant()) || (l instanceof AddExpr)) {
				l.generateUsingResultCS(out);
			} else {
				out.print("java.lang.SYSTEM.str(");
  				l.generateUsingResultCS(out);
				out.print(")");
			}			
	  		out.print("+");
			if ((r.type().isString() && r.isConstant()) || (r instanceof AddExpr)) {
				r.generateUsingResultCS(out);
			} else {
				out.print("java.lang.SYSTEM.str(");
  				r.generateUsingResultCS(out);
				out.print(")");
			}
		} else {
  			l.generateUsingResultCS(out);
	  		out.print("+");
			r.generateUsingResultCS(out);	
		}		
  	}
  	public void SubExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("-");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void DivExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
		TypeDecl t = type();
		getLeftOperand().generateUsingResultCS(out);
  		out.print("/");
  		getRightOperand().generateUsingResultCS(out);
  	}
  	public void ModExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("%");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void MulExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("*");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void AndBitwiseExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("&");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void OrBitwiseExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("|");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void XorBitwiseExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("^");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void AndLogicalExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("&&");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void OrLogicalExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("||");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void EQExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("==");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void NEExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("!=");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void GEExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print(">=");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void GTExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print(">");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void LEExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("<=");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void LTExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("<");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void LShiftExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print("<<");
  		getRightOperand().generateUsingResultCS(out);

  	}
  	public void RShiftExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getLeftOperand().generateUsingResultCS(out);
  		out.print(">>");
  		getRightOperand().generateUsingResultCS(out);  	
  	}
  	public void URShiftExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("((int)(");
  		out.print("java.lang.SYSTEM.makeUnsigned(");
  		getLeftOperand().generateUsingResultCS(out);
  		out.print(")>>");
  		getRightOperand().generateUsingResultCS(out);
  		out.print("))");  	
  	}
  	
  	
  	// --- CastExpr ---
  	
  	public void CastExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
		TypeDecl t = type();
		Expr e = getExpr();
		if (t.isPrimitiveType()) {
			if (t.isBoolean()) {
				e.generateUsingResultCS(out);			
			} else if (t.isByte()) {
				out.print("(java.lang.SYSTEM.castToByte(");
				e.generateUsingResultCS(out);
				out.print("))");				
			} else if (t.isChar()) {
				out.print("(java.lang.SYSTEM.castToChar(");
				e.generateUsingResultCS(out);
				out.print("))");
			} else if (t.isInt()) {
				out.print("(java.lang.SYSTEM.castToInt(");
				e.generateUsingResultCS(out);
				out.print("))");
			} else if (t.isDouble()) {
				out.print("(java.lang.SYSTEM.castToDouble(");
				e.generateUsingResultCS(out);
				out.print("))");
			} else {
				e.dumpTree(System.out);
				throw new RuntimeException("Type not supported in cast:"+t.fullName());
			}
		} else {
	  		out.print("((");
  			getTypeAccess().generateCS(out);
	  		out.print(")");
			e.generateUsingResultCS(out);
			out.print(")");
		}
  	}
  	
  	// --- ConditionalExpr ---
  	
  	public void ConditionalExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getCondition().generateUsingResultCS(out);
  		out.print("?");
  		getTrueExpr().generateUsingResultCS(out);
  		out.print(":");
  		getFalseExpr().generateUsingResultCS(out);
  	}
  	
  	// --- InstanceOfExpr ---

  	public void InstanceOfExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getExpr().generateUsingResultCS(out);
  		out.print(" is ");
  		getTypeAccess().generateCS(out);
  	}
  	
  	// --- PrimaryExpr ---
  	
  	public void ArrayCreationExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		// array with initialization data
  		if (hasArrayInit()) {
  			getArrayInit().generateCS(out);
  		} else {
  			TypeDecl t = type();
  			// one-dimensional array
  			if (t.dimension()==1) {
  				out.print("new ");
  				t.elementType().generateReferenceCS(out);
  				out.print("[");
  				getTypeAccess().generateCS(out);
  				out.print("]");
  			// multi-dimensional array
  			} else {
	  			out.print("(java.lang.SYSTEM.dim<");
  				t.elementType().generateReferenceCS(out);
  				out.print(">(");
  				getTypeAccess().generateCS(out);
				out.print("))");
			}
  		}
  	}
  	
  	public void Literal.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		constant().generateCS(out);
  	}
//  	public void IllegalLiteral.generateCS(com.greentube.javaconverter.CodePrinter out) {
//  	}
  	public void NullLiteral.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("null");
  	}
  	public void ParExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("(");
  		getExpr().generateCS(out);
  		out.print(")");
  	}
  	
  	// --- Unary ---
  	public void BitNotExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("~");
  		getOperand().generateUsingResultCS(out);  	
  	}
  	public void LogNotExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print("!");
  		getOperand().generateUsingResultCS(out);  	
  	}
  	public void MinusExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(" - ");
  		getOperand().generateUsingResultCS(out);  	
  	}
  	public void PlusExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(" + ");    
  		getOperand().generateUsingResultCS(out);  	
  	}
  	public void PostDecExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getOperand().generateCS(out);  	
  		out.print(" -- ");    
  	}
  	public void PostIncExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		getOperand().generateCS(out);  	
  		out.print(" ++ ");    
  	}
  	public void PreDecExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(" -- ");    
  		getOperand().generateCS(out);  	
  	}
  	public void PreIncExpr.generateCS(com.greentube.javaconverter.CodePrinter out) {
  		out.print(" ++ ");    
  		getOperand().generateCS(out);  	
  	}
	
}


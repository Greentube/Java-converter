/**
 * Implement the javascript code generation for all AST nodes that are not derived from Expr or Stmt.
 * This covers mainly the class and interface declarations and the attached methods and fields.
 * This code generation creates multiple output files if multiple classes are need (for 
 * inner classes or lambas and such). 
 */

import com.greentube.javaconverter.CodePrinter;
import com.greentube.javaconverter.CodePrinterJS;

aspect GenerateJS 
{        
    public void ASTNode.generateJS(CodePrinterJS out) 
    {
        this.dumpTree(System.err);
        throw new RuntimeException("Can not create JS for:"+this.getClass().getName());
    }

    public void CompilationUnit.generateJS(File outputfolder) 
    {
        for (TypeDecl t:getTypeDecls()) 
        {   CodePrinterJS out = new CodePrinterJS
            (   outputfolder,
                    CodePrinter.escapePackagePath(t.packageName(),"$") 
                    + CodePrinter.escapeIdentifier(t.uniqueName(),".js","$",null)
            );
            t.generateJS(out);
            out.finish();                   
        }
    }
        
    public void ClassDecl.generateJS(CodePrinterJS out) 
    {
        for (TypeDecl t:nestedTypes()) 
        {   CodePrinterJS o2 = new CodePrinterJS
            (   out.getOutputFolder(), 
                CodePrinter.escapePackagePath(t.packageName(),"$") 
                   + CodePrinter.escapeIdentifier(t.uniqueName(),".js","$",null)
            );
            t.generateJS(o2);
            o2.finish();            
        }
      
        out.print("var ");
        out.printJSName(packageName(), uniqueName());
        out.print(" = function(");

        // allocator function
        boolean foundpar=false; 
        if (needsEnclosing()) 
        {   out.print("_o");
            foundpar=true;
        }
        for (Variable v:enclosingVariables()) 
        {   if (foundpar) out.print(", ");
            out.printIdentifier(v.name(),"_o");
            foundpar=true;
        }
        out.println(")");
        out.println("{");        
        out.increaseIndent();   
        if (!superclass().isObject()) 
        {   out.printAndMemorizeLoad(superclass().packageName(),superclass().uniqueName());
            out.println(".call(this" + (superclass().needsEnclosing()?",_o":"") +");");
        }  
        if (needsEnclosing() && !superclass().needsEnclosing()) 
        {   out.println("this._o = _o;");
        }
        for (Variable v:enclosingVariables()) 
        {   out.print("this.");
            out.printIdentifier(v.name(),"_o");
            out.print(" = ");
            out.printIdentifier(v.name(),"_o");
            out.println(";");
        }
        for (BodyDecl bd:getBodyDeclList()) 
        {   if (bd.isField()) 
            {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                {   if (!fd.isStatic()) 
                    {   out.print("this.");
                        out.printIdentifier(fd.getID());
                        out.print(" = ");
                        fd.fieldDecl().type().generateDefaultValueJS(out);
                        out.println(";");
                    }
                }
            }
        }
        out.decreaseIndent(); 
        out.println("};");

        // static methods and fields
        for (BodyDecl bd:getBodyDeclList()) 
        {   if (bd instanceof MethodDecl) 
            {   MethodDecl md = (MethodDecl) bd;
                if (!md.isStatic()) continue;
                bd.generateJS(out);         
            } 
            else if (bd.isField()) 
            {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                {   if (!fd.isStatic()) continue;
                    out.print("var ");
                    out.printJSName(packageName(), uniqueName());                   
                    out.print("_");
                    out.printIdentifier(fd.getID());
                    out.print(" = ");
                    if (fd.getInit()!=null && fd.getInit().isConstant() && fd.isFinal()) 
                    {   fd.getInit().generateUsingResultJS(out);
                    } 
                    else
                    {   fd.fieldDecl().type().generateDefaultValueJS(out);
                    }
                    out.println(";");
                }
            }
        }       
                
        if (this instanceof EnumDecl) 
        {   out.print("var ");
            out.printJSName(packageName(), uniqueName()); 
            out.println("_values_0 = function()");
            out.println("{");
            out.increaseIndent();
            out.println("return [");
            out.increaseIndent(); 
            for (EnumConstant ec:((EnumDecl)this).enumConstants()) 
            {   out.printJSName(packageName(), uniqueName());           
                out.print("_");
                out.printIdentifier(ec.getID());
                out.println(", ");
            }
            out.decreaseIndent();
            out.println("];");        
            out.decreaseIndent();
            out.println("};");
            
            out.print("var ");
            out.printJSName(packageName(), uniqueName()); 
            out.println("_valueOf_1 = function(n)");
            out.println("{");
            out.increaseIndent();
            out.println("switch(n)");
            out.println("{");
            out.increaseIndent();            
            for (EnumConstant ec:((EnumDecl)this).enumConstants()) 
            {   out.print("case ");
                Constant.generateStringJS(out,ec.getID());
                out.print(": return ");                            
                out.printJSName(packageName(), uniqueName());           
                out.print("_");
                out.printIdentifier(ec.getID());                
                out.println(";");
            }
            out.println("default: throw (new java_lang_IllegalArgumentException())._0()._e;");
            out.decreaseIndent();
            out.println("}");            
            out.decreaseIndent();
            out.println("};");
        }           
                        

        out.print("_defclass(");
        out.printJSName(packageName(), uniqueName());
        out.print(", ");
        out.printAndMemorizeLoad(superclass().packageName(),superclass().uniqueName());
        out.print(", ");

        if (!hasImplements()) 
        {   out.print("null");
        }
        else
        {   out.print("[");
            int n=0;
            for (Access ac: getImplementsList()) 
            {   if (n>0) out.print(", ");
                while (ac instanceof Dot) ac=((Dot)ac).getRight();
                TypeDecl t = (ac instanceof TypeAccess) ? ((TypeAccess) ac).type()    
                                                        : ((ParTypeAccess) ac).type(); 
                out.printAndMemorizeLoad(t.packageName(),t.uniqueName());            
                ac.generateJS(out);
                n++;
            }
            out.print("]");
        } 
        out.println(",");
        out.println("{");        
        out.increaseIndent();                                     

        Collection<MethodDecl> bridgemethods = bridgeMethods();
        // instance methods                                                             
        for (BodyDecl bd : methodsAndConstructors()) 
        {   // check if need to suppress auto-generated bridge methods 
            if (bridgemethods.contains(bd)) continue;
              
            // check need to suppress everything static here. will be added later on.            
            if (bd instanceof MethodDecl) 
            {   MethodDecl md = (MethodDecl) bd;
                if (md.isStatic()) { continue; }                 
            }
            // suppress synthetic constructors
            else if (bd instanceof ConstructorDecl) 
            {   ConstructorDecl cd = (ConstructorDecl) bd;
                  if (cd.isSynthetic()) { continue; }
            }
            bd.generateJS(out);
        }       
        
        out.decreaseIndent();                                     
        out.println ("});");
        
        // additional initialization code
        for (BodyDecl bd:getBodyDeclList()) 
        {   if (bd.isField()) 
            {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                {   if (fd.isStatic()) 
                    {   if (fd.getInit()!=null && !(fd.isFinal() && fd.getInit().isConstant()) ) 
                        {   out.printJSName(packageName(), uniqueName());                   
                            out.print("_");
                            out.printIdentifier(fd.getID());
                            out.print(" = ");
                            fd.getInit().generateUsingResultJS(out);
                            out.println(";");
                        }
                    }
                }
            } else if (bd instanceof StaticInitializer) {
                bd.generateJS(out);
            }
        }
    }
    
    public void EnumDecl.generateJS(CodePrinterJS out)
    {
        super.generateJS(out);
        
        ArrayList<String> values = new ArrayList<>();
        boolean needexternalinitialization = false;
        
        int ordinal = 0;
        for (EnumConstant ec:enumConstants()) 
        {   if (ec.getInit().type()!=this) 
            {   needexternalinitialization = true;
            } 
            else
            {   out.print("var ");
                out.printJSName(packageName(), uniqueName());           
                out.print("_");
                out.printIdentifier(ec.getID());
                out.print(" = ");
                out.print("new ");
                out.printJSName(packageName(), uniqueName());
                out.print("()._"+(ec.getNumArg()+2)+"(");
                Constant.generateStringJS(out, ec.getID());
                out.print(", "+ordinal);             
                for (int i=0; i<ec.getNumArg(); i++) 
                {   out.print(", ");
                    ec.getArg(i).generateJS(out);
                }
                out.println(");");                
            }
            
            values.add(ec.getID());         
            ordinal++;          
        }
                
        if (needexternalinitialization) 
        {   out.memorizeReference(packageName(),uniqueName()+"$init");
            
            CodePrinterJS o2 = new CodePrinterJS
            (   out.getOutputFolder(),
                CodePrinterJS.escapePackagePath(packageName(),"$") 
                   + CodePrinterJS.escapeIdentifier(uniqueName()+"$init",".js","$",null)
            );

            ordinal = 0;
            for (EnumConstant ec:enumConstants()) 
            {   if (ec.getInit().type()!=this) 
                {   o2.print("var ");
                    o2.printJSName(packageName(), uniqueName());                    
                    o2.print("_");
                    o2.printIdentifier(ec.getID());
                    o2.print(" = ");
                    o2.print("new ");
                    TypeDecl t = ec.getInit().type();
                    o2.printAndMemorizeComplete(t.packageName(),t.uniqueName());
                    o2.print("()._"+(ec.getNumArg()+2)+"(");
                    Constant.generateStringJS(o2, ec.getID());
                    o2.print(", "+ordinal);
                    for (int i=0; i<ec.getNumArg(); i++) 
                    {   o2.print(", ");
                        ec.getArg(i).generateJS(o2);
                    }
                    o2.println(");");
                }
                ordinal++;
            }               
                
            o2.finish();            
        }
    }  
    
    public void InterfaceDecl.generateJS(CodePrinterJS out) 
    {
        out.print("var ");
    
        out.printJSName(packageName(),uniqueName());
        out.println(" =");
        out.println("{ ");
        out.increaseIndent();
        out.print("_superinterfaces: [");
        if (hasSuperInterface()) 
        {   int n=0;
            for (Access ac: getSuperInterfaceList()) 
            {   if (n>0) { out.print(", "); }
                while (ac instanceof Dot) { ac=((Dot)ac).getRight(); }
                TypeDecl t = (ac instanceof TypeAccess) ? ((TypeAccess) ac).type() 
                                                        : ((ParTypeAccess) ac).type();
                out.printAndMemorizeLoad(t.packageName(),t.uniqueName());            
                n++;
            }           
        }
        out.println("],");
                
        Vector<MethodDecl> defaults = new Vector<>();
        for (BodyDecl bd:getBodyDeclList()) 
        {   if (bd instanceof MethodDecl) 
            {   MethodDecl md = (MethodDecl) bd;
                if (md.isDefault())
                {   defaults.add(md);
                }                
            }
        }
        if (defaults.size()>0) 
        {     out.println("_defaults:");
              out.print("{");
              out.increaseIndent();           
              for (MethodDecl md:defaults)
              {     md.generateJS(out);
              }     
              out.decreaseIndent();
              out.println("},");
        }   
        
        out.decreaseIndent();
        out.println("};");
                    
        // additional initialization code and static fields/methods
        for (BodyDecl bd:getBodyDeclList()) 
        {   if (bd.isField()) 
            {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                {   if (fd.isStatic()) 
                    {   if (fd.getInit()!=null && !(fd.isFinal() && fd.getInit().isConstant()) ) 
                        {   out.print("var ");
                            out.printJSName(packageName(), uniqueName());                   
                            out.print("_");
                            out.printIdentifier(fd.getID());
                            out.print(" = ");
                            fd.getInit().generateUsingResultJS(out);
                            out.println(";");
                        }
                    }
                }
            } 
            else if (bd instanceof MethodDecl)
            {   MethodDecl md = (MethodDecl) bd;
                if (md.isStatic())
                {   md.generateJS(out);
                }
            }
            else if (bd instanceof StaticInitializer) 
            {   bd.generateJS(out);
            }
        }
    }  
    

    public void ConstructorDecl.generateJS(CodePrinterJS out) 
    {   
        Block block = getBlock();
        int numpar = getNumParameter();

        // decide which kind of other constructors are called   
        boolean callsthisconstructor = false;
        int numcalledconstructorparameters = 0;
        if (hasConstructorInvocation()) 
        {   Stmt stmt = getConstructorInvocation();
            if (stmt instanceof ExprStmt) 
            {   ExprStmt exprStmt = (ExprStmt) stmt;
                Expr expr = exprStmt.getExpr();
                numcalledconstructorparameters = ((ConstructorAccess)expr).getNumArg();
                if (!expr.isSuperConstructorAccess())  { callsthisconstructor = true; }
            }
        }
        
        // check if the whole constructor function can be entirely ommited
        // (possible for default constructors that only call default
        // super-constructor and without need to initialize instance variables) 
        mayommit: if 
        (   numpar==0 
            && block.getNumStmt()==0 
            && !callsthisconstructor 
            && numcalledconstructorparameters==0  
        )
        {   // check if there are some fields that would need initialization
            for (BodyDecl bd:hostType().getBodyDeclList()) 
            {   if (bd.isField()) 
                {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                    {   if (!fd.isStatic() && fd.getInit()!=null) { break mayommit; } 
                    }
                }
            }
            return;  // can safely ommit
        }

        out.print("_"+makeJSSuffix()+": function(");
        for (int i=0; i<numpar; i++) 
        {   if (i>0) out.print(", ");
            out.printIdentifier(getParameter(i).name());
        }
        out.println(")");
        out.println("{");
        out.increaseIndent();

        // if calling a constructor of this, do not initialize all variables twice      
        if (callsthisconstructor) 
        {   getConstructorInvocation().generateJS(out);
        } 
        else 
        {   // when a super-constructor is called, the initialization of everything 
            // else needs to be done here.
            // call the super-constructor (if not from Object)
            if (! ( (ClassDecl) (((ClassDecl)hostType()).superclass()) ) .isObject()) 
            {   getConstructorInvocation().generateJS(out);
            }

            // do all field initializations
            for (BodyDecl bd:hostType().getBodyDeclList()) 
            {   if (bd.isField()) 
                {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                    {   if (!fd.isStatic() && fd.getInit()!=null) 
                        {   out.print("this.");
                            out.printIdentifier(fd.getID());
                            out.print(" = ");
                            fd.getInit().generateUsingResultJS(out);
                            out.println(";");
                        }
                    }
                }
                else if (bd instanceof InstanceInitializer) 
                {   bd.generateJS(out);
                }
            }
        }
        // execute constructor
        int n = block.getNumStmt();
        for (int i=0; i<n; i++) 
        {   Stmt stmt = block.getStmt(i);
            stmt.generateJS(out);
        }
        out.print("return this;");
        out.decreaseIndent();
        out.println();        
        out.println("},");
    }

    public String ConstructorDecl.makeJSSuffix()
    {
        int numpar = getNumParameter();
        if (! ((ClassDecl)hostType()).hasSimilarConstructors(numpar) ) 
        {   return "" + numpar;
        }
        
        StringBuilder sb = new StringBuilder();        
        sb.append(numpar);
        for (int i=0; i<numpar; i++)
        {   sb.append(getParameter(i).type().makeJSSignature());        
        }        
        return sb.toString();
    }

//  public void EnumConstant.generateJS(CodePrinterJS out) {
//  }

    public void InstanceInitializer.generateJS(CodePrinterJS out) 
    {   getBlock().generateJS(out); 
    }
//  public void FieldDecl.generateJS(CodePrinterJS out) {
//  }
//  public void MemberClassDecl.generateJS(CodePrinterJS out) {
//  }
//  public void MemberInterfaceDecl.generateJS(CodePrinterJS out) {
//  }

    public void MethodDecl.generateJS(CodePrinterJS out) 
    {   
        Block block = getBlock();
        if (block==null) { return; }

        if (isStatic())
        {   TypeDecl t = hostType();
            out.print("var ");
            out.printJSName(t.packageName(), t.uniqueName());
            out.print("_");
            out.printIdentifier(name(), "_"+makeJSSuffix());
            out.print(" = ");
        }
        else
        {   out.printIdentifier(name(), "_"+makeJSSuffix());
            out.print(": ");
        }
        out.print("function(");
        int numpar = getNumParameter();
        for (int i=0; i<numpar; i++) 
        {   if (i>0) out.print(", ");
            out.printIdentifier(getParameter(i).name());
        }
        out.println(")");
        
        block.generateJSWithDelimiter(out, isStatic() ? ";" : ",");
    }

    public String MethodDecl.makeJSSuffix()
    {
        int numpar = getNumParameter();
        boolean forcelongdesignator = false;
        
        // can not use short method designator for 'remove' methods use to implement the
        // List interface's remove(int) method 
        if ("remove".equals(name()) && numpar==1 && getParameter(0).type().isInt())
        {    
             String fullname = hostType().name()+"."+hostType().packageName();
             if (fullname.equals("java.util.List") 
              || fullname.equals("java.util.ArrayList")
              || fullname.equals("java.util.LinkedList")
              || fullname.equals("java.util.AbstractList")
              || fullname.equals("java.util.Vector"))
             {  forcelongdesignator = true;
             }
        }
        
        if (!forcelongdesignator && ! hostType().hasSimilarMethods(name(), numpar, isStatic()) ) 
        {   return "" + numpar;
        }
        
        StringBuilder sb = new StringBuilder();        
        sb.append(numpar);
        for (int i=0; i<numpar; i++)
        {   sb.append(getParameter(i).type().makeJSSignature());        
        }        
        return sb.toString();
    }
        

    public void StaticInitializer.generateJS(CodePrinterJS out) 
    {
        getBlock().generateJS(out);
    }

//  public void SubstitutedBodyDecl.generateJS(CodePrinterJS out) 
//  {
//  }
    
    public void TypeDecl.generateDefaultValueJS(CodePrinterJS out)
    {
        if (isPrimitiveType()) 
        {   if (isBoolean()) { out.print("false"); } 
        	else { out.print("0"); } 
        } 
        else
        {   out.print("null");
        }
    }
     
    public String TypeDecl.makeJSSignature()
    {
        if (isPrimitiveType())
        {   if (isInt()) { return "I"; }
        	else if (isLong()) { return "L"; }
            else if (isByte()) { return "B"; }
            else if (isChar()) { return "C"; }
            else if (isShort()) { return "S"; }
            else if (isBoolean()) { return "Z"; }
            else if (isDouble()) { return "D"; }
            else 
            {   throw new RuntimeException("Type not supported:"+fullName());
            }
        }
        else {
            if (isArrayDecl())
            {   String leading = "A";
                for (int i=1; i<dimension(); i++) { leading+="A"; }
                return leading + elementType().erasure().makeJSSignature();
            }
            else
            {   TypeDecl et = erasure();
                String fullname = et.packageName()+"."+et.uniqueName();
                return "L" + fullname.replace('.','_') + "$";
            }
        }
    }
            
    public void TypeDecl.generateElementTypeAndDimensionsJS(CodePrinterJS out) 
    {   
        TypeDecl et = elementType();
        if (et.isPrimitiveType()) 
        {   if (et.isInt()) { out.print("\"I\""); }
        	else if (et.isLong()) { out.print("\"L\""); }
            else if (et.isByte()) { out.print("\"B\""); }
            else if (et.isChar()) { out.print("\"C\""); }
            else if (et.isShort()) { out.print("\"S\""); }
            else if (et.isBoolean()) { out.print("\"Z\""); }
            else if (et.isDouble()) { out.print("\"D\""); }
            else 
            {   throw new RuntimeException("Type not supported:"+et.fullName());
            }
        }
        else
        {   TypeDecl erased = et.erasure();
            String fullname = erased.packageName()+"."+erased.uniqueName();
            if (fullname.equals("java.lang.CharSequence")    // unsupported type
             || fullname.equals("java.lang.String"))
            {   out.print("\"X\"");
            }
            else
            {   out.printAndMemorizeReference(erased.packageName(),erased.uniqueName());
            }
        }
        
        out.print(", ");
        out.print(""+dimension());    
    }
    
    public static void Constant.generateStringJS(CodePrinterJS out, String s) 
    {   
        StringBuilder sb = new StringBuilder();
        sb.append('\"');
        for (int i=0; i<s.length(); i++)
        {   char c = s.charAt(i);        
            switch(c) 
            {   case '\b': { sb.append("\\b"); break; }
                case '\f': { sb.append("\\f"); break; }
                case '\n': { sb.append("\\n"); break; }
                case '\r': { sb.append("\\r"); break; }
                case '\t': { sb.append("\\t"); break; }
                case '\\': { sb.append("\\\\"); break; }
                case '"':  { sb.append("\\\""); break; }
                case '\'': { sb.append("\\'"); break; }
                default:
                {   if (c>=32 && c<=126) 
                    {   sb.append(c);
                    } 
                    else 
                    {   String hx = Integer.toHexString((int)c);
                        sb.append("\\u");
                        for (int j=hx.length(); j<4; j++) 
                        {   sb.append("0");
                        }
                        sb.append(hx);
                    }
                    break;
                }
            }
        }
        sb.append('"');
        out.print(sb.toString());
    }

    public void Constant.generateJS(CodePrinterJS out) 
    {   
        if (this instanceof ConstantBoolean) 
        {   out.print(booleanValue()?"true":"false");
        }
        else if (this instanceof ConstantChar) 
        {   out.print(""+intValue());
        }
        else if (this instanceof ConstantDouble) 
        {   double d = doubleValue();
            if (d==Double.POSITIVE_INFINITY) 
            {   out.print("(1.0/0.0)");
            }
            else if (d==Double.NEGATIVE_INFINITY)
            {   out.print("((-1.0)/0.0)");
            }
            else 
            {   out.print(""+doubleValue());   
            }   
        }
        else if (this instanceof ConstantInt) 
        {   out.print(""+intValue());
        }
        else if (this instanceof ConstantLong) 
        {   long v = longValue();
        	if (v>-9007199254740992L && v<9007199254740992L) 
        	{	out.print(""+v);
        	}
        	else
        	{	out.print("(new _long( " + ((int)v) + "," + ((int)(v>>32)) +"))");
        	} 
        }
        else if (this instanceof ConstantString) 
        {   generateStringJS(out, stringValue());
        }
    }
}

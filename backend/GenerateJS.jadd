import com.greentube.javaconverter.CodePrinter;

aspect GenerateJS {
  	  	
  	public void ASTNode.generateJS(CodePrinter out) {
  		System.err.print("UNEXPECTED:"+this.getClass().getName());
		this.dumpTree(System.err);
  	}

  	public void CompilationUnit.generateJS(File outputfolder) {
    	for (TypeDecl t:getTypeDecls()) {
			CodePrinter out = new CodePrinter(outputfolder,
					CodePrinter.escapePackagePath(t.packageName()) 
				    + CodePrinter.escapeIdentifier(t.uniqueName(), true) + ".js"
				);
	    	t.generateJS(out);
			out.finish();    		    	
    	}
  	}
    	
	public void ClassDecl.generateJS(CodePrinter out) {
		for (TypeDecl t:nestedTypes()) {
			CodePrinter o2 = new CodePrinter(out, 
					CodePrinter.escapePackagePath(t.packageName()) 
				    + CodePrinter.escapeIdentifier(t.uniqueName(), true) + ".js"
			);
	    	t.generateJS(o2);
    		o2.finish();    		
		}
	  
    	out.print("var ");
    	out.printJSName(packageName(), uniqueName());
    	out.print(" = _extendClass(");
    	
    	if (hasSuperClass()) {
      		out.printAndMemorizeLoad(superclass().packageName(),superclass().uniqueName());
    	} else {
    		out.printAndMemorizeLoad("java.lang", "Object");
    	} 
    	out.print (",{ ");
    	out.println();
    	out.increaseIndent(); 
    	    	        	    	        	    	    
      	for (BodyDecl b : methodsAndConstructors()) {
      		// check if need to suppress auto-generated methods related to Enums
			if (b instanceof MethodDecl) {
      			MethodDecl md = (MethodDecl) b;
      			if (this instanceof EnumDecl) {
      				if (md.getID().equals("values") && md.getNumParameter()==0 ) continue;
      				if (md.getID().equals("valueOf") && md.getNumParameter()==1 )  continue;
      			}
				if (md.getID().startsWith("$SwitchMap$") && md.getNumParameter()==0) continue;      		
      		}
      		else if (b instanceof ConstructorDecl) {
      			ConstructorDecl cd = (ConstructorDecl) b;
      			if (this instanceof EnumDecl) {
      				if (cd.isSynthetic()) continue;
      			}      		
      		}
	        b.generateJS(out);
    	}    	    	    
    	    	    	
		out.decreaseIndent(); 
		out.println();
		out.print("},\"");
    	out.printJSName(packageName(), uniqueName());
		out.print("\",");
				
		if (!hasImplements()) {
			out.print("null");
		} else {
			out.print("[");
			int n=0;
      		for (Iterator<TypeDecl> iter = interfacesIterator(); iter.hasNext(); n++) {
      			if (n>0) out.print(",");
      			TypeDecl t = iter.next();
        		out.printAndMemorizeLoad(t.packageName(), t.uniqueName());
      		}			
			out.print("]");
		} 
		out.print(");");
		out.println();

		for (BodyDecl bd:getBodyDeclList()) {
			if (bd.isField()) {
				for (FieldDeclarator fd:bd.fieldDeclarations()) {
					if (fd.isStatic()) {
				    	out.printJSName(packageName(), uniqueName());					
						out.print(".prototype.");
						out.printJSIdentifier(fd.getID(),"_f");
						out.print(" = ");
						out.print(fd.fieldDecl().type().isPrimitiveType() ? "0":"null");
						out.print(";");
						out.println();
					}
			 	}
			}
		}		
		for (BodyDecl bd:getBodyDeclList()) {
			if (bd.isField()) {
				for (FieldDeclarator fd:bd.fieldDeclarations()) {
					if (fd.isStatic() && fd.getInit()!=null) {
    					out.printJSName(packageName(), uniqueName());					
						out.print(".prototype.");
						out.printJSIdentifier(fd.getID(),"_f");
						out.print(" = ");
						fd.getInit().generateJS(out);
						out.print(";");
						out.println();
					}
				}
			} else if (bd instanceof StaticInitializer) {
				bd.generateJS(out);
			}
		}
  	}
  	
	public void EnumDecl.generateJS(CodePrinter out) {
		super.generateJS(out);
		
		ArrayList<String> values = new ArrayList<>();
		boolean needexternalinitialization = false;
		
		int ordinal = 0;
		for (EnumConstant ec:enumConstants()) {
			if (ec.getInit().type()!=this) {
				needexternalinitialization = true;
			} else {
    			out.printJSName(packageName(), uniqueName());			
				out.print(".prototype.");
				out.printJSIdentifier(ec.getID(),"_f");
				out.print(" = ");
				out.print("(new ");
				out.printJSName(packageName(), uniqueName());
				out.print("())._"+(ec.getNumArg()+2)+"(\"");
				String id = ec.getID();
				for (int i=0; i<id.length(); i++) {
					Constant.generateCharacterJS(out, id.charAt(i)); 
				}
				out.print("\","+ordinal);				
				for (int i=0; i<ec.getNumArg(); i++) {
					out.print(",");
					ec.getArg(i).generateJS(out);
				}
				out.print(");");				
				out.println();
			}
			
			values.add(ec.getID());			
			ordinal++;			
		}
		
		out.printJSName(packageName(), uniqueName());
		out.print(".prototype.values_0 = function() {");
		out.println();
		out.increaseIndent();
		out.print("return [");
		for (String v: values) {
			out.printJSName(packageName(), uniqueName());			
			out.print(".prototype.");
			out.printJSIdentifier(v,"_f");
			out.print(",");
		}
		out.print("];");		
		out.println();
		out.decreaseIndent();
		out.print("};");
		out.println();
		
		if (needexternalinitialization) {
			out.memorizeReference(packageName(),uniqueName()+"$init");
			
			CodePrinter o2 = new CodePrinter(out,
					CodePrinter.escapePackagePath(packageName()) 
				    + CodePrinter.escapeIdentifier(uniqueName()+"$init", true) + ".js"
			);

				ordinal = 0;
				for (EnumConstant ec:enumConstants()) {
					if (ec.getInit().type()!=this) {
						o2.printJSName(packageName(), uniqueName());					
						o2.print(".prototype.");
						o2.printJSIdentifier(ec.getID(),"_f");
						o2.print(" = ");
						o2.print("(new ");
						TypeDecl t = ec.getInit().type();
						o2.printAndMemorizeComplete(t.packageName(),t.uniqueName());
						o2.print("())._"+(ec.getNumArg()+2)+"(\"");
						String id = ec.getID();
						for (int i=0; i<id.length(); i++) {
							Constant.generateCharacterJS(o2,id.charAt(i));
						}
						o2.print("\","+ordinal);
						for (int i=0; i<ec.getNumArg(); i++) {
							o2.print(",");
							ec.getArg(i).generateJS(o2);
						}
						o2.print(");");
						o2.println();
					}
					ordinal++;
				}				
	    		
			o2.finish();    		
		}
	}  
  	
	public void InterfaceDecl.generateJS(CodePrinter out) {

    	out.print("var ");
    	out.printJSName(packageName(),uniqueName());
    	out.print(" = _defineInterface(");
		out.print("\"");
    	out.printJSName(packageName(),uniqueName());
		out.print("\",");
		if (!hasSuperInterface()) {
			out.print("null");
    		out.memorizeLoad("java.lang","Object");
		} else {
			out.print("[");
			int n=0;
      		for (Iterator<TypeDecl> iter = interfacesIterator(); iter.hasNext(); n++) {
      			if (n>0) out.print(",");
      			TypeDecl t = iter.next();
        		out.printAndMemorizeLoad(t.packageName(),t.uniqueName());
      		}			
			out.print("]");
		}
		out.print(");");
		out.println();
		
		for (BodyDecl bd:getBodyDeclList()) {
			if (bd.isField()) {
				for (FieldDeclarator fd:bd.fieldDeclarations()) {
					if (fd.isStatic()) {
						out.printAndMemorizeComplete(packageName(),uniqueName());
						out.print(".prototype.");
						out.printJSIdentifier(fd.getID(), "_f");
						out.print(" = ");
						fd.getInit().generateJS(out);
						out.print(";");					}
						out.println();
				}
			}
		}		
		
	}  
  	

  	public void ConstructorDecl.generateJS(CodePrinter out) {
		Block block = getBlock();
		
  		int numpar = getNumParameter();  		
  		out.print("_"+numpar+": function(");
  		for (int i=0; i<numpar; i++) {
  			if (i>0) out.print(",");
  			out.printJSIdentifier(getParameter(i).name(), "");
  		}
  		out.print(") {");  		
  		out.println();
		out.increaseIndent();

		// decide if all the fields have to be initialized right here	
		boolean needsInit = true;			
		if (hasConstructorInvocation()) {
	        Stmt stmt = getConstructorInvocation();
        	if (stmt instanceof ExprStmt) {
          		ExprStmt exprStmt = (ExprStmt) stmt;
          		Expr expr = exprStmt.getExpr();
          		if (!expr.isSuperConstructorAccess()) {
            		needsInit = false;
          		}
        	}
      	}		
		
		// if calling a constructor of this, do not initialize all variables twice		
		if (! needsInit) {
			getConstructorInvocation().generateJS(out);			
		} else { 
		// when a super-constructor is called, the initialization of everything else needs to be done here
			// set instance variables to 0 / null		
			for (BodyDecl bd:hostType().getBodyDeclList()) {
				if (bd.isField()) {
					for (FieldDeclarator fd:bd.fieldDeclarations()) {
						if (!fd.isStatic()) {
							out.print("this.");
							out.printJSIdentifier(fd.getID(),"_f");
							out.print(" = ");
							out.print(fd.fieldDecl().type().isPrimitiveType() ? "0":"null");
							out.print(";");
							out.println();
						}
					}
				}
			}
			// call the super-constructor
			getConstructorInvocation().generateJS(out);
			// do all field initializations
			for (BodyDecl bd:hostType().getBodyDeclList()) {
				if (bd.isField()) {
					for (FieldDeclarator fd:bd.fieldDeclarations()) {
						if (!fd.isStatic() && fd.getInit()!=null) {
							out.print("this.");
							out.printJSIdentifier(fd.getID(),"_f");
							out.print(" = ");
							fd.getInit().generateJS(out);
							out.print(";");						
							out.println();
						}
					}
				} else if (bd instanceof InstanceInitializer) {
					bd.generateJS(out);
				}
			}
		}
		// execute constructor
  		int n = block.getNumStmt();
  		for (int i=0; i<n; i++) {
  			Stmt stmt = block.getStmt(i);
  			stmt.generateJS(out);
  		}
  		out.print("return this;");
		out.decreaseIndent();
		out.println();  		  		
		out.print("},");
  		out.println();
  	}

//	public void EnumConstant.generateJS(CodePrinter out) {
//	}

	public void InstanceInitializer.generateJS(CodePrinter out) {
		getBlock().generateJS(out);	
	}
//	public void FieldDecl.generateJS(CodePrinter out) {
//	}
//	public void MemberClassDecl.generateJS(CodePrinter out) {
//	}
//	public void MemberInterfaceDecl.generateJS(CodePrinter out) {
//	}

  	public void MethodDecl.generateJS(CodePrinter out) {
		Block block = getBlock();
		if (block==null) return;

  		int numpar = getNumParameter();  		
  		out.printJSIdentifier(name(), "_"+numpar);
  		out.print(": function(");
  		for (int i=0; i<numpar; i++) {
  			if (i>0) out.print(",");
  			out.printJSIdentifier(getParameter(i).name(), "");
  		}
  		out.print(")");
  		out.println();
  		
  		block.generateJS(out);
  		
  		out.print(",");
  		out.println();
  	}

	public void StaticInitializer.generateJS(CodePrinter out) {
		getBlock().generateJS(out);
	}

//	public void SubstitutedBodyDecl.generateJS(CodePrinter out) {
//	}
  	
  	
  	public static void Constant.generateCharacterJS(CodePrinter out, char c) {
  			switch(c) {
  			case '\b': 	out.print("\\b");
  						break;
  			case '\f':  out.print("\\f");	
  			            break;
  			case '\n':  out.print("\\n"); 
  			            break;
  			case '\r':  out.print("\\r");
  			            break;
  			case '\t':  out.print("\\t");
  			            break;
  			case '\\':  out.print("\\\\");
  			            break;
  			case '"':   out.print("\\\"");
  			            break;  			
  			case '\'':  out.print("\\'");
  			            break;  			
  			default: 
  				if (c>=32 && c<=126) {
  				 	out.print(""+c);
  				} else {
  					String hx = Integer.toHexString((int)c);
  					out.print("\\u");
  					for (int j=hx.length(); j<4; j++) {
  						out.print("0");
  					} 
  					out.print(hx);
  				}
  				break;
  			}  	
  	}  	  	
}

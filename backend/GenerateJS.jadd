aspect GenerateJS {
  	  	
  	public void ASTNode.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		System.err.print("UNEXPECTED:"+this.getClass().getName());
		this.dumpTree(System.err);
  	}

  	public void CompilationUnit.generateJS(File outputfolder) {
    	for (TypeDecl t:getTypeDecls()) {
			com.greentube.javaconverter.CodePrinter out = 
				new com.greentube.javaconverter.CodePrinter(
					outputfolder, t.constantPoolName()+".js");
	    	t.generateJS(out);
			out.finish();    		    	
    	}
  	}
    	
	public void ClassDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
		for (TypeDecl t:nestedTypes()) {
			com.greentube.javaconverter.CodePrinter o2 = 
			   new com.greentube.javaconverter.CodePrinter(out, t.constantPoolName()+".js");
	    	t.generateJS(o2);
    		o2.finish();    		
		}
	  
		String jsname = constantPoolName().replace('/','_');

    	out.print("var ");
    	out.print(jsname);
    	out.print(" = _extendClass(");
    	
    	if (hasSuperClass()) {
      		out.printAndMemorizeLoad(superclass().constantPoolName());
    	} else {
    		out.printAndMemorizeLoad("java/lang/Object");
    	} 
    	out.print (",{ ");
    	out.println();
    	out.increaseIndent(); 
    	    	        	    	        	    	    
      	for (BodyDecl b : methodsAndConstructors()) {
      		// check if need to suppress auto-generated methods related to Enums
			if (b instanceof MethodDecl) {
      			MethodDecl md = (MethodDecl) b;
      			if (this instanceof EnumDecl) {
      				if (md.getID().equals("values") && md.getNumParameter()==0 ) continue;
      				if (md.getID().equals("valueOf") && md.getNumParameter()==1 )  continue;
      			}
				if (md.getID().startsWith("$SwitchMap$") && md.getNumParameter()==0) continue;      		
      		}
      		else if (b instanceof ConstructorDecl) {
      			ConstructorDecl cd = (ConstructorDecl) b;
      			if (this instanceof EnumDecl) {
      				if (cd.isSynthetic()) continue;
      			}      		
      		}
	        b.generateJS(out);
    	}    	    	    
    	    	    	
		out.decreaseIndent(); 
		out.println();
		out.print("},\"" + jsname + "\",");
		
		if (!hasImplements()) {
			out.print("null");
		} else {
			out.print("[");
			int n=0;
      		for (Iterator<TypeDecl> iter = interfacesIterator(); iter.hasNext(); n++) {
      			if (n>0) out.print(",");
        		out.printAndMemorizeLoad(iter.next().constantPoolName());
      		}			
			out.print("]");
		} 
		out.print(");");
		out.println();

		for (BodyDecl bd:getBodyDeclList()) {
			if (bd.isField()) {
				for (FieldDeclarator fd:bd.fieldDeclarations()) {
					if (fd.isStatic()) {
						out.print(jsname+".prototype."+fd.getID()+"_f = ");
						out.print(fd.fieldDecl().type().isPrimitiveType() ? "0":"null");
						out.print(";");
						out.println();
					}
			 	}
			}
		}		
		for (BodyDecl bd:getBodyDeclList()) {
			if (bd.isField()) {
				for (FieldDeclarator fd:bd.fieldDeclarations()) {
					if (fd.isStatic() && fd.getInit()!=null) {
						out.print(jsname+".prototype."+fd.getID()+"_f = ");
						fd.getInit().generateJS(out);
						out.print(";");
						out.println();
					}
				}
			} else if (bd instanceof StaticInitializer) {
				bd.generateJS(out);
			}
		}
  	}
  	
	public void EnumDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
		super.generateJS(out);

		String cpname = constantPoolName();
		String jsname = cpname.replace('/','_');
		
		StringBuffer values = new StringBuffer();
		boolean needexternalinitialization = false;
		
		int ordinal = 0;
		for (EnumConstant ec:enumConstants()) {
			if (ec.getInit().type()!=this) {
				needexternalinitialization = true;
			} else {
				out.print(jsname+".prototype."+ec.getID()+"_f = ");
				out.print("(new "+jsname+"())._"+(ec.getNumArg()+2)+"(\""+ec.getID()+"\","+ordinal);
				for (int i=0; i<ec.getNumArg(); i++) {
					out.print(",");
					ec.getArg(i).generateJS(out);
				}
				out.print(");");				
				out.println();
			}
			
			if (ordinal>0) values.append(",");
			values.append(jsname+".prototype."+ec.getID()+"_f");
			
			ordinal++;			
		}
		
		out.print(jsname+".prototype.values_0 = function() {");
		out.println();
		out.increaseIndent();
		out.print("return ["+values.toString()+"];");
		out.println();
		out.decreaseIndent();
		out.print("};");
		out.println();
		
		if (needexternalinitialization) {
			out.memorizeReference(cpname+"$init");
			
			com.greentube.javaconverter.CodePrinter o2 = 
				 new com.greentube.javaconverter.CodePrinter(out, cpname+"$init.js");

				ordinal = 0;
				for (EnumConstant ec:enumConstants()) {
					if (ec.getInit().type()!=this) {
						o2.print(jsname+".prototype."+ec.getID()+"_f = ");
						o2.print("(new ");
						o2.printAndMemorizeComplete(ec.getInit().type().constantPoolName());
						o2.print("())._"+(ec.getNumArg()+2)+"(\""+ec.getID()+"\","+ordinal);
						for (int i=0; i<ec.getNumArg(); i++) {
							o2.print(",");
							ec.getArg(i).generateJS(o2);
						}
						o2.print(");");
						o2.println();
					}
					ordinal++;
				}				
	    		
			o2.finish();    		
		}
	}  
  	
	public void InterfaceDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
		String jsname = constantPoolName().replace('/','_');

    	out.print("var ");
    	out.print(constantPoolName().replace('/','_'));
    	out.print(" = _defineInterface(");
		out.print("\""+constantPoolName().replace('/','_')+"\",");
		if (!hasSuperInterface()) {
			out.print("null");
    		out.memorizeLoad("java/lang/Object");
		} else {
			out.print("[");
			int n=0;
      		for (Iterator<TypeDecl> iter = interfacesIterator(); iter.hasNext(); n++) {
      			if (n>0) out.print(",");
        		out.printAndMemorizeLoad(iter.next().constantPoolName());
      		}			
			out.print("]");
		}
		out.print(");");
		out.println();
		
		for (BodyDecl bd:getBodyDeclList()) {
			if (bd.isField()) {
				for (FieldDeclarator fd:bd.fieldDeclarations()) {
					if (fd.isStatic()) {
						out.print(jsname+".prototype."+fd.getID()+"_f = ");
						fd.getInit().generateJS(out);
						out.print(";");					}
						out.println();
				}
			}
		}		
		
	}  
  	

  	public void ConstructorDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
		Block block = getBlock();
		
  		int numpar = getNumParameter();  		
  		out.print("_"+numpar+": function(");
  		for (int i=0; i<numpar; i++) {
  			if (i>0) out.print(",");
  			out.printLocalVariable(getParameter(i).name());
  		}
  		out.print(") {");  		
  		out.println();
		out.increaseIndent();

		// decide if all the fields have to be initialized right here	
		boolean needsInit = true;			
		if (hasConstructorInvocation()) {
	        Stmt stmt = getConstructorInvocation();
        	if (stmt instanceof ExprStmt) {
          		ExprStmt exprStmt = (ExprStmt) stmt;
          		Expr expr = exprStmt.getExpr();
          		if (!expr.isSuperConstructorAccess()) {
            		needsInit = false;
          		}
        	}
      	}		
		
		// if calling a constructor of this, do not initialize all variables twice		
		if (! needsInit) {
			getConstructorInvocation().generateJS(out);			
		} else { 
		// when a super-constructor is called, the initialization of everything else needs to be done here
			// set instance variables to 0 / null		
			for (BodyDecl bd:hostType().getBodyDeclList()) {
				if (bd.isField()) {
					for (FieldDeclarator fd:bd.fieldDeclarations()) {
						if (!fd.isStatic()) {
							out.print("this."+fd.getID()+"_f = ");
							out.print(fd.fieldDecl().type().isPrimitiveType() ? "0":"null");
							out.print(";");
							out.println();
						}
					}
				}
			}
			// call the super-constructor
			getConstructorInvocation().generateJS(out);
			// do all field initializations
			for (BodyDecl bd:hostType().getBodyDeclList()) {
				if (bd.isField()) {
					for (FieldDeclarator fd:bd.fieldDeclarations()) {
						if (!fd.isStatic() && fd.getInit()!=null) {
							out.print("this."+fd.getID()+"_f = ");
							fd.getInit().generateJS(out);
							out.print(";");						
							out.println();
						}
					}
				} else if (bd instanceof InstanceInitializer) {
					bd.generateJS(out);
				}
			}
		}
		// execute constructor
  		int n = block.getNumStmt();
  		for (int i=0; i<n; i++) {
  			Stmt stmt = block.getStmt(i);
  			stmt.generateJS(out);
  		}
  		out.print("return this;");
		out.decreaseIndent();
		out.println();  		  		
		out.print("},");
  		out.println();
  	}

//	public void EnumConstant.generateJS(com.greentube.javaconverter.CodePrinter out) {
//	}

	public void InstanceInitializer.generateJS(com.greentube.javaconverter.CodePrinter out) {
		getBlock().generateJS(out);	
	}
//	public void FieldDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
//	}
//	public void MemberClassDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
//	}
//	public void MemberInterfaceDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
//	}

  	public void MethodDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
		Block block = getBlock();
		if (block==null) return;

  		int numpar = getNumParameter();  		
  		out.print(name()+"_"+numpar+": function(");
  		for (int i=0; i<numpar; i++) {
  			if (i>0) out.print(",");
  			out.printLocalVariable(getParameter(i).name());
  		}
  		out.print(")");
  		out.println();
  		
  		block.generateJS(out);
  		
  		out.print(",");
  		out.println();
  	}

	public void StaticInitializer.generateJS(com.greentube.javaconverter.CodePrinter out) {
		getBlock().generateJS(out);
	}

//	public void SubstitutedBodyDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
//	}
  	
}

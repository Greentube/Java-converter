import com.greentube.javaconverter.CodePrinter;

aspect GenerateJS {
  	  	
  	public void ASTNode.generateJS(CodePrinter out) {
  		System.err.println("Can not create JS for:"+this.getClass().getName());
		this.dumpTree(System.err);
  	}

  	public void CompilationUnit.generateJS(File outputfolder) {
    	for (TypeDecl t:getTypeDecls()) {
			CodePrinter out = new CodePrinter(outputfolder,
					CodePrinter.escapePackagePath(t.packageName()) 
				    + CodePrinter.escapeIdentifier(t.uniqueName(), true) + ".js"
				);
	    	t.generateJS(out);
			out.finish();    		    	
    	}
  	}
    	
	public void ClassDecl.generateJS(CodePrinter out) {
		for (TypeDecl t:nestedTypes()) {
			CodePrinter o2 = new CodePrinter(out, 
					CodePrinter.escapePackagePath(t.packageName()) 
				    + CodePrinter.escapeIdentifier(t.uniqueName(), true) + ".js"
			);
	    	t.generateJS(o2);
    		o2.finish();    		
		}
	  
    	out.print("var ");
    	out.printJSName(packageName(), uniqueName());
    	out.print(" = ");
    	out.println();
    	out.print("{");
        out.println();
        out.increaseIndent();

        // allocator function
        boolean foundpar=false; 
        out.print ("$: function(");
        if (needsEnclosing()) 
        {   out.print("_o");
            foundpar=true;
        }
        for (Variable v:enclosingVariables()) {
            if (foundpar) out.print(",");
            out.printCSIdentifier(v.name(),"_o");
            foundpar=true;
        }
        out.print(")");
        out.println();
        out.print("{");        
        out.println();
        out.increaseIndent();   
        if (!superclass().isObject()) 
        {   out.printAndMemorizeLoad(superclass().packageName(),superclass().uniqueName());
            out.print(".$.call(this" + (superclass().needsEnclosing()?",_o":"") +");");
            out.println();
        }  
        if (needsEnclosing() && !superclass().needsEnclosing()) 
        {   out.print("this._o = _o;");
            out.println();
        }
        for (Variable v:enclosingVariables()) {
            out.print("this.");
            out.printCSIdentifier(v.name(),"_o");
            out.print(" = ");
            out.printCSIdentifier(v.name(),"_o");
            out.print(";");
            out.println();
        }
        for (BodyDecl bd:getBodyDeclList()) 
        {   if (bd.isField()) 
            {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                {   if (!fd.isStatic()) 
                    {   out.print("this.");
                        out.printJSIdentifier(fd.getID(),"");
                        out.print(" = ");
                        fd.fieldDecl().type().generateDefaultValueJS(out);
                        out.print(";");
                        out.println();
                    }
                }
            }
        }
        out.decreaseIndent();
        out.print("}");
        out.println();
        out.print(",");
        out.println();

        // static methods and fields
        for (BodyDecl bd:getBodyDeclList()) {
            if (bd instanceof MethodDecl) {
                MethodDecl md = (MethodDecl) bd;
                if (!md.isStatic()) continue;
                bd.generateJS(out);         
            } else if (bd.isField()) {
                for (FieldDeclarator fd:bd.fieldDeclarations()) {
                    if (!fd.isStatic()) continue;
                    out.printJSIdentifier(fd.getID(),"");
                    out.print(": ");
                    if (fd.getInit()!=null && fd.getInit().isConstant() && fd.isFinal()) {
                        fd.getInit().generateUsingResultJS(out);
                    } else {
                        fd.fieldDecl().type().generateDefaultValueJS(out);
                    }
                    out.print(",");
                    out.println();
                }
            }
        }       
                
        if (this instanceof EnumDecl) {
            out.print("values_0 : function()");
            out.println();
            out.print("{");
            out.println();
            out.increaseIndent();
            out.print("return [");
            out.println();
            out.increaseIndent(); 
            for (EnumConstant ec:((EnumDecl)this).enumConstants()) {
                out.printJSName(packageName(), uniqueName());           
                out.print(".");
                out.printJSIdentifier(ec.getID(),"");
                out.print(",");
                out.println();
            }
            out.decreaseIndent();
            out.print("];");        
            out.println();
            out.decreaseIndent();
            out.print("}");
            out.println();      
            out.print(",");
            out.println();      
        }           
                        
        out.decreaseIndent(); 
        out.print("};");
        out.println();


        out.print("_class(");
        out.printJSName(packageName(), uniqueName());
        out.print(", ");
        out.printAndMemorizeLoad(superclass().packageName(),superclass().uniqueName());
        out.print(", ");

        if (!hasImplements()) 
        {   out.print("null");
        }
        else
        {   out.print("[");
            int n=0;
            for (Iterator<TypeDecl> iter = interfacesIterator(); iter.hasNext(); n++) 
            {   if (n>0) out.print(",");
                TypeDecl t = iter.next();
                out.printAndMemorizeLoad(t.packageName(), t.uniqueName());
            }
            out.print("]");
        } 
		out.print(", ");
		out.print("\"");
		out.print(fullName());
		out.print("\",");
		out.println();
		out.print("{");		
		out.println();
        out.increaseIndent();                                     

        Collection<MethodDecl> bridgemethods = localBridgeMethods();
		// instance methods    	    	        	    	  		      	    	    
      	for (BodyDecl bd : methodsAndConstructors()) {
      	     // check if need to suppress auto-generated bridge methods 
      	     if (bridgemethods.contains(bd)) continue;
      	      
      		// check if need to suppress auto-generated methods related to Enums      		
			if (bd instanceof MethodDecl) {
      			MethodDecl md = (MethodDecl) bd;
      			if (md.isStatic()) continue;      			
      		}
      		else if (bd instanceof ConstructorDecl) {
      			ConstructorDecl cd = (ConstructorDecl) bd;
      			if (this instanceof EnumDecl) {
      				if (cd.isSynthetic()) continue;
      			}      		
      		}
	        bd.generateJS(out);
    	}    	
    	
    	out.decreaseIndent();     	    	        	    	  
    	out.print ("});");
    	out.println();
    	
		// additional initialization code
		for (BodyDecl bd:getBodyDeclList()) {
			if (bd.isField()) {
				for (FieldDeclarator fd:bd.fieldDeclarations()) {
					if (fd.isStatic()) {
						if (fd.getInit()!=null && !(fd.isFinal() && fd.getInit().isConstant()) ) {
	    					out.printJSName(packageName(), uniqueName());					
							out.print(".");
							out.printJSIdentifier(fd.getID(),"");
							out.print(" = ");
							fd.getInit().generateUsingResultJS(out);
							out.print(";");
							out.println();
						}
					}
				}
			} else if (bd instanceof StaticInitializer) {
				bd.generateJS(out);
			}
		}
  	}
  	
	public void EnumDecl.generateJS(CodePrinter out) {
		super.generateJS(out);
		
		ArrayList<String> values = new ArrayList<>();
		boolean needexternalinitialization = false;
		
		int ordinal = 0;
		for (EnumConstant ec:enumConstants()) {
			if (ec.getInit().type()!=this) {
				needexternalinitialization = true;
			} else {
    			out.printJSName(packageName(), uniqueName());			
				out.print(".");
				out.printJSIdentifier(ec.getID(),"");
				out.print(" = ");
				out.print("new ");
				out.printJSName(packageName(), uniqueName());
				out.print(".$()._"+(ec.getNumArg()+2)+"(\"");
				String id = ec.getID();
				for (int i=0; i<id.length(); i++) {
					Constant.generateCharacterJS(out, id.charAt(i)); 
				}
				out.print("\","+ordinal);				
				for (int i=0; i<ec.getNumArg(); i++) {
					out.print(",");
					ec.getArg(i).generateJS(out);
				}
				out.print(");");				
				out.println();
			}
			
			values.add(ec.getID());			
			ordinal++;			
		}
				
		if (needexternalinitialization) {
			out.memorizeReference(packageName(),uniqueName()+"$init");
			
			CodePrinter o2 = new CodePrinter(out,
					CodePrinter.escapePackagePath(packageName()) 
				    + CodePrinter.escapeIdentifier(uniqueName()+"$init", true) + ".js"
			);

				ordinal = 0;
				for (EnumConstant ec:enumConstants()) {
					if (ec.getInit().type()!=this) {
						o2.printJSName(packageName(), uniqueName());					
						o2.print(".");
						o2.printJSIdentifier(ec.getID(),"");
						o2.print(" = ");
						o2.print("new ");
						TypeDecl t = ec.getInit().type();
						o2.printAndMemorizeComplete(t.packageName(),t.uniqueName());
						o2.print(".$()._"+(ec.getNumArg()+2)+"(\"");
						String id = ec.getID();
						for (int i=0; i<id.length(); i++) {
							Constant.generateCharacterJS(o2,id.charAt(i));
						}
						o2.print("\","+ordinal);
						for (int i=0; i<ec.getNumArg(); i++) {
							o2.print(",");
							ec.getArg(i).generateJS(o2);
						}
						o2.print(");");
						o2.println();
					}
					ordinal++;
				}				
	    		
			o2.finish();    		
		}
	}  
  	
	public void InterfaceDecl.generateJS(CodePrinter out) {

    	out.print("var ");
    	out.printJSName(packageName(),uniqueName());
    	out.print(" =");
    	out.println();
    	out.print("{ ");
    	out.println();
    	out.increaseIndent();
    	out.print("_superinterfaces: ");
		if (!hasSuperInterface()) {
			out.print("null");
		} else {
			out.print("[");
			int n=0;
      		for (Iterator<TypeDecl> iter = interfacesIterator(); iter.hasNext(); n++) {
      			if (n>0) out.print(",");
      			TypeDecl t = iter.next();
        		out.printAndMemorizeLoad(t.packageName(),t.uniqueName());
      		}			
			out.print("]");
		}
		out.print(",");
		out.println();
				
	    Vector<MethodDecl> defaults = new Vector<>();
		for (BodyDecl bd:getBodyDeclList()) {
			if (bd.isField()) {
				for (FieldDeclarator fd:bd.fieldDeclarations()) {
					if (fd.isStatic()) {
						out.printJSIdentifier(fd.getID(), "");
						out.print(": ");
						fd.getInit().generateJS(out);
						out.print(",");					}
						out.println();
				}
			}
            else if (bd instanceof MethodDecl) 
            {   MethodDecl md = (MethodDecl) bd;
                if (md.isStatic())
                {   md.generateJS(out);
                }
                else
                {   defaults.add(md);
                }                
			}
		}
		if (defaults.size()>0) 
		{     out.print("_defaults:");
		      out.println();
		      out.print("{   ");
		      out.increaseIndent();		      
              for (MethodDecl md:defaults)
              {     md.generateJS(out);
              }		
              out.decreaseIndent();
		      out.print("}");
		      out.println();
              out.print(",");
              out.println();
		}	
		
		out.decreaseIndent();
		out.print("};");
		out.println();			
	}  
  	

    public void ConstructorDecl.generateJS(CodePrinter out) 
    {   
        Block block = getBlock();

        int numpar = getNumParameter();  		
        out.print("_"+numpar+": function(");
        for (int i=0; i<numpar; i++) 
        {   if (i>0) out.print(",");
            out.printJSIdentifier(getParameter(i).name(), "");
        }
        out.print(")");
        out.println();
        out.print("{");
        out.println();
        out.increaseIndent();

        // decide if all the fields have to be initialized right here	
        boolean needsInit = true;
        if (hasConstructorInvocation()) 
        {   Stmt stmt = getConstructorInvocation();
            if (stmt instanceof ExprStmt) 
            {   ExprStmt exprStmt = (ExprStmt) stmt;
                Expr expr = exprStmt.getExpr();
                if (!expr.isSuperConstructorAccess()) 
                {   needsInit = false;
                }
            }
        }
        
        // if calling a constructor of this, do not initialize all variables twice		
        if (! needsInit) 
        {   getConstructorInvocation().generateJS(out);
        } 
        else 
        {   // when a super-constructor is called, the initialization of everything 
            // else needs to be done here.
            // call the super-constructor (if not from Object)
            if (! ( (ClassDecl) (((ClassDecl)hostType()).superclass()) ) .isObject()) 
            {   getConstructorInvocation().generateJS(out);
            }

            // do all field initializations
            for (BodyDecl bd:hostType().getBodyDeclList()) 
            {   if (bd.isField()) 
                {   for (FieldDeclarator fd:bd.fieldDeclarations()) 
                    {   if (!fd.isStatic() && fd.getInit()!=null) 
                        {   out.print("this.");
                            out.printJSIdentifier(fd.getID(),"");
                            out.print(" = ");
                            fd.getInit().generateUsingResultJS(out);
                            out.print(";");
                            out.println();
                        }
                    }
                }
                else if (bd instanceof InstanceInitializer) 
                {   bd.generateJS(out);
                }
            }
        }
        // execute constructor
        int n = block.getNumStmt();
        for (int i=0; i<n; i++) 
        {   Stmt stmt = block.getStmt(i);
            stmt.generateJS(out);
        }
        out.print("return this;");
        out.decreaseIndent();
        out.println();
        out.print("}");
        out.println();
        out.print(",");
        out.println();
    }

//	public void EnumConstant.generateJS(CodePrinter out) {
//	}

    public void InstanceInitializer.generateJS(CodePrinter out) 
    {   getBlock().generateJS(out);	
    }
//	public void FieldDecl.generateJS(CodePrinter out) {
//	}
//	public void MemberClassDecl.generateJS(CodePrinter out) {
//	}
//	public void MemberInterfaceDecl.generateJS(CodePrinter out) {
//	}

    public void MethodDecl.generateJS(CodePrinter out) 
    {   Block block = getBlock();
        if (block==null) return;

        int numpar = getNumParameter();
        out.printJSIdentifier(name(), "_"+numpar);
        out.print(": function(");
        for (int i=0; i<numpar; i++) 
        {   if (i>0) out.print(",");
            out.printJSIdentifier(getParameter(i).name(), "");
        }
        out.print(")");
        out.println();
        
        block.generateJS(out);

        out.print(",");
        out.println();
    }

	public void StaticInitializer.generateJS(CodePrinter out) {
		getBlock().generateJS(out);
	}

//	public void SubstitutedBodyDecl.generateJS(CodePrinter out) {
//	}
  	
	public void TypeDecl.generateDefaultValueJS(CodePrinter out) {
		if (isPrimitiveType()) {
  			if (isBoolean()) {
  				out.print("false");
  			} else {
  				out.print("0");
  			} 
  		} else {
  			out.print("null");
  		}
	}		
  	
    public static void Constant.generateCharacterJS(CodePrinter out, char c) 
    {   switch(c) 
        {   case '\b':
            {   out.print("\\b");
                break;
            }
            case '\f':
            {   out.print("\\f"); 
                break;
            }
            case '\n':
            {   out.print("\\n");
                break;
            }
            case '\r':
            {   out.print("\\r");
                break;
            }
            case '\t':
            {   out.print("\\t");
                break;
            }
            case '\\':
            {   out.print("\\\\");
                break;
            }
            case '"':
            {   out.print("\\\"");
                break;
            }
            case '\'':
            {   out.print("\\'");
                break;
            }
            default:
            {   if (c>=32 && c<=126) 
                {   out.print(""+c);
                } 
                else 
                {   String hx = Integer.toHexString((int)c);
                    out.print("\\u");
                    for (int j=hx.length(); j<4; j++) 
                    {   out.print("0");
                    }
                    out.print(hx);
                }
                break;
            }
        }
    }

    public void Constant.generateJS(CodePrinter out) 
    {   if (this instanceof	ConstantBoolean) 
        {   out.print(booleanValue()?"true":"false");
        }
        else if (this instanceof ConstantChar) 
        {   out.print(""+intValue());
        }
        else if (this instanceof ConstantDouble) 
        {   double d = doubleValue();
            if (d==Double.POSITIVE_INFINITY) 
            {   out.print("(1.0/0.0)");
            }
            else if (d==Double.NEGATIVE_INFINITY)
            {   out.print("((-1.0)/0.0)");
            }
            else 
            {   out.print(""+doubleValue());   
            }   
        }
        else if (this instanceof ConstantInt) 
        {   out.print(""+intValue());
        }
        else if (this instanceof ConstantString) 
        {   String v = stringValue();
            out.print("\"");
            for (int i=0; i<v.length(); i++) 
            {   generateCharacterJS(out, v.charAt(i));
            }
            out.print("\"");
        }
    }
}

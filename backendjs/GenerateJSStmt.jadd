aspect GenerateJS {
 
 	// --- AssertStmt ---
 	
 	// --- BasicTWR ---
 	
 	// --- Block ---
 	
	public void Block.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.println();
		out.print("{");
		out.increaseIndent();
  		int n = getNumStmt();
  		for (int i=0; i<n; i++) {
  			out.println();
  			Stmt stmt = getStmt(i);
  			stmt.generateJS(out);
  			if (!(stmt instanceof Case)) out.print(";");
  		}
		out.decreaseIndent();
		out.println();  		  		
		out.print("}");
  	}
  
  	// --- BranchTargetStmt ---
  	
//	public void DoStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
// 	}
//	public void EnhancedForStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
// 	}
	public void ForStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("for (");
		for (int i=0; i<getNumInitStmt(); i++) {
			getInitStmt(i).generateJS(out);
		}
		out.print("; ");
		if (hasCondition()) {
			getCondition().generateJS(out);
		}
		out.print("; ");
		for (int i=0; i<getNumUpdateStmt(); i++) {
			getUpdateStmt(i).generateJS(out);
		}
		out.print(")");
		getStmt().generateJS(out);
 	}
//	public void LabeledStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
// 	}
	public void SwitchStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("switch (");
		getExpr().generateJS(out);
		out.print(")");
		getBlock().generateJS(out);	
 	}

	public void WhileStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("while (");
		getCondition().generateJS(out);
		out.print(")");
		getStmt().generateJS(out);	
 	}
  	
  	// --- BreakStmt ---
  	
	public void BreakStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("break");
	}
  	
  	// --- Case ---
  	
	public void ConstCase.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("case ");
		getValue().generateJS(out);
		out.print(":");
	}
	public void DefaultCase.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("default:");
	}
  	
  	// --- ContinueStmt ---
  
    // --- EmptyStmt ---
    
    // --- ExprStmt ---
  
	public void ExprStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		getExpr().generateJS(out);
	}  	
	
	// --- IfStmt ---
	
	public void IfStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.print("if (");
		getCondition().generateJS(out);
		out.print(") ");
		getThen().generateJS(out);
		Stmt e = getElse();
		if (e!=null) {
			out.println();
			out.print("else ");
			e.generateJS(out);
		}
	}  	
	
	// --- LocalClassDeclStmt ---
	public void LocalClassDeclStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		ClassDecl cd = getClassDecl();
		try {    				
			com.greentube.javaconverter.CodePrinter o2 = 
				new com.greentube.javaconverter.CodePrinter(out, cd.constantPoolName());
			cd.generateJS(o2);
			o2.finish();
		} catch (IOException e) {
      		out.error(e.toString());
      		e.printStackTrace();
    	}			
	}

	
	// --- ReturnStmt ---

	public void ReturnStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		if (enclosingBodyDecl() instanceof ConstructorDecl) {
			out.print("return this");
		} else {
			Expr r = getResult();
			if (r==null) {
				out.print("return");
			} else {
				out.print("return ");
				r.generateJS(out);
			}
		}
	}  	
	
	// --- SynchronizedStmt ---
	
	public void SynchronizedStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.error("Threading is not supported");
	}
	
	// --- ThrowStmt ---
	
	public void ThrowStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.error("Exceptions are not supported");
	}
	
	// --- TryStmt ---
	
	public void TryStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.error("Exceptions are not supported");
	}
	
	// --- VarDeclStmt ---
	
	public void VarDeclStmt.generateJS(com.greentube.javaconverter.CodePrinter out) {
		for (int i=0; i<getNumDeclarator(); i++) {
			if (i>0) {
				out.print(";");
				out.println();
			}
			VariableDeclarator d = getDeclarator(i);			
			out.print("var " + d.name() + "_l = ");
			Expr e = d.getInit();
			if (e!=null) {
				e.generateJS(out);
			} else {
				out.print(type().isPrimitiveType() ? "0" : "null");
			}
		}
	}
	
}


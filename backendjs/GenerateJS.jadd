aspect GenerateJS {
  	  	
  	public void ASTNode.generateJS(com.greentube.javaconverter.CodePrinter out) {
  		out.error("Unexpected syntax element: "+this.getClass().getName()+" (internal compiler problem)");
		this.dumpTree(System.out);
  	}

  	public void CompilationUnit.generateJS(File outputfolder) {
    	for (TypeDecl t:getTypeDecls()) {
    		try {    		
    			File f= new File(outputfolder, t.constantPoolName()+".js"); 
    		   	f.getParentFile().mkdirs();
    		   	
				com.greentube.javaconverter.CodePrinter out = 
					new com.greentube.javaconverter.CodePrinter(new FileOutputStream(f));

	    		t.generateJS(out);
    			out.printExternals();
    			out.println();
    			out.close();
    		
    		} catch (IOException e) {
      			e.printStackTrace();
    		}
    	}
  	}
    	
	public void ClassDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {  
		out.println();		
    	out.print("var ");
    	out.print(constantPoolName().replace('/','_'));
    	out.print(" = _extendClass(");
    	
    	if (hasSuperClass()) {
      		out.printAndMemorizeLoad(superclass().constantPoolName());
    	} else {
    		out.printAndMemorizeLoad("java/lang/Object");
    	} 
    	out.print (",{ ");
    	out.increaseIndent(); 
    	    	    
      	Collection<BodyDecl> methods = methodsAndConstructors();
      	for (BodyDecl b : methods) {
	        b.generateJS(out);
    	}    	    	    
    	    	    	
		out.decreaseIndent(); out.println();
		out.print("},\"" + constantPoolName().replace('/','_') + "\",");
		if (!hasImplements()) {
			out.print("null");
		} else {
			out.print("[");
			int n=0;
      		for (Iterator<TypeDecl> iter = interfacesIterator(); iter.hasNext(); n++) {
      			if (n>0) out.print(",");
        		out.printAndMemorizeLoad(iter.next().constantPoolName());
      		}			
			out.print("]");
		} 
		out.print(");");

		for (BodyDecl bd:getBodyDeclList()) {
			for (FieldDeclarator fd:bd.fieldDeclarations()) {
				if (fd.isStatic()) {
					out.println();
					out.print(constantPoolName().replace('/','_')+".prototype."+fd.getID()+"_f = ");
					Expr e = fd.getInit();
					if (e!=null) {
						e.generateJS(out);
					} else if (fd.fieldDecl().type().isPrimitiveType()) {
						out.print("0");
					} else {
						out.print("null");
					}
					out.print(";");
				}
			}
		}
  	}
  	
	public void InterfaceDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
		out.println();		
    	out.print("var ");
    	out.print(constantPoolName().replace('/','_'));
    	out.print(" = _defineInterface(");
		out.print("\""+constantPoolName().replace('/','_')+"\",");
		if (!hasSuperInterface()) {
			out.print("null");
    		out.memorizeLoad("java/lang/Object");
		} else {
			out.print("[");
			int n=0;
      		for (Iterator<TypeDecl> iter = interfacesIterator(); iter.hasNext(); n++) {
      			if (n>0) out.print(",");
        		out.printAndMemorizeLoad(iter.next().constantPoolName());
      		}			
			out.print("]");
		}
		out.print(");");
	}  
  	
//  	public void TypeDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
//    	out.print(constantPoolName());
//    }  
  

  	public void ConstructorDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
		Block block = getBlock();
		
  		int numpar = getNumParameter();  		
  		out.println();
  		out.print("_"+numpar+": function(");
  		for (int i=0; i<numpar; i++) {
  			if (i>0) out.print(",");
  			out.print(getParameter(i).name());
  			out.print("_l");
  		}
  		out.print(")");
		out.println();
  		out.print("{");  		
		out.increaseIndent();
		getConstructorInvocation().generateJS(out);
  		int n = block.getNumStmt();
  		for (int i=0; i<n; i++) {
  			out.println();
  			Stmt stmt = block.getStmt(i);
  			stmt.generateJS(out);
			out.print(";");  			
  		}
  		out.println();
  		out.print("return this;");
		out.decreaseIndent();
		out.println();  		  		
		out.print("},");
  	}

//	public void EnumConstant.generateJS(com.greentube.javaconverter.CodePrinter out) {
//	}
//	public void InstantInitializer.generateJS(com.greentube.javaconverter.CodePrinter out) {
//	}
//	public void FieldDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
//	}
//	public void MemberClassDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
//	}
//	public void MemberInterfaceDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
//	}

  	public void MethodDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
		Block block = getBlock();
		if (block==null) return;

  		int numpar = getNumParameter();  		
  		out.println();
  		out.print(name()+"_"+numpar+": function(");
  		for (int i=0; i<numpar; i++) {
  			if (i>0) out.print(",");
  			out.print(getParameter(i).name());
  			out.print("_l");  			
  		}
  		out.print(")");
  		
  		block.generateJS(out);
  		
  		out.print(",");
  	}

//	public void StaticInitializer.generateJS(com.greentube.javaconverter.CodePrinter out) {
//	}

//	public void SubstitutedBodyDecl.generateJS(com.greentube.javaconverter.CodePrinter out) {
//	}
  	
}

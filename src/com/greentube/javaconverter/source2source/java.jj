
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
}



PARSER_BEGIN(JavaParser)

package com.greentube.dev.java2flash;
import java.util.*;

public class JavaParser {

  public static void main(String args[]) {
    JavaParser parser;
    if (args.length == 0) {
      System.out.println("Java Parser Version 1.0.2:  Reading from standard input . . .");
      parser = new JavaParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Java Parser Version 1.0.2:  Reading from file " + args[0] + " . . .");
      try {
        parser = new JavaParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser Version 1.0.2:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Java Parser Version 1.0.2:  Usage is one of:");
      System.out.println("         java JavaParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JavaParser inputfile");
      return;
    }
    try {
      Node n = parser.CompilationUnit();
      System.out.println ("Input dump ---------------");
      n.print("");
      System.out.println ("End of input dump ---------------");

    } catch (ParseException e) {
      System.out.println("Java Parser Version 1.0.2:  Encountered errors during parse.");
    }
  }


    // methods to build the parse tree

    Vector nodestack = new Vector();
    Token  tokenCursor = null;

    void startNode(String name) {
        int stacksize = nodestack.size();
        Token nexttoken = getToken(1);

        if (tokenCursor==null) tokenCursor=nexttoken;

        // add not consumed terminal symbols to parent node
        if (stacksize>0) {
            Node parent = (Node) nodestack.elementAt(stacksize-1);
            while (tokenCursor!=null && tokenCursor!=nexttoken) {
                addTokenToNode (tokenCursor,parent);
                tokenCursor=tokenCursor.next;
            }
        }

        // create new child node
        Node n = new Node(Node.TYPE_NONTERMINAL, name);
        n.lineNumber = token_source.lineNumber;
        nodestack.addElement(n);
    }

    Node finishNode() {
        int stacksize = nodestack.size();
        Token nexttoken = getToken(1);

        Node n = (Node) nodestack.elementAt(stacksize-1);

        // add not consumed terminal symbols to child node
        while (tokenCursor!=null && tokenCursor!=nexttoken) {
            addTokenToNode (tokenCursor,n);
            tokenCursor=tokenCursor.next;
        }

        if (stacksize>=2) {
            Node parent = (Node) nodestack.elementAt(stacksize-2);
            // move leading comments up to the parent node
            while (n.children.size()>0) {
                Node first = (Node) n.children.elementAt(0);
                if (!first.is(Node.TYPE_COMMENT)) break;
                n.children.removeElementAt(0);
                parent.addChild(first);
            }

            // add child to parent node
            parent.addChild (n);
        }
        nodestack.removeElementAt(stacksize-1);
        return n;
    }

    void addTokenToNode(Token token, Node node) {
        addSpecialTokenToNode (token.specialToken, node);
        node.addChild (new Node(Node.TYPE_TERMINAL, token.image));
    }
    
    void addSpecialTokenToNode (Token token, Node node) {
        if (token==null) return;
        addSpecialTokenToNode (token.specialToken,node);
        node.addChild (new Node(Node.TYPE_COMMENT, token.image));
    }
}

PARSER_END(JavaParser)


TOKEN_MGR_DECLS: {
    int lineNumber=1;
}


/* WHITE SPACE */

// SKIP :
SPECIAL_TOKEN :   // treat white space as special token to keep formatting info 
{
  " "
| "\t"
| "\n"  { lineNumber++; }
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > { lineNumber++;} : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  <"\n" | "\r" | "\r\n" > { lineNumber++;}
| < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < OVERRIDE: "@Override" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SUPPRESSWARNINGS: "@SuppressWarnings" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

Node CompilationUnit() :
  { startNode("CompilationUnit"); }
{
  PackageDeclaration()
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
  <EOF>

  { Node n = finishNode(); 
    if (!n.getText().equals("CompilationUnit")) {
        throw new ParseException("Internal error: Parse tree mismatched");
    }
    return n;
  }
}

void PackageDeclaration() :
  { startNode("PackageDeclaration"); }
{
  "package" Name() ";"
  { finishNode(); }
}

void ImportDeclaration() :
  { startNode("ImportDeclaration"); }
{
  "import" Name() [ "." "*" ] ";"
  { finishNode(); }
}

void TypeDeclaration() :
  { startNode("TypeDeclaration"); }
{
  LOOKAHEAD( ( "abstract" | "final" | "public" )* "class" )
  ClassDeclaration()
  { finishNode(); }
|
  InterfaceDeclaration()
  { finishNode(); }
|
  ";"
  { finishNode(); }
}


/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
  { startNode("ClassDeclaration"); }
{
  ( "abstract" | "final" | "public" | SuppressWarningsAnnotation() )*
  "class" <IDENTIFIER> [ "extends" Name() ] [ "implements" NameList() ]
  "{" ( ClassBodyDeclaration() )* "}"
  
  { finishNode(); } 
}

void ClassBodyDeclaration() :
  { startNode("ClassBodyDeclaration"); }
{
  LOOKAHEAD(2)
  StaticInitializer()
  { finishNode(); } 
|
  LOOKAHEAD( ( "public" | "protected" | "private" | SuppressWarningsAnnotation())* Name() "(" )
  ConstructorDeclaration()
  { finishNode(); } 
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
  { finishNode(); } 
|
  FieldDeclaration()
  { finishNode(); } 
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
  { startNode("MethodDeclarationLookahead"); }
{
  ( "public" | "protected" | "private" | "static" | "abstract" 
  | "final" | "native" | "synchronized" | "@Override" | SuppressWarningsAnnotation())*
  ResultType() <IDENTIFIER> "("
  { finishNode(); } 
}

void InterfaceDeclaration() :
  { startNode("InterfaceDeclaration"); }
{
  ( "abstract" | "public" | SuppressWarningsAnnotation())*
  "interface" <IDENTIFIER> [ "extends" NameList() ]
  "{" ( InterfaceMemberDeclaration() )* "}"
  { finishNode(); } 
}

void InterfaceMemberDeclaration() :
  { startNode("InterfaceMemberDeclaration"); }
{
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
  { finishNode(); } 
| 
  FieldDeclaration()
  { finishNode(); } 
}

void BracketPair() : // production added by Reinhard
  { startNode("BracketPair"); }
{
    "[" "]"
  { finishNode(); }
}

void FieldDeclaration() :
  { startNode("FieldDeclaration"); }
{
  ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" | SuppressWarningsAnnotation())*
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"
  { finishNode(); } 
}

void VariableDeclarator() :
  { startNode("VariableDeclarator"); }
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
  { finishNode(); } 
}

void VariableDeclaratorId() :
  { startNode("VariableDeclaratorId"); }
{
  <IDENTIFIER> ( BracketPair() )*    
  { finishNode(); } 
}

void VariableInitializer() :
  { startNode("VariableInitializer"); }
{
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] "}"    
  { finishNode(); }    
|
  Expression()
  { finishNode(); } 
}

void MethodDeclaration() :
  { startNode("MethodDeclaration"); }
{
  ( "public" | "protected" | "private" | "static" | "abstract" 
  | "final" | "native" | "synchronized" | "@Override" | SuppressWarningsAnnotation())*
  ResultType() MethodDeclarator() [ "throws" NameList() ]
  ( Block() | ";" )
  { finishNode(); } 
}

void MethodDeclarator() :
  { startNode("MethodDeclarator"); }
{
  <IDENTIFIER> FormalParameters() ( BracketPair() )* 
  { finishNode(); } 
}

void FormalParameters() :
  { startNode("FormalParameters"); }
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
  { finishNode(); } 
}

void FormalParameter() :
  { startNode("FormalParameter"); }
{
  Type() VariableDeclaratorId()
  { finishNode(); } 
}

void ConstructorDeclaration() :
  { startNode("ConstructorDeclaration"); }
{
  ( "public" | "protected" | "private" | SuppressWarningsAnnotation())*
  <IDENTIFIER> FormalParameters() [ "throws" NameList() ]
  "{" [ LOOKAHEAD(2) ExplicitConstructorInvocation() ] ( BlockStatement() )* "}"
  { finishNode(); } 
}

void ExplicitConstructorInvocation() :
  { startNode("ExplicitConstructorInvocation"); }
{
  "this" Arguments() ";"
  { finishNode(); } 
|
  "super" Arguments() ";"
  { finishNode(); } 
}

void StaticInitializer() :
  { startNode("StaticInitializer"); }
{
  "static" Block()
  { finishNode(); } 
}

void SuppressWarningsAnnotation() :
  { startNode("SuppressWarningsAnnotation"); }
{
  "@SuppressWarnings" "(" SuppressWarningsArguments() ")"
  { finishNode(); } 
}

void SuppressWarningsArguments() :
  { startNode("SuppressWarningsArguments"); }
{
  <STRING_LITERAL> 
  { finishNode(); }
|
  "{" <STRING_LITERAL> ( "," <STRING_LITERAL> )* "}"
  { finishNode(); }	 
}



/*
 * Type, name and expression syntax follows.
 */

void Type() :
  { startNode("Type"); }
{
  ( PrimitiveType() | Name() ) ( BracketPair() )*   
  { finishNode(); } 
}

void PrimitiveType() :
  { startNode("PrimitiveType"); }
{
  ( "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" )  
  { finishNode(); } 
}

void ResultType() :
  { startNode("ResultType"); }
{
  "void"
  { finishNode(); } 
|
  Type()
  { finishNode(); } 
}

void Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
  { startNode("Name"); }
{
  <IDENTIFIER>
  ( LOOKAHEAD(2) "." <IDENTIFIER>
  )*
  { finishNode(); } 
}

void NameList() :
  { startNode("NameList"); }
{
  Name()
  ( "," Name()
  )*
  { finishNode(); } 
}


/*
 * Expression syntax follows.
 */

void Expression() :
  { startNode("Expression"); }
{
  LOOKAHEAD( PrimaryExpression() AssignmentOperator() )
  Assignment()
  { finishNode(); } 
|
  ConditionalExpression()
  { finishNode(); } 
}

void Assignment() :
  { startNode("Assignment"); }
{
  PrimaryExpression() AssignmentOperator() Expression()
  { finishNode(); } 
}

void AssignmentOperator() :
  { startNode("AssignmentOperator"); }
{
  ( "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" ) 
  { finishNode(); } 
}

void ConditionalExpression() :
  { startNode("ConditionalExpression"); }
{
  ConditionalOrExpression() [ "?" Expression() ":" ConditionalExpression() ]
  { finishNode(); } 
}

void ConditionalOrExpression() :
  { startNode("ConditionalOrExpression"); }
{
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
  { finishNode(); } 
}

void ConditionalAndExpression() :
  { startNode("ConditionalAndExpression"); }
{
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
  { finishNode(); } 
}

void InclusiveOrExpression() :
  { startNode("InclusiveOrExpression"); }
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
  { finishNode(); } 
}

void ExclusiveOrExpression() :
  { startNode("ExclusiveOrExpression"); }
{
  AndExpression() ( "^" AndExpression() )*
  { finishNode(); } 
}

void AndExpression() :
  { startNode("AndExpression"); }
{
  EqualityExpression() ( "&" EqualityExpression() )*
  { finishNode(); } 
}

void EqualityExpression() :
  { startNode("EqualityExpression"); }
{
  InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*
  { finishNode(); } 
}

void InstanceOfExpression() :
  { startNode("InstanceOfExpression"); }
{
  RelationalExpression() [ "instanceof" Type() ]
  { finishNode(); } 
}

void RelationalExpression() :
  { startNode("RelationalExpression"); }
{
  ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
  { finishNode(); } 
}

void ShiftExpression() :
  { startNode("ShiftExpression"); }
{
  AdditiveExpression() ( ( "<<" | ">>" | ">>>" ) AdditiveExpression() )*  
  { finishNode(); } 
}

void AdditiveExpression() :
  { startNode("AdditiveExpression"); }
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*  
  { finishNode(); } 
}

void MultiplicativeExpression() :
  { startNode("MultiplicativeExpression"); }
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
  { finishNode(); } 
}

void UnaryExpression() :
  { startNode("UnaryExpression"); }
{
  ( "+" | "-" ) UnaryExpression()
  { finishNode(); } 
|
  PreIncrementExpression()
  { finishNode(); } 
|
  PreDecrementExpression()
  { finishNode(); } 
|
  UnaryExpressionNotPlusMinus()
  { finishNode(); } 
}

void PreIncrementExpression() :
  { startNode("PreIncrementExpression"); }
{
  "++" PrimaryExpression()
  { finishNode(); } 
}

void PreDecrementExpression() :
  { startNode("PreDecrementExpression"); }
{
  "--" PrimaryExpression()
  { finishNode(); } 
}

void UnaryExpressionNotPlusMinus() :
  { startNode("UnaryExpressionNotPlusMinus"); }
{
  ( "~" | "!" ) UnaryExpression()
  { finishNode(); } 
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
  { finishNode(); } 
|
  PostfixExpression()
  { finishNode(); } 
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
  { startNode("CastLookahead"); }
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
  { finishNode(); } 
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
  { finishNode(); } 
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
  { finishNode(); } 
}

void PostfixExpression() :
  { startNode("PostfixExpression"); }
{
  PrimaryExpression() [ "++" | "--" ]
  { finishNode(); } 
}

void CastExpression() :
  { startNode("CastExpression"); }
{
  LOOKAHEAD(2)
  "(" PrimitiveType() ( BracketPair() )* ")" UnaryExpression() 
  { finishNode(); } 
|
  "(" Name() ( BracketPair() )* ")" UnaryExpressionNotPlusMinus()  
  { finishNode(); } 
}

void PrimaryExpression() :
  { startNode("PrimaryExpression"); }
{
  PrimaryPrefix() ( PrimarySuffix() )*
  { finishNode(); } 
}

void PrimaryPrefix() :
  { startNode("PrimaryPrefix"); }
{
  Literal()
  { finishNode(); } 
|
  LOOKAHEAD(2) ThisMethodInvocation()     
  { finishNode(); } 
|
  <IDENTIFIER>   // modified by Reinhard
//  Name()      
  { finishNode(); } 
|
  "this"
  { finishNode(); } 
|
  "super" "." SuperMethodInvocation()      
  { finishNode(); } 
|
  "(" Expression() ")"
  { finishNode(); } 
|
  AllocationExpression()
  { finishNode(); } 
}

void PrimarySuffix() :
  { startNode("PrimarySuffix"); }
{
  "[" Expression() "]"
  { finishNode(); } 
|
  LOOKAHEAD(3) MethodInvocationSuffix()   
  { finishNode(); } 
|
  "." <IDENTIFIER>
  { finishNode(); } 
}

void ThisMethodInvocation() :    
  { startNode("ThisMethodInvocation"); }
{
  <IDENTIFIER> Arguments()
  { finishNode(); }
}

void SuperMethodInvocation() :     
  { startNode("SuperMethodInvocation"); }
{
  <IDENTIFIER> Arguments()
  { finishNode(); }
}

void MethodInvocationSuffix() :     
  { startNode("MethodInvocationSuffix"); }
{
  "." <IDENTIFIER> Arguments()
  { finishNode(); }
}

void Literal() :
 { startNode("Literal"); }
{
  <INTEGER_LITERAL>
  { finishNode(); } 
|
  FloatingPointLiteral()
  { finishNode(); } 
|
  CharacterLiteral()
  { finishNode(); } 
|
  StringLiteral()
  { finishNode(); } 
|
  BooleanLiteral()
  { finishNode(); } 
|
  NullLiteral()
  { finishNode(); } 
}

void FloatingPointLiteral() :
  { startNode("FloatingPointLiteral"); }
{
  <FLOATING_POINT_LITERAL>
  { finishNode(); } 
}

void CharacterLiteral() :
  { startNode("CharacterLiteral"); }
{
  <CHARACTER_LITERAL>
  { finishNode(); } 
}

void StringLiteral() :
  { startNode("StringLiteral"); }
{
  <STRING_LITERAL>
  { finishNode(); } 
}

void BooleanLiteral() :
  { startNode("BooleanLiteral"); }
{
  "true"
  { finishNode(); } 
|
  "false"
  { finishNode(); } 
}

void NullLiteral() :
  { startNode("NullLiteral"); }
{
  "null"
  { finishNode(); } 
}

void Arguments() :
  { startNode("Arguments"); }
{
  "(" [ ArgumentList() ] ")"
  { finishNode(); } 
}

void ArgumentList() :
  { startNode("ArgumentList"); }
{
  Expression() ( "," Expression() )*
  { finishNode(); } 
}

void AllocationExpression() :
  { startNode("AllocationExpression"); }
{
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimensionsOrInitializer()
  { finishNode(); } 
|
  "new" Name() ( Arguments() | ArrayDimensionsOrInitializer() )
  { finishNode(); } 
}


// production added by Reinhard
void ArrayDimensionsOrInitializer() :
  { startNode("ArrayDimensionsOrInitializer"); }
{
  LOOKAHEAD(2) ArrayInitializer()
  { finishNode(); } 
|
  ArrayDimensions()
  { finishNode(); } 
}

// production added by Reinhard
void ArrayInitializer() :
  { startNode("ArrayInitializer"); }
{
  BracketPair() "{" [ Expression() ( "," Expression() )* ] "}"
  { finishNode(); } 
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimensions() :
  { startNode("ArrayDimensions"); }
{
  ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) BracketPair() )*
  { finishNode(); } 
}



/*
 * Statement syntax follows.
 */

void Statement() :
  { startNode("Statement"); }
{
  LOOKAHEAD(2)
  LabeledStatement()
  { finishNode(); } 
|
  Block()
  { finishNode(); } 
|
  EmptyStatement()
  { finishNode(); } 
|
  StatementExpression() ";"
  { finishNode(); } 
|
  SwitchStatement()
  { finishNode(); } 
|
  IfStatement()
  { finishNode(); } 
|
  WhileStatement()
  { finishNode(); } 
|
  DoStatement()
  { finishNode(); } 
|
  ForStatement()
  { finishNode(); } 
|
  BreakStatement()
  { finishNode(); } 
|
  ContinueStatement()
  { finishNode(); } 
|
  ReturnStatement()
  { finishNode(); } 
|                             
  ThrowStatement()
  { finishNode(); } 
|
  SynchronizedStatement()     
  { finishNode(); } 
|
  TryStatement()              
  { finishNode(); } 
}

void LabeledStatement() :
  { startNode("LabeledStatement"); }
{
  <IDENTIFIER> ":" WhileStatement()         // restricted use of labels to while statements 			
  { finishNode(); } 
}

void Block() :
  { startNode("Block"); }
{
  "{" ( BlockStatement() )* "}"
  { finishNode(); } 
}

void BlockStatement() :
  { startNode("BlockStatement"); }
{
  LOOKAHEAD(Type() <IDENTIFIER>)
  LocalVariableDeclaration() ";"
  { finishNode(); } 
|
  Statement()
  { finishNode(); } 
}

void LocalVariableDeclaration() :
  { startNode("LocalVariableDeclaration"); }
{
  Type() VariableDeclarator() ( "," VariableDeclarator() )*
  { finishNode(); } 
}

void EmptyStatement() :
  { startNode("EmptyStatement"); }
{
  ";"
  { finishNode(); } 
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.
 */
  { startNode("StatementExpression"); }
{
  PreIncrementExpression()
  { finishNode(); } 
|
  PreDecrementExpression()
  { finishNode(); } 
|
  LOOKAHEAD( PrimaryExpression() AssignmentOperator() )
  Assignment()
  { finishNode(); } 
|
  PostfixExpression()
  { finishNode(); } 
}

void SwitchStatement() :
  { startNode("SwitchStatement"); }
{
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( Statement() )* )*
  "}"
  { finishNode(); } 
}

void SwitchLabel() :
  { startNode("SwitchLabel"); }
{
  "case" Expression() ":"
  { finishNode(); } 
|
  "default" ":"
  { finishNode(); } 
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
  { startNode("IfStatement"); }
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
  { finishNode(); } 
}

void WhileStatement() :
  { startNode("WhileStatement"); }
{
  "while" "(" Expression() ")" Statement()
  { finishNode(); } 
}

void DoStatement() :
  { startNode("DoStatement"); }
{
  "do" Statement() "while" "(" Expression() ")" ";"
  { finishNode(); } 
}

void ForStatement() :
  { startNode("ForStatement"); }
{
  "for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")" Statement()
  { finishNode(); } 
}

void ForInit() :
  { startNode("ForInit"); }
{
  LOOKAHEAD( Type() <IDENTIFIER> )
  LocalVariableDeclaration()
  { finishNode(); } 
|
  StatementExpressionList()
  { finishNode(); } 
}

void StatementExpressionList() :
  { startNode("StatementExpressionList"); }
{
  StatementExpression() ( "," StatementExpression() )*
  { finishNode(); } 
}

void ForUpdate() :
  { startNode("ForUpdate"); }
{
  StatementExpressionList()
  { finishNode(); } 
}

void BreakStatement() :
  { startNode("BreakStatement"); }
{
//  "break" [ <IDENTIFIER> ] ";"
  "break" ";"						// do not allow labeled breaks in converted code
  { finishNode(); } 
}

void ContinueStatement() :
  { startNode("ContinueStatement"); }
{
  "continue" [ <IDENTIFIER> ] ";"
  { finishNode(); } 
}

void ReturnStatement() :
  { startNode("ReturnStatement"); }
{
  "return" [ Expression() ] ";"
  { finishNode(); } 
}

void ThrowStatement() :
  { startNode("ThrowStatement"); }
{
  "throw" Expression() ";"
  { finishNode(); } 
}

void SynchronizedStatement() :
  { startNode("SynchronizedStatement"); }
{
  "synchronized" "(" Expression() ")" Block()
  { finishNode(); } 
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
  { startNode("TryStatement"); }
{
  "try" Block()
  ( "catch" "(" FormalParameter() ")" Block() )*
  [ "finally" Block() ]
  { finishNode(); }
}
